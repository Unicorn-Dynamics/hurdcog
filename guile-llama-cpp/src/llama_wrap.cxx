/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGGUILE
#define SWIG_GUILE_INIT_STATIC static
extern "C" {

SWIG_GUILE_INIT_STATIC void
SWIG_init (void);

}

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * guile_scm_run.swg
 * ----------------------------------------------------------------------------- */

#if __GNUC__ >= 10
#if defined(__cplusplus)
#pragma GCC diagnostic ignored "-Wvolatile" /* For 'volatile SCM *' in at least Guile 3.0 and earlier */
#endif
#endif

#include <libguile.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>

#ifdef __cplusplus
extern "C" {
#endif


/* In the code below, use guile 2.0 compatible functions where possible.
   Functions that don't exist in older versions will be mapped to
   a deprecated equivalent for those versions only */
#if defined (SCM_MAJOR_VERSION) && (SCM_MAJOR_VERSION < 2)

static SCM
scm_module_variable (SCM module, SCM sym)
{
  return scm_sym2var (sym, scm_module_lookup_closure (module), SCM_BOOL_F);
}

#define scm_to_utf8_string scm_to_locale_string
#define scm_from_utf8_string scm_from_locale_string
#endif

#if SCM_MAJOR_VERSION >= 2
/* scm_c_define_gsubr takes a different parameter type depending on the guile version */

typedef scm_t_subr swig_guile_proc;
#else
typedef SCM (*swig_guile_proc)();
#endif
typedef SCM (*guile_destructor)(SCM);

typedef struct swig_guile_clientdata {
  guile_destructor destroy;
  SCM goops_class;
} swig_guile_clientdata;

#define SWIG_scm2str(s) \
  SWIG_Guile_scm2newstr(s, NULL)
#define SWIG_str02scm(str) \
  str ? scm_from_utf8_string(str) : SCM_BOOL_F 
# define SWIG_malloc(size) \
  scm_malloc(size)
# define SWIG_free(mem) \
  free(mem)
#define SWIG_ConvertPtr(s, result, type, flags) \
  SWIG_Guile_ConvertPtr(s, result, type, flags)
#define SWIG_MustGetPtr(s, type, argnum, flags) \
  SWIG_Guile_MustGetPtr(s, type, argnum, flags, FUNC_NAME)
#define SWIG_NewPointerObj(ptr, type, owner) \
  SWIG_Guile_NewPointerObj((void*)ptr, type, owner)
#define SWIG_PointerAddress(object) \
  SWIG_Guile_PointerAddress(object)
#define SWIG_PointerType(object) \
  SWIG_Guile_PointerType(object)
#define SWIG_IsPointerOfType(object, type) \
  SWIG_Guile_IsPointerOfType(object, type)
#define SWIG_IsPointer(object) \
  SWIG_Guile_IsPointer(object)
#define SWIG_contract_assert(expr, msg)				\
  do { \
    if (!(expr))							\
      scm_error(scm_from_locale_symbol("swig-contract-assertion-failed"),	\
                FUNC_NAME, msg, SCM_EOL, SCM_BOOL_F); \
  } while (0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty) \
  SWIG_Guile_ConvertMember(obj, ptr, sz, ty, FUNC_NAME)
#define SWIG_NewMemberObj(ptr, sz, type) \
  SWIG_Guile_NewMemberObj(ptr, sz, type, FUNC_NAME)
  
/* Runtime API */
static swig_module_info *SWIG_Guile_GetModule(void *SWIGUNUSEDPARM(clientdata));
#define SWIG_GetModule(clientdata) SWIG_Guile_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Guile_SetModule(pointer)
  
SWIGINTERN char *
SWIG_Guile_scm2newstr(SCM str, size_t *len) {
#define FUNC_NAME "SWIG_Guile_scm2newstr"
  char *ret;

  SCM_ASSERT (scm_is_string(str), str, 1, FUNC_NAME);

  ret = scm_to_utf8_string(str);
  if (!ret) return NULL;

  if (len) *len = strlen(ret) - 1;
  return ret;
#undef FUNC_NAME
}

static int swig_initialized = 0;
static scm_t_bits swig_tag = 0;
static scm_t_bits swig_collectable_tag = 0;
static scm_t_bits swig_finalized_tag = 0;
static scm_t_bits swig_destroyed_tag = 0;
static scm_t_bits swig_member_function_tag = 0;
static SCM swig_make_func = SCM_EOL;
static SCM swig_keyword = SCM_EOL;
static SCM swig_symbol = SCM_EOL;

#define SWIG_Guile_GetSmob(x) \
  ( !scm_is_null(x) && SCM_INSTANCEP(x) && scm_is_true(scm_slot_exists_p(x, swig_symbol)) \
      ? scm_slot_ref(x, swig_symbol) : (x) )

SWIGINTERN void SWIG_Guile_MarkPointerNoncollectable(SCM s);

SWIGINTERN SCM
SWIG_Guile_NewPointerObj(void *ptr, swig_type_info *type, int owner)
{
  if (ptr == NULL)
    return SCM_EOL;
  else {
    SCM smob;
    swig_guile_clientdata *cdata = (swig_guile_clientdata *) type->clientdata;
    if (owner)
      SCM_NEWSMOB2(smob, swig_collectable_tag, ptr, (void *) type);
    else
      SCM_NEWSMOB2(smob, swig_tag, ptr, (void *) type);

    if (!cdata || scm_is_null(cdata->goops_class) || swig_make_func == SCM_EOL ) {
      return smob;
    } else {
      /* the scm_make() C function only handles the creation of gf,
	 methods and classes (no instances) the (make ...) function is
	 later redefined in goops.scm.  So we need to call that
	 Scheme function. */
      return scm_apply(swig_make_func,
		       scm_list_3(cdata->goops_class,
				  swig_keyword,
				  smob),
		       SCM_EOL);
    }
  }
}

SWIGINTERN unsigned long
SWIG_Guile_PointerAddress(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (scm_is_null(smob)) return 0;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (unsigned long) (void *) SCM_CELL_WORD_1(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerAddress", 1, object);
}

SWIGINTERN swig_type_info *
SWIG_Guile_PointerType(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (scm_is_null(smob)) return NULL;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (swig_type_info *) SCM_CELL_WORD_2(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerType", 1, object);
}

SWIGINTERN int
SWIG_Guile_IsValidSmob(SCM smob)
{
  /* We do not accept smobs representing destroyed pointers, but we have to
     allow finalized smobs because Guile >= 2.0.12 sets all smob instances
     to the 'finalized' type before calling their 'free' function. This change
     was introduced to Guile in commit 8dff3af087c6eaa83ae0d72aa8b22aef5c65d65d */
  return SCM_SMOB_PREDICATE(swig_tag, smob)
    || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
    || SCM_SMOB_PREDICATE(swig_finalized_tag, smob);
}

SWIGINTERN int
SWIG_Guile_ConvertPtr(SCM s, void **result, swig_type_info *type, int flags)
{
  swig_cast_info *cast;
  swig_type_info *from;
  SCM smob = SWIG_Guile_GetSmob(s);
  int ret = SWIG_ERROR;

  if (scm_is_null(smob)) {
    *result = NULL;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
#if SCM_MAJOR_VERSION >= 2
  } else if (SCM_POINTER_P(s)) {
    *result = SCM_POINTER_VALUE(s);
    return SWIG_OK;
#endif /* if SCM_MAJOR_VERSION >= 2 */
  } else if (SWIG_Guile_IsValidSmob(smob)) {
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;

    if ((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) {
      if ((SCM_CELL_TYPE(smob) == swig_collectable_tag && SCM_CELL_WORD_1(smob) == 0) || SCM_CELL_TYPE(smob) == swig_tag) {
        return SWIG_ERROR_RELEASE_NOT_OWNED;
      }
    }

    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (cast) {
        int newmemory = 0;
        *result = SWIG_TypeCast(cast, (void *) SCM_CELL_WORD_1(smob), &newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        ret = SWIG_OK;
      } else {
        return SWIG_ERROR;
      }
    } else {
      *result = (void *) SCM_CELL_WORD_1(smob);
      ret = SWIG_OK;
    }

    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Guile_MarkPointerNoncollectable(smob);
    }
    if (flags & SWIG_POINTER_CLEAR) {
      SCM_SET_CELL_WORD_1(smob, 0);
    }
  }
  return ret;
}

SWIGINTERNINLINE void *
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, int flags, const char *func_name)
{
  void *result;
  int res = SWIG_Guile_ConvertPtr(s, &result, type, flags);
  if (!SWIG_IsOK(res)) {
    /* type mismatch */
    scm_wrong_type_arg(func_name, argnum, s);
  }
  return result;
}

SWIGINTERNINLINE int
SWIG_Guile_IsPointerOfType (SCM s, swig_type_info *type)
{
  void *result;
  if (SWIG_Guile_ConvertPtr(s, &result, type, 0)) {
    /* type mismatch */
    return 0;
  }
  else return 1;
}

SWIGINTERNINLINE int
SWIG_Guile_IsPointer (SCM s)
{
  /* module might not be initialized yet, so initialize it */
  SWIG_GetModule(0);
  return SWIG_Guile_IsPointerOfType (s, NULL);
}

/* Mark a pointer object non-collectable */
SWIGINTERN void
SWIG_Guile_MarkPointerNoncollectable(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!scm_is_null(smob)) {
    if (SWIG_Guile_IsValidSmob(smob)) {
      SCM_SET_CELL_TYPE(smob, swig_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Mark a pointer object destroyed */
SWIGINTERN void
SWIG_Guile_MarkPointerDestroyed(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!scm_is_null(smob)) {
    if (SWIG_Guile_IsValidSmob(smob)) {
      SCM_SET_CELL_TYPE(smob, swig_destroyed_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Member functions */

SWIGINTERN SCM
SWIG_Guile_NewMemberObj(void *ptr, size_t sz, swig_type_info *type,
			const char *func_name)
{
  SCM smob;
  void *copy = malloc(sz);
  memcpy(copy, ptr, sz);
  SCM_NEWSMOB2(smob, swig_member_function_tag, copy, (void *) type);
  return smob;
}

SWIGINTERN int
SWIG_Guile_ConvertMember(SCM smob, void *ptr, size_t sz, swig_type_info *type,
			 const char *func_name)
{
  swig_cast_info *cast;
  swig_type_info *from;

  if (SCM_SMOB_PREDICATE(swig_member_function_tag, smob)) {
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (!cast) return SWIG_ERROR;
    }
    memcpy(ptr, (void *) SCM_CELL_WORD_1(smob), sz);
    return SWIG_OK;
  }
  return SWIG_ERROR;
}
     

/* Init */

SWIGINTERN int
print_swig_aux (SCM swig_smob, SCM port, scm_print_state *pstate, 
                const char *attribute)
{
  swig_type_info *type;
  
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts("#<", port);
    scm_puts(attribute, port);
    scm_puts("swig-pointer ", port);
    scm_puts(SWIG_TypePrettyName(type), port);
    scm_puts(" ", port);
    scm_intprint((long) SCM_CELL_WORD_1(swig_smob), 16, port);
    scm_puts(">", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

  
SWIGINTERN int
print_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "");
}

SWIGINTERN int
print_collectable_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "collectable-");
}

SWIGINTERN int
print_destroyed_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "destroyed-");
}

SWIGINTERN int
print_member_function_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  swig_type_info *type;
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts("#<", port);
    scm_puts("swig-member-function-pointer ", port);
    scm_puts(SWIG_TypePrettyName(type), port);
    scm_puts(" >", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

SWIGINTERN SCM
equalp_swig (SCM A, SCM B)
{
  if (SCM_CELL_WORD_0(A) == SCM_CELL_WORD_0(B) && SCM_CELL_WORD_1(A) == SCM_CELL_WORD_1(B) 
      && SCM_CELL_WORD_2(A) == SCM_CELL_WORD_2(B))
    return SCM_BOOL_T;
  else return SCM_BOOL_F;
}

SWIGINTERN size_t
free_swig(SCM A)
{
  swig_type_info *type = (swig_type_info *) SCM_CELL_WORD_2(A);
  if (type) {
    if (type->clientdata && ((swig_guile_clientdata *)type->clientdata)->destroy)
      ((swig_guile_clientdata *)type->clientdata)->destroy(A);
  } 
  return 0;
}

SWIGINTERN size_t
free_swig_member_function(SCM A)
{
  free((swig_type_info *) SCM_CELL_WORD_1(A));
  return 0;
}

SWIGINTERN int
ensure_smob_tag(SCM swig_module,
		scm_t_bits *tag_variable,
		const char *smob_name,
		const char *scheme_variable_name)
{
  SCM variable = scm_module_variable(swig_module,
                             scm_from_locale_symbol(scheme_variable_name));
  if (scm_is_false(variable)) {
    *tag_variable = scm_make_smob_type(scheme_variable_name, 0);
    scm_c_module_define(swig_module, scheme_variable_name, 
                        scm_from_ulong(*tag_variable));
    return 1;
  }
  else {
    *tag_variable = scm_to_ulong(SCM_VARIABLE_REF(variable));
    return 0;
  }
}

SWIGINTERN SCM
SWIG_Guile_Init ()
{
  static SCM swig_module;
  
  if (swig_initialized) return swig_module;
  swig_initialized = 1;

  swig_module = scm_c_resolve_module("Swig swigrun");
  if (ensure_smob_tag(swig_module, &swig_tag,
		      "swig-pointer", "swig-pointer-tag")) {
    scm_set_smob_print(swig_tag, print_swig);
    scm_set_smob_equalp(swig_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_collectable_tag,
		      "collectable-swig-pointer", "collectable-swig-pointer-tag")) {
    scm_set_smob_print(swig_collectable_tag, print_collectable_swig);
    scm_set_smob_equalp(swig_collectable_tag, equalp_swig);
    scm_set_smob_free(swig_collectable_tag, free_swig);
    /* For Guile >= 2.0.12. See libguile/smob.c:clear_smobnum */
    swig_finalized_tag = swig_collectable_tag & ~0xff00;
  }
  if (ensure_smob_tag(swig_module, &swig_destroyed_tag,
		      "destroyed-swig-pointer", "destroyed-swig-pointer-tag")) {
    scm_set_smob_print(swig_destroyed_tag, print_destroyed_swig);
    scm_set_smob_equalp(swig_destroyed_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_member_function_tag,
		      "swig-member-function-pointer", "swig-member-function-pointer-tag")) {
    scm_set_smob_print(swig_member_function_tag, print_member_function_swig);
    scm_set_smob_free(swig_member_function_tag, free_swig_member_function);
  }
  swig_make_func = scm_permanent_object(
  scm_variable_ref(scm_c_module_lookup(scm_c_resolve_module("oop goops"), "make")));
  swig_keyword = scm_permanent_object(scm_from_locale_keyword("init-smob"));
  swig_symbol = scm_permanent_object(scm_from_locale_symbol("swig-smob"));
#ifdef SWIG_INIT_RUNTIME_MODULE
  SWIG_INIT_RUNTIME_MODULE
#endif

  return swig_module;
}

SWIGINTERN swig_module_info *
SWIG_Guile_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  SCM module = SWIG_Guile_Init();
  SCM variable = scm_module_variable(module, scm_from_locale_symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME));
  if (scm_is_false(variable)) {
    return NULL;
  } else {
    return (swig_module_info *) scm_to_ulong(SCM_VARIABLE_REF(variable));
  }
}

SWIGINTERN void
SWIG_Guile_SetModule(swig_module_info *swig_module)
{
  SCM module = SWIG_Guile_Init();
  scm_module_define(module,
                    scm_from_locale_symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
                    scm_from_ulong((unsigned long) swig_module));
}

SWIGINTERN int
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname)
{
  int i;
  int num_args_passed = 0;
  for (i = 0; i<reqargs; i++) {
    if (!scm_is_pair(rest))
      scm_wrong_num_args(scm_from_utf8_string(procname ? procname : "unknown procedure"));
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (i = 0; i<optargs && scm_is_pair(rest); i++) {
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (; i<optargs; i++)
    *dest++ = SCM_UNDEFINED;
  if (!scm_is_null(rest))
      scm_wrong_num_args(scm_from_utf8_string(procname ? procname : "unknown procedure"));
  return num_args_passed;
}

#ifdef __cplusplus
}
#endif



#define GUILE_MAYBE_VALUES \
      if (gswig_list_p) gswig_result = scm_values(gswig_result);

#define GUILE_MAYBE_VECTOR \
      if (gswig_list_p) gswig_result = scm_vector(gswig_result);

#define SWIG_APPEND_VALUE(object)						\
    if (gswig_result == SCM_UNSPECIFIED)						\
        gswig_result = object;							\
    else {									\
      if (!gswig_list_p) {							\
	      gswig_list_p = 1;							\
	      gswig_result = scm_list_n(gswig_result, object, SCM_UNDEFINED);	\
      }									\
      else									\
            gswig_result = scm_append(scm_list_n(gswig_result, scm_list_n(object, SCM_UNDEFINED), SCM_UNDEFINED));		\
    }


static swig_guile_clientdata _swig_guile_clientdataint8_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatauint8_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataint16_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatauint16_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataint32_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatauint32_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataint64_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatauint64_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatasize_t_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatabool_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatafloat_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatadouble_t_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataIntVector = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataDoubleVector = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_token_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_token_data_carray = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_token_data = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_token_data_array = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_batch = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_model_kv_override = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_model_params = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_context_params = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_model_quantize_params = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_grammar_element = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_timings = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_chat_message = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_kv_cache_view_cell = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_kv_cache_view = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_beam_view = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_beams_state = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_seq_id_vector = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatallama_token_data_vector = { NULL, SCM_EOL };

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_bool swig_types[1]
#define SWIGTYPE_p_bool_array swig_types[2]
#define SWIGTYPE_p_char swig_types[3]
#define SWIGTYPE_p_difference_type swig_types[4]
#define SWIGTYPE_p_double swig_types[5]
#define SWIGTYPE_p_double_t_array swig_types[6]
#define SWIGTYPE_p_f_float_p_void__bool swig_types[7]
#define SWIGTYPE_p_f_float_p_void__bool_array swig_types[8]
#define SWIGTYPE_p_f_p_void_llama_beams_state__void swig_types[9]
#define SWIGTYPE_p_float swig_types[10]
#define SWIGTYPE_p_float_array swig_types[11]
#define SWIGTYPE_p_ggml_abort_callback swig_types[12]
#define SWIGTYPE_p_ggml_backend_sched_eval_callback swig_types[13]
#define SWIGTYPE_p_ggml_log_callback swig_types[14]
#define SWIGTYPE_p_ggml_tensor swig_types[15]
#define SWIGTYPE_p_int16_array swig_types[16]
#define SWIGTYPE_p_int16_t swig_types[17]
#define SWIGTYPE_p_int32_array swig_types[18]
#define SWIGTYPE_p_int32_t swig_types[19]
#define SWIGTYPE_p_int64_array swig_types[20]
#define SWIGTYPE_p_int64_t swig_types[21]
#define SWIGTYPE_p_int8_array swig_types[22]
#define SWIGTYPE_p_int8_t swig_types[23]
#define SWIGTYPE_p_llama_batch swig_types[24]
#define SWIGTYPE_p_llama_beam_view swig_types[25]
#define SWIGTYPE_p_llama_beams_state swig_types[26]
#define SWIGTYPE_p_llama_chat_message swig_types[27]
#define SWIGTYPE_p_llama_context swig_types[28]
#define SWIGTYPE_p_llama_context_params swig_types[29]
#define SWIGTYPE_p_llama_grammar swig_types[30]
#define SWIGTYPE_p_llama_grammar_element swig_types[31]
#define SWIGTYPE_p_llama_kv_cache_view swig_types[32]
#define SWIGTYPE_p_llama_kv_cache_view_cell swig_types[33]
#define SWIGTYPE_p_llama_model swig_types[34]
#define SWIGTYPE_p_llama_model_kv_override swig_types[35]
#define SWIGTYPE_p_llama_model_params swig_types[36]
#define SWIGTYPE_p_llama_model_quantize_params swig_types[37]
#define SWIGTYPE_p_llama_timings swig_types[38]
#define SWIGTYPE_p_llama_token_array swig_types[39]
#define SWIGTYPE_p_llama_token_data swig_types[40]
#define SWIGTYPE_p_llama_token_data_array swig_types[41]
#define SWIGTYPE_p_llama_token_data_carray swig_types[42]
#define SWIGTYPE_p_p_int32_array swig_types[43]
#define SWIGTYPE_p_p_int32_t swig_types[44]
#define SWIGTYPE_p_p_llama_grammar_element swig_types[45]
#define SWIGTYPE_p_size_t swig_types[46]
#define SWIGTYPE_p_size_t_array swig_types[47]
#define SWIGTYPE_p_size_type swig_types[48]
#define SWIGTYPE_p_std__out_of_range swig_types[49]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[50]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[51]
#define SWIGTYPE_p_std__vectorT_llama_seq_id_t swig_types[52]
#define SWIGTYPE_p_std__vectorT_llama_token_data_t swig_types[53]
#define SWIGTYPE_p_uint16_array swig_types[54]
#define SWIGTYPE_p_uint16_t swig_types[55]
#define SWIGTYPE_p_uint32_array swig_types[56]
#define SWIGTYPE_p_uint32_t swig_types[57]
#define SWIGTYPE_p_uint64_array swig_types[58]
#define SWIGTYPE_p_uint64_t swig_types[59]
#define SWIGTYPE_p_uint8_array swig_types[60]
#define SWIGTYPE_p_uint8_t swig_types[61]
#define SWIGTYPE_p_unsigned_long swig_types[62]
#define SWIGTYPE_p_value_type swig_types[63]
#define SWIGTYPE_p_void swig_types[64]
static swig_type_info *swig_types[66];
static swig_module_info swig_module = {swig_types, 65, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "llama.h"
#include <vector>
void llama_batch_add(
                 struct llama_batch & batch,
                        llama_token   id,
                          llama_pos   pos,
    const std::vector<llama_seq_id> & seq_ids,
                               bool   logits) {
    batch.token   [batch.n_tokens] = id;
    batch.pos     [batch.n_tokens] = pos;
    batch.n_seq_id[batch.n_tokens] = seq_ids.size();
    for (size_t i = 0; i < seq_ids.size(); ++i) {
        batch.seq_id[batch.n_tokens][i] = seq_ids[i];
    }
    batch.logits  [batch.n_tokens] = logits;

    batch.n_tokens++;
}

llama_token_data * llama_token_data_vector_data(std::vector<llama_token_data> &array)  {
    return array.data();
}


typedef int8_t int8_array;

SWIGINTERN int8_array *new_int8_array(size_t nelements){
  return new int8_t[nelements]();
}
SWIGINTERN void delete_int8_array(int8_array *self){
  delete [] self;
}
SWIGINTERN int8_t int8_array_getitem(int8_array *self,size_t index){
  return self[index];
}
SWIGINTERN void int8_array_setitem(int8_array *self,size_t index,int8_t value){
  self[index] = value;
}
SWIGINTERN int8_t *int8_array_cast(int8_array *self){
  return self;
}
SWIGINTERN int8_array *int8_array_frompointer(int8_t *t){
  return (int8_array *) t;
}

typedef uint8_t uint8_array;

SWIGINTERN uint8_array *new_uint8_array(size_t nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN void delete_uint8_array(uint8_array *self){
  delete [] self;
}
SWIGINTERN uint8_t uint8_array_getitem(uint8_array *self,size_t index){
  return self[index];
}
SWIGINTERN void uint8_array_setitem(uint8_array *self,size_t index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *uint8_array_cast(uint8_array *self){
  return self;
}
SWIGINTERN uint8_array *uint8_array_frompointer(uint8_t *t){
  return (uint8_array *) t;
}

typedef int16_t int16_array;

SWIGINTERN int16_array *new_int16_array(size_t nelements){
  return new int16_t[nelements]();
}
SWIGINTERN void delete_int16_array(int16_array *self){
  delete [] self;
}
SWIGINTERN int16_t int16_array_getitem(int16_array *self,size_t index){
  return self[index];
}
SWIGINTERN void int16_array_setitem(int16_array *self,size_t index,int16_t value){
  self[index] = value;
}
SWIGINTERN int16_t *int16_array_cast(int16_array *self){
  return self;
}
SWIGINTERN int16_array *int16_array_frompointer(int16_t *t){
  return (int16_array *) t;
}

typedef uint16_t uint16_array;

SWIGINTERN uint16_array *new_uint16_array(size_t nelements){
  return new uint16_t[nelements]();
}
SWIGINTERN void delete_uint16_array(uint16_array *self){
  delete [] self;
}
SWIGINTERN uint16_t uint16_array_getitem(uint16_array *self,size_t index){
  return self[index];
}
SWIGINTERN void uint16_array_setitem(uint16_array *self,size_t index,uint16_t value){
  self[index] = value;
}
SWIGINTERN uint16_t *uint16_array_cast(uint16_array *self){
  return self;
}
SWIGINTERN uint16_array *uint16_array_frompointer(uint16_t *t){
  return (uint16_array *) t;
}

typedef int32_t int32_array;

SWIGINTERN int32_array *new_int32_array(size_t nelements){
  return new int32_t[nelements]();
}
SWIGINTERN void delete_int32_array(int32_array *self){
  delete [] self;
}
SWIGINTERN int32_t int32_array_getitem(int32_array *self,size_t index){
  return self[index];
}
SWIGINTERN void int32_array_setitem(int32_array *self,size_t index,int32_t value){
  self[index] = value;
}
SWIGINTERN int32_t *int32_array_cast(int32_array *self){
  return self;
}
SWIGINTERN int32_array *int32_array_frompointer(int32_t *t){
  return (int32_array *) t;
}

typedef uint32_t uint32_array;

SWIGINTERN uint32_array *new_uint32_array(size_t nelements){
  return new uint32_t[nelements]();
}
SWIGINTERN void delete_uint32_array(uint32_array *self){
  delete [] self;
}
SWIGINTERN uint32_t uint32_array_getitem(uint32_array *self,size_t index){
  return self[index];
}
SWIGINTERN void uint32_array_setitem(uint32_array *self,size_t index,uint32_t value){
  self[index] = value;
}
SWIGINTERN uint32_t *uint32_array_cast(uint32_array *self){
  return self;
}
SWIGINTERN uint32_array *uint32_array_frompointer(uint32_t *t){
  return (uint32_array *) t;
}

typedef int64_t int64_array;

SWIGINTERN int64_array *new_int64_array(size_t nelements){
  return new int64_t[nelements]();
}
SWIGINTERN void delete_int64_array(int64_array *self){
  delete [] self;
}
SWIGINTERN int64_t int64_array_getitem(int64_array *self,size_t index){
  return self[index];
}
SWIGINTERN void int64_array_setitem(int64_array *self,size_t index,int64_t value){
  self[index] = value;
}
SWIGINTERN int64_t *int64_array_cast(int64_array *self){
  return self;
}
SWIGINTERN int64_array *int64_array_frompointer(int64_t *t){
  return (int64_array *) t;
}

typedef uint64_t uint64_array;

SWIGINTERN uint64_array *new_uint64_array(size_t nelements){
  return new uint64_t[nelements]();
}
SWIGINTERN void delete_uint64_array(uint64_array *self){
  delete [] self;
}
SWIGINTERN uint64_t uint64_array_getitem(uint64_array *self,size_t index){
  return self[index];
}
SWIGINTERN void uint64_array_setitem(uint64_array *self,size_t index,uint64_t value){
  self[index] = value;
}
SWIGINTERN uint64_t *uint64_array_cast(uint64_array *self){
  return self;
}
SWIGINTERN uint64_array *uint64_array_frompointer(uint64_t *t){
  return (uint64_array *) t;
}

typedef size_t size_t_array;

SWIGINTERN size_t_array *new_size_t_array(size_t nelements){
  return new size_t[nelements]();
}
SWIGINTERN void delete_size_t_array(size_t_array *self){
  delete [] self;
}
SWIGINTERN size_t size_t_array_getitem(size_t_array *self,size_t index){
  return self[index];
}
SWIGINTERN void size_t_array_setitem(size_t_array *self,size_t index,size_t value){
  self[index] = value;
}
SWIGINTERN size_t *size_t_array_cast(size_t_array *self){
  return self;
}
SWIGINTERN size_t_array *size_t_array_frompointer(size_t *t){
  return (size_t_array *) t;
}

typedef bool bool_array;

SWIGINTERN bool_array *new_bool_array(size_t nelements){
  return new bool[nelements]();
}
SWIGINTERN void delete_bool_array(bool_array *self){
  delete [] self;
}
SWIGINTERN bool bool_array_getitem(bool_array *self,size_t index){
  return self[index];
}
SWIGINTERN void bool_array_setitem(bool_array *self,size_t index,bool value){
  self[index] = value;
}
SWIGINTERN bool *bool_array_cast(bool_array *self){
  return self;
}
SWIGINTERN bool_array *bool_array_frompointer(bool *t){
  return (bool_array *) t;
}

typedef float float_array;

SWIGINTERN float_array *new_float_array(size_t nelements){
  return new float[nelements]();
}
SWIGINTERN void delete_float_array(float_array *self){
  delete [] self;
}
SWIGINTERN float float_array_getitem(float_array *self,size_t index){
  return self[index];
}
SWIGINTERN void float_array_setitem(float_array *self,size_t index,float value){
  self[index] = value;
}
SWIGINTERN float *float_array_cast(float_array *self){
  return self;
}
SWIGINTERN float_array *float_array_frompointer(float *t){
  return (float_array *) t;
}

typedef double double_t_array;

SWIGINTERN double_t_array *new_double_t_array(size_t nelements){
  return new double[nelements]();
}
SWIGINTERN void delete_double_t_array(double_t_array *self){
  delete [] self;
}
SWIGINTERN double double_t_array_getitem(double_t_array *self,size_t index){
  return self[index];
}
SWIGINTERN void double_t_array_setitem(double_t_array *self,size_t index,double value){
  self[index] = value;
}
SWIGINTERN double *double_t_array_cast(double_t_array *self){
  return self;
}
SWIGINTERN double_t_array *double_t_array_frompointer(double *t){
  return (double_t_array *) t;
}

#include <typeinfo>
#include <stdexcept>


#include <string>

SWIGINTERNINLINE
std::string SWIG_scm2string(SCM x) {
    char* temp;
    temp = SWIG_scm2str(x);
    std::string s(temp);
    SWIG_free(temp);
    return s;
}


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN int std_vector_Sl_int_Sg__pop(std::vector< int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN int std_vector_Sl_int_Sg__ref(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,int x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                double x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN double std_vector_Sl_double_Sg__ref(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,double x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

typedef llama_token llama_token_array;

SWIGINTERN llama_token_array *new_llama_token_array(size_t nelements){
  return new llama_token[nelements]();
}
SWIGINTERN void delete_llama_token_array(llama_token_array *self){
  delete [] self;
}
SWIGINTERN llama_token llama_token_array_getitem(llama_token_array *self,size_t index){
  return self[index];
}
SWIGINTERN void llama_token_array_setitem(llama_token_array *self,size_t index,llama_token value){
  self[index] = value;
}
SWIGINTERN llama_token *llama_token_array_cast(llama_token_array *self){
  return self;
}
SWIGINTERN llama_token_array *llama_token_array_frompointer(llama_token *t){
  return (llama_token_array *) t;
}

typedef llama_token_data llama_token_data_carray;

SWIGINTERN llama_token_data_carray *new_llama_token_data_carray(size_t nelements){
  return new llama_token_data[nelements]();
}
SWIGINTERN void delete_llama_token_data_carray(llama_token_data_carray *self){
  delete [] self;
}
SWIGINTERN llama_token_data llama_token_data_carray_getitem(llama_token_data_carray *self,size_t index){
  return self[index];
}
SWIGINTERN void llama_token_data_carray_setitem(llama_token_data_carray *self,size_t index,llama_token_data value){
  self[index] = value;
}
SWIGINTERN llama_token_data *llama_token_data_carray_cast(llama_token_data_carray *self){
  return self;
}
SWIGINTERN llama_token_data_carray *llama_token_data_carray_frompointer(llama_token_data *t){
  return (llama_token_data_carray *) t;
}
static int gswig_const_LLAMA_VOCAB_TYPE_NONE = (int)(LLAMA_VOCAB_TYPE_NONE);
static int gswig_const_LLAMA_VOCAB_TYPE_SPM = (int)(LLAMA_VOCAB_TYPE_SPM);
static int gswig_const_LLAMA_VOCAB_TYPE_BPE = (int)(LLAMA_VOCAB_TYPE_BPE);
static int gswig_const_LLAMA_VOCAB_TYPE_WPM = (int)(LLAMA_VOCAB_TYPE_WPM);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_DEFAULT = (int)(LLAMA_VOCAB_PRE_TYPE_DEFAULT);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_LLAMA3 = (int)(LLAMA_VOCAB_PRE_TYPE_LLAMA3);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM = (int)(LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER = (int)(LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_FALCON = (int)(LLAMA_VOCAB_PRE_TYPE_FALCON);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_MPT = (int)(LLAMA_VOCAB_PRE_TYPE_MPT);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_STARCODER = (int)(LLAMA_VOCAB_PRE_TYPE_STARCODER);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_GPT2 = (int)(LLAMA_VOCAB_PRE_TYPE_GPT2);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_REFACT = (int)(LLAMA_VOCAB_PRE_TYPE_REFACT);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_COMMAND_R = (int)(LLAMA_VOCAB_PRE_TYPE_COMMAND_R);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_QWEN2 = (int)(LLAMA_VOCAB_PRE_TYPE_QWEN2);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_OLMO = (int)(LLAMA_VOCAB_PRE_TYPE_OLMO);
static int gswig_const_LLAMA_VOCAB_PRE_TYPE_DBRX = (int)(LLAMA_VOCAB_PRE_TYPE_DBRX);
static int gswig_const_LLAMA_ROPE_TYPE_NONE = (int)(LLAMA_ROPE_TYPE_NONE);
static int gswig_const_LLAMA_ROPE_TYPE_NORM = (int)(LLAMA_ROPE_TYPE_NORM);
static int gswig_const_LLAMA_ROPE_TYPE_NEOX = (int)(LLAMA_ROPE_TYPE_NEOX);
static int gswig_const_LLAMA_ROPE_TYPE_GLM = (int)(LLAMA_ROPE_TYPE_GLM);
static int gswig_const_LLAMA_TOKEN_TYPE_UNDEFINED = (int)(LLAMA_TOKEN_TYPE_UNDEFINED);
static int gswig_const_LLAMA_TOKEN_TYPE_NORMAL = (int)(LLAMA_TOKEN_TYPE_NORMAL);
static int gswig_const_LLAMA_TOKEN_TYPE_UNKNOWN = (int)(LLAMA_TOKEN_TYPE_UNKNOWN);
static int gswig_const_LLAMA_TOKEN_TYPE_CONTROL = (int)(LLAMA_TOKEN_TYPE_CONTROL);
static int gswig_const_LLAMA_TOKEN_TYPE_USER_DEFINED = (int)(LLAMA_TOKEN_TYPE_USER_DEFINED);
static int gswig_const_LLAMA_TOKEN_TYPE_UNUSED = (int)(LLAMA_TOKEN_TYPE_UNUSED);
static int gswig_const_LLAMA_TOKEN_TYPE_BYTE = (int)(LLAMA_TOKEN_TYPE_BYTE);
static int gswig_const_LLAMA_FTYPE_ALL_F32 = (int)(LLAMA_FTYPE_ALL_F32);
static int gswig_const_LLAMA_FTYPE_MOSTLY_F16 = (int)(LLAMA_FTYPE_MOSTLY_F16);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q4_0 = (int)(LLAMA_FTYPE_MOSTLY_Q4_0);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q4_1 = (int)(LLAMA_FTYPE_MOSTLY_Q4_1);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16 = (int)(LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q8_0 = (int)(LLAMA_FTYPE_MOSTLY_Q8_0);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q5_0 = (int)(LLAMA_FTYPE_MOSTLY_Q5_0);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q5_1 = (int)(LLAMA_FTYPE_MOSTLY_Q5_1);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q2_K = (int)(LLAMA_FTYPE_MOSTLY_Q2_K);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q3_K_S = (int)(LLAMA_FTYPE_MOSTLY_Q3_K_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q3_K_M = (int)(LLAMA_FTYPE_MOSTLY_Q3_K_M);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q3_K_L = (int)(LLAMA_FTYPE_MOSTLY_Q3_K_L);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q4_K_S = (int)(LLAMA_FTYPE_MOSTLY_Q4_K_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q4_K_M = (int)(LLAMA_FTYPE_MOSTLY_Q4_K_M);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q5_K_S = (int)(LLAMA_FTYPE_MOSTLY_Q5_K_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q5_K_M = (int)(LLAMA_FTYPE_MOSTLY_Q5_K_M);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q6_K = (int)(LLAMA_FTYPE_MOSTLY_Q6_K);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_XXS = (int)(LLAMA_FTYPE_MOSTLY_IQ2_XXS);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_XS = (int)(LLAMA_FTYPE_MOSTLY_IQ2_XS);
static int gswig_const_LLAMA_FTYPE_MOSTLY_Q2_K_S = (int)(LLAMA_FTYPE_MOSTLY_Q2_K_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_XS = (int)(LLAMA_FTYPE_MOSTLY_IQ3_XS);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_XXS = (int)(LLAMA_FTYPE_MOSTLY_IQ3_XXS);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ1_S = (int)(LLAMA_FTYPE_MOSTLY_IQ1_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ4_NL = (int)(LLAMA_FTYPE_MOSTLY_IQ4_NL);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_S = (int)(LLAMA_FTYPE_MOSTLY_IQ3_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_M = (int)(LLAMA_FTYPE_MOSTLY_IQ3_M);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_S = (int)(LLAMA_FTYPE_MOSTLY_IQ2_S);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_M = (int)(LLAMA_FTYPE_MOSTLY_IQ2_M);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ4_XS = (int)(LLAMA_FTYPE_MOSTLY_IQ4_XS);
static int gswig_const_LLAMA_FTYPE_MOSTLY_IQ1_M = (int)(LLAMA_FTYPE_MOSTLY_IQ1_M);
static int gswig_const_LLAMA_FTYPE_MOSTLY_BF16 = (int)(LLAMA_FTYPE_MOSTLY_BF16);
static int gswig_const_LLAMA_FTYPE_GUESSED = (int)(LLAMA_FTYPE_GUESSED);
static int gswig_const_LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED = (int)(LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED);
static int gswig_const_LLAMA_ROPE_SCALING_TYPE_NONE = (int)(LLAMA_ROPE_SCALING_TYPE_NONE);
static int gswig_const_LLAMA_ROPE_SCALING_TYPE_LINEAR = (int)(LLAMA_ROPE_SCALING_TYPE_LINEAR);
static int gswig_const_LLAMA_ROPE_SCALING_TYPE_YARN = (int)(LLAMA_ROPE_SCALING_TYPE_YARN);
static int gswig_const_LLAMA_ROPE_SCALING_TYPE_MAX_VALUE = (int)(LLAMA_ROPE_SCALING_TYPE_MAX_VALUE);
static int gswig_const_LLAMA_POOLING_TYPE_UNSPECIFIED = (int)(LLAMA_POOLING_TYPE_UNSPECIFIED);
static int gswig_const_LLAMA_POOLING_TYPE_NONE = (int)(LLAMA_POOLING_TYPE_NONE);
static int gswig_const_LLAMA_POOLING_TYPE_MEAN = (int)(LLAMA_POOLING_TYPE_MEAN);
static int gswig_const_LLAMA_POOLING_TYPE_CLS = (int)(LLAMA_POOLING_TYPE_CLS);
static int gswig_const_LLAMA_SPLIT_MODE_NONE = (int)(LLAMA_SPLIT_MODE_NONE);
static int gswig_const_LLAMA_SPLIT_MODE_LAYER = (int)(LLAMA_SPLIT_MODE_LAYER);
static int gswig_const_LLAMA_SPLIT_MODE_ROW = (int)(LLAMA_SPLIT_MODE_ROW);
static int gswig_const_LLAMA_KV_OVERRIDE_TYPE_INT = (int)(LLAMA_KV_OVERRIDE_TYPE_INT);
static int gswig_const_LLAMA_KV_OVERRIDE_TYPE_FLOAT = (int)(LLAMA_KV_OVERRIDE_TYPE_FLOAT);
static int gswig_const_LLAMA_KV_OVERRIDE_TYPE_BOOL = (int)(LLAMA_KV_OVERRIDE_TYPE_BOOL);
static int gswig_const_LLAMA_KV_OVERRIDE_TYPE_STR = (int)(LLAMA_KV_OVERRIDE_TYPE_STR);

#include <string.h>

static int gswig_const_LLAMA_GRETYPE_END = (int)(LLAMA_GRETYPE_END);
static int gswig_const_LLAMA_GRETYPE_ALT = (int)(LLAMA_GRETYPE_ALT);
static int gswig_const_LLAMA_GRETYPE_RULE_REF = (int)(LLAMA_GRETYPE_RULE_REF);
static int gswig_const_LLAMA_GRETYPE_CHAR = (int)(LLAMA_GRETYPE_CHAR);
static int gswig_const_LLAMA_GRETYPE_CHAR_NOT = (int)(LLAMA_GRETYPE_CHAR_NOT);
static int gswig_const_LLAMA_GRETYPE_CHAR_RNG_UPPER = (int)(LLAMA_GRETYPE_CHAR_RNG_UPPER);
static int gswig_const_LLAMA_GRETYPE_CHAR_ALT = (int)(LLAMA_GRETYPE_CHAR_ALT);
SWIGINTERN int32_t std_vector_Sl_llama_seq_id_Sg__pop(std::vector< llama_seq_id > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int32_t x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN int32_t const &std_vector_Sl_llama_seq_id_Sg__ref(std::vector< llama_seq_id > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_llama_seq_id_Sg__set(std::vector< llama_seq_id > *self,int i,int32_t const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN llama_token_data std_vector_Sl_llama_token_data_Sg__pop(std::vector< llama_token_data > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                llama_token_data x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN llama_token_data const &std_vector_Sl_llama_token_data_Sg__ref(std::vector< llama_token_data > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_llama_token_data_Sg__set(std::vector< llama_token_data > *self,int i,llama_token_data const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
static SCM
_wrap_new_int8_array (SCM s_0)
{
#define FUNC_NAME "new-int8-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int8_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (int8_array *)new_int8_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int8_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_int8_array (SCM s_0)
{
#define FUNC_NAME "delete-int8-array"
  int8_array *arg1 = (int8_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int8_array, 1, 0);
  }
  delete_int8_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int8_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "int8-array-getitem"
  int8_array *arg1 = (int8_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int8_t result;
  
  {
    arg1 = (int8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int8_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = int8_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int8(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int8_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "int8-array-setitem"
  int8_array *arg1 = (int8_array *) 0 ;
  size_t arg2 ;
  int8_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int8_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_int8(s_2);
  }
  int8_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int8_array_cast (SCM s_0)
{
#define FUNC_NAME "int8-array-cast"
  int8_array *arg1 = (int8_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int8_t *result = 0 ;
  
  {
    arg1 = (int8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int8_array, 1, 0);
  }
  result = (int8_t *)int8_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int8_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int8_array_frompointer (SCM s_0)
{
#define FUNC_NAME "int8-array-frompointer"
  int8_t *arg1 = (int8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int8_array *result = 0 ;
  
  {
    arg1 = (int8_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int8_t, 1, 0);
  }
  result = (int8_array *)int8_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int8_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_uint8_array (SCM s_0)
{
#define FUNC_NAME "new-uint8-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint8_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (uint8_array *)new_uint8_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint8_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_uint8_array (SCM s_0)
{
#define FUNC_NAME "delete-uint8-array"
  uint8_array *arg1 = (uint8_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint8_array, 1, 0);
  }
  delete_uint8_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint8_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "uint8-array-getitem"
  uint8_array *arg1 = (uint8_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint8_t result;
  
  {
    arg1 = (uint8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint8_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = uint8_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_uint8(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint8_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "uint8-array-setitem"
  uint8_array *arg1 = (uint8_array *) 0 ;
  size_t arg2 ;
  uint8_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint8_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_uint8(s_2);
  }
  uint8_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint8_array_cast (SCM s_0)
{
#define FUNC_NAME "uint8-array-cast"
  uint8_array *arg1 = (uint8_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint8_t *result = 0 ;
  
  {
    arg1 = (uint8_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint8_array, 1, 0);
  }
  result = (uint8_t *)uint8_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint8_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint8_array_frompointer (SCM s_0)
{
#define FUNC_NAME "uint8-array-frompointer"
  uint8_t *arg1 = (uint8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint8_array *result = 0 ;
  
  {
    arg1 = (uint8_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint8_t, 1, 0);
  }
  result = (uint8_array *)uint8_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint8_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_int16_array (SCM s_0)
{
#define FUNC_NAME "new-int16-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int16_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (int16_array *)new_int16_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int16_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_int16_array (SCM s_0)
{
#define FUNC_NAME "delete-int16-array"
  int16_array *arg1 = (int16_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int16_array, 1, 0);
  }
  delete_int16_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int16_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "int16-array-getitem"
  int16_array *arg1 = (int16_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int16_t result;
  
  {
    arg1 = (int16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int16_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = int16_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int16(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int16_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "int16-array-setitem"
  int16_array *arg1 = (int16_array *) 0 ;
  size_t arg2 ;
  int16_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int16_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_int16(s_2);
  }
  int16_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int16_array_cast (SCM s_0)
{
#define FUNC_NAME "int16-array-cast"
  int16_array *arg1 = (int16_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int16_t *result = 0 ;
  
  {
    arg1 = (int16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int16_array, 1, 0);
  }
  result = (int16_t *)int16_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int16_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int16_array_frompointer (SCM s_0)
{
#define FUNC_NAME "int16-array-frompointer"
  int16_t *arg1 = (int16_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int16_array *result = 0 ;
  
  {
    arg1 = (int16_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int16_t, 1, 0);
  }
  result = (int16_array *)int16_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int16_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_uint16_array (SCM s_0)
{
#define FUNC_NAME "new-uint16-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint16_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (uint16_array *)new_uint16_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint16_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_uint16_array (SCM s_0)
{
#define FUNC_NAME "delete-uint16-array"
  uint16_array *arg1 = (uint16_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint16_array, 1, 0);
  }
  delete_uint16_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint16_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "uint16-array-getitem"
  uint16_array *arg1 = (uint16_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint16_t result;
  
  {
    arg1 = (uint16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint16_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = uint16_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_uint16(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint16_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "uint16-array-setitem"
  uint16_array *arg1 = (uint16_array *) 0 ;
  size_t arg2 ;
  uint16_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint16_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_uint16(s_2);
  }
  uint16_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint16_array_cast (SCM s_0)
{
#define FUNC_NAME "uint16-array-cast"
  uint16_array *arg1 = (uint16_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint16_t *result = 0 ;
  
  {
    arg1 = (uint16_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint16_array, 1, 0);
  }
  result = (uint16_t *)uint16_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint16_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint16_array_frompointer (SCM s_0)
{
#define FUNC_NAME "uint16-array-frompointer"
  uint16_t *arg1 = (uint16_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint16_array *result = 0 ;
  
  {
    arg1 = (uint16_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint16_t, 1, 0);
  }
  result = (uint16_array *)uint16_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint16_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_int32_array (SCM s_0)
{
#define FUNC_NAME "new-int32-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (int32_array *)new_int32_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_int32_array (SCM s_0)
{
#define FUNC_NAME "delete-int32-array"
  int32_array *arg1 = (int32_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_array, 1, 0);
  }
  delete_int32_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int32_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "int32-array-getitem"
  int32_array *arg1 = (int32_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (int32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = int32_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int32_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "int32-array-setitem"
  int32_array *arg1 = (int32_array *) 0 ;
  size_t arg2 ;
  int32_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  int32_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int32_array_cast (SCM s_0)
{
#define FUNC_NAME "int32-array-cast"
  int32_array *arg1 = (int32_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t *result = 0 ;
  
  {
    arg1 = (int32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_array, 1, 0);
  }
  result = (int32_t *)int32_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int32_array_frompointer (SCM s_0)
{
#define FUNC_NAME "int32-array-frompointer"
  int32_t *arg1 = (int32_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_array *result = 0 ;
  
  {
    arg1 = (int32_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_t, 1, 0);
  }
  result = (int32_array *)int32_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_uint32_array (SCM s_0)
{
#define FUNC_NAME "new-uint32-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (uint32_array *)new_uint32_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint32_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_uint32_array (SCM s_0)
{
#define FUNC_NAME "delete-uint32-array"
  uint32_array *arg1 = (uint32_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint32_array, 1, 0);
  }
  delete_uint32_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint32_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "uint32-array-getitem"
  uint32_array *arg1 = (uint32_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (uint32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint32_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = uint32_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint32_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "uint32-array-setitem"
  uint32_array *arg1 = (uint32_array *) 0 ;
  size_t arg2 ;
  uint32_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint32_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_uint32(s_2);
  }
  uint32_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint32_array_cast (SCM s_0)
{
#define FUNC_NAME "uint32-array-cast"
  uint32_array *arg1 = (uint32_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t *result = 0 ;
  
  {
    arg1 = (uint32_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint32_array, 1, 0);
  }
  result = (uint32_t *)uint32_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint32_array_frompointer (SCM s_0)
{
#define FUNC_NAME "uint32-array-frompointer"
  uint32_t *arg1 = (uint32_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_array *result = 0 ;
  
  {
    arg1 = (uint32_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint32_t, 1, 0);
  }
  result = (uint32_array *)uint32_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint32_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_int64_array (SCM s_0)
{
#define FUNC_NAME "new-int64-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int64_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (int64_array *)new_int64_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int64_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_int64_array (SCM s_0)
{
#define FUNC_NAME "delete-int64-array"
  int64_array *arg1 = (int64_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int64_array, 1, 0);
  }
  delete_int64_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int64_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "int64-array-getitem"
  int64_array *arg1 = (int64_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int64_t result;
  
  {
    arg1 = (int64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int64_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = int64_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int64(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int64_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "int64-array-setitem"
  int64_array *arg1 = (int64_array *) 0 ;
  size_t arg2 ;
  int64_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (int64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int64_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_int64(s_2);
  }
  int64_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int64_array_cast (SCM s_0)
{
#define FUNC_NAME "int64-array-cast"
  int64_array *arg1 = (int64_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int64_t *result = 0 ;
  
  {
    arg1 = (int64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int64_array, 1, 0);
  }
  result = (int64_t *)int64_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int64_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int64_array_frompointer (SCM s_0)
{
#define FUNC_NAME "int64-array-frompointer"
  int64_t *arg1 = (int64_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int64_array *result = 0 ;
  
  {
    arg1 = (int64_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int64_t, 1, 0);
  }
  result = (int64_array *)int64_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int64_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_uint64_array (SCM s_0)
{
#define FUNC_NAME "new-uint64-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint64_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (uint64_array *)new_uint64_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint64_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_uint64_array (SCM s_0)
{
#define FUNC_NAME "delete-uint64-array"
  uint64_array *arg1 = (uint64_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint64_array, 1, 0);
  }
  delete_uint64_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint64_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "uint64-array-getitem"
  uint64_array *arg1 = (uint64_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint64_t result;
  
  {
    arg1 = (uint64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint64_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = uint64_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_uint64(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint64_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "uint64-array-setitem"
  uint64_array *arg1 = (uint64_array *) 0 ;
  size_t arg2 ;
  uint64_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (uint64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint64_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_uint64(s_2);
  }
  uint64_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint64_array_cast (SCM s_0)
{
#define FUNC_NAME "uint64-array-cast"
  uint64_array *arg1 = (uint64_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint64_t *result = 0 ;
  
  {
    arg1 = (uint64_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint64_array, 1, 0);
  }
  result = (uint64_t *)uint64_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint64_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_uint64_array_frompointer (SCM s_0)
{
#define FUNC_NAME "uint64-array-frompointer"
  uint64_t *arg1 = (uint64_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint64_array *result = 0 ;
  
  {
    arg1 = (uint64_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_uint64_t, 1, 0);
  }
  result = (uint64_array *)uint64_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_uint64_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_size_t_array (SCM s_0)
{
#define FUNC_NAME "new-size-t-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (size_t_array *)new_size_t_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_size_t_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_size_t_array (SCM s_0)
{
#define FUNC_NAME "delete-size-t-array"
  size_t_array *arg1 = (size_t_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (size_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_size_t_array, 1, 0);
  }
  delete_size_t_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_size_t_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "size-t-array-getitem"
  size_t_array *arg1 = (size_t_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (size_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_size_t_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = size_t_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_size_t_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "size-t-array-setitem"
  size_t_array *arg1 = (size_t_array *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (size_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_size_t_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_size_t(s_2);
  }
  size_t_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_size_t_array_cast (SCM s_0)
{
#define FUNC_NAME "size-t-array-cast"
  size_t_array *arg1 = (size_t_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t *result = 0 ;
  
  {
    arg1 = (size_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_size_t_array, 1, 0);
  }
  result = (size_t *)size_t_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_size_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_size_t_array_frompointer (SCM s_0)
{
#define FUNC_NAME "size-t-array-frompointer"
  size_t *arg1 = (size_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t_array *result = 0 ;
  
  {
    arg1 = (size_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_size_t, 1, 0);
  }
  result = (size_t_array *)size_t_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_size_t_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_bool_array (SCM s_0)
{
#define FUNC_NAME "new-bool-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (bool_array *)new_bool_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_bool_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_bool_array (SCM s_0)
{
#define FUNC_NAME "delete-bool-array"
  bool_array *arg1 = (bool_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (bool_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_bool_array, 1, 0);
  }
  delete_bool_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_bool_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "bool-array-getitem"
  bool_array *arg1 = (bool_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (bool_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_bool_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = (bool)bool_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_bool_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "bool-array-setitem"
  bool_array *arg1 = (bool_array *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (bool_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_bool_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_bool(s_2);
  }
  bool_array_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_bool_array_cast (SCM s_0)
{
#define FUNC_NAME "bool-array-cast"
  bool_array *arg1 = (bool_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool *result = 0 ;
  
  {
    arg1 = (bool_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_bool_array, 1, 0);
  }
  result = (bool *)bool_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_bool, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_bool_array_frompointer (SCM s_0)
{
#define FUNC_NAME "bool-array-frompointer"
  bool *arg1 = (bool *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool_array *result = 0 ;
  
  {
    arg1 = (bool *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_bool, 1, 0);
  }
  result = (bool_array *)bool_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_bool_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_float_array (SCM s_0)
{
#define FUNC_NAME "new-float-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (float_array *)new_float_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_float_array (SCM s_0)
{
#define FUNC_NAME "delete-float-array"
  float_array *arg1 = (float_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (float_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_float_array, 1, 0);
  }
  delete_float_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_float_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "float-array-getitem"
  float_array *arg1 = (float_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (float_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_float_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = (float)float_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_float_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "float-array-setitem"
  float_array *arg1 = (float_array *) 0 ;
  size_t arg2 ;
  float arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (float_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_float_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  float_array_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_float_array_cast (SCM s_0)
{
#define FUNC_NAME "float-array-cast"
  float_array *arg1 = (float_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (float_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_float_array, 1, 0);
  }
  result = (float *)float_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_float_array_frompointer (SCM s_0)
{
#define FUNC_NAME "float-array-frompointer"
  float *arg1 = (float *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float_array *result = 0 ;
  
  {
    arg1 = (float *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_float, 1, 0);
  }
  result = (float_array *)float_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_double_t_array (SCM s_0)
{
#define FUNC_NAME "new-double-t-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double_t_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (double_t_array *)new_double_t_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_double_t_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_double_t_array (SCM s_0)
{
#define FUNC_NAME "delete-double-t-array"
  double_t_array *arg1 = (double_t_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (double_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_double_t_array, 1, 0);
  }
  delete_double_t_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_double_t_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "double-t-array-getitem"
  double_t_array *arg1 = (double_t_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (double_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_double_t_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = (double)double_t_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_double_t_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "double-t-array-setitem"
  double_t_array *arg1 = (double_t_array *) 0 ;
  size_t arg2 ;
  double arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (double_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_double_t_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_double(s_2);
  }
  double_t_array_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_double_t_array_cast (SCM s_0)
{
#define FUNC_NAME "double-t-array-cast"
  double_t_array *arg1 = (double_t_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double *result = 0 ;
  
  {
    arg1 = (double_t_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_double_t_array, 1, 0);
  }
  result = (double *)double_t_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_double, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_double_t_array_frompointer (SCM s_0)
{
#define FUNC_NAME "double-t-array-frompointer"
  double *arg1 = (double *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double_t_array *result = 0 ;
  
  {
    arg1 = (double *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_double, 1, 0);
  }
  result = (double_t_array *)double_t_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_double_t_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_IntVector__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "new-IntVector"
  unsigned int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< int > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  result = (std::vector< int > *)new std::vector< int >(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_int_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_IntVector__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "new-IntVector"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_int_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_IntVector__SWIG_2 (int argc, SCM *argv)
{
#define FUNC_NAME "new-IntVector"
  unsigned int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< int > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  {
    temp2 = scm_to_int(argv[1]);
    arg2 = (int *) &temp2;
  }
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_int_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_IntVector__SWIG_3 (int argc, SCM *argv)
{
#define FUNC_NAME "new-IntVector"
  std::vector< int > *arg1 = 0 ;
  std::vector< int > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< int > *result = 0 ;
  
  {
    if (scm_is_vector(argv[0])) {
      unsigned long size = scm_c_vector_length(argv[0]);
      temp1 = std::vector< int >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(argv[0],scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (int)(scm_to_long(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, argv[0]);
      }
    } else if (scm_is_null(argv[0])) {
      temp1 = std::vector< int >();
      arg1 = &temp1;
    } else if (scm_is_pair(argv[0])) {
      SCM v = scm_vector(argv[0]);
      unsigned long size = scm_c_vector_length(v);
      temp1 = std::vector< int >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(v,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (int)(scm_to_long(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, argv[0]);
      }
    } else {
      arg1 = (std::vector< int > *) SWIG_MustGetPtr(argv[0],SWIGTYPE_p_std__vectorT_int_t,1, 0);
    }
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_int_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_IntVector(SCM rest)
{
#define FUNC_NAME "new-IntVector"
  SCM argv[2];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 2, "new-IntVector");
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_1(argc,argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_0(argc,argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      /* native sequence? */
      if (scm_is_vector(argv[0])) {
        unsigned int size = scm_c_vector_length(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          SCM o = scm_vector_ref(argv[0],scm_from_ulong(0));
          _v = scm_is_number(o) ? 1 : 0;
        }
      } else if (scm_is_null(argv[0])) {
        /* again, an empty sequence can be of any type */
        _v = 1;
      } else if (scm_is_pair(argv[0])) {
        /* check the first element only */
        SCM head = SCM_CAR(argv[0]);
        _v = scm_is_number(head) ? 1 : 0;
      } else {
        /* wrapped vector? */
        std::vector< int >* v;
        _v = (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorT_int_t, 0) != -1) ? 1 : 0;
      }
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_3(argc,argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      {
        _v = scm_is_true(scm_integer_p(argv[1])) && scm_is_true(scm_exact_p(argv[1]))? 1 : 0;
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_2(argc,argv);
      }
    }
  }
  
  scm_misc_error("new-IntVector", "No matching method for generic function `new_IntVector'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_length (SCM s_0)
{
#define FUNC_NAME "IntVector-length"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  unsigned int result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< int >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (int)(scm_to_long(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< int >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      SCM v = scm_vector(s_0);
      unsigned long size = scm_c_vector_length(v);
      temp1 = std::vector< int >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(v,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (int)(scm_to_long(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else {
      arg1 = (std::vector< int > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_int_t,1, 0);
    }
  }
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  {
    gswig_result = scm_from_ulong(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_emptyq___ (SCM s_0)
{
#define FUNC_NAME "IntVector-empty?"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< int >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (int)(scm_to_long(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< int >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      SCM v = scm_vector(s_0);
      unsigned long size = scm_c_vector_length(v);
      temp1 = std::vector< int >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(v,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (int)(scm_to_long(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else {
      arg1 = (std::vector< int > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_int_t,1, 0);
    }
  }
  result = (bool)((std::vector< int > const *)arg1)->empty();
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_clearN___ (SCM s_0)
{
#define FUNC_NAME "IntVector-clear!"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_int_t, 1, 0);
  }
  (arg1)->clear();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_pushN___ (SCM s_0, SCM s_1)
{
#define FUNC_NAME "IntVector-push!"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_int_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  (arg1)->push_back(arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_popN___ (SCM s_0)
{
#define FUNC_NAME "IntVector-pop!"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int result;
  
  {
    arg1 = (std::vector< int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_int_t, 1, 0);
  }
  try {
    result = (int)std_vector_Sl_int_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = scm_from_int(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_ref (SCM s_0, SCM s_1)
{
#define FUNC_NAME "IntVector-ref"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int result;
  
  {
    arg1 = (std::vector< int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_int_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  try {
    result = (int)std_vector_Sl_int_Sg__ref(arg1,arg2);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = scm_from_int(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntVector_setN___ (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "IntVector-set!"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_int_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  {
    arg3 = scm_to_int(s_2);
  }
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_IntVector (SCM s_0)
{
#define FUNC_NAME "delete-IntVector"
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_int_t, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_DoubleVector__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "new-DoubleVector"
  unsigned int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< double > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  result = (std::vector< double > *)new std::vector< double >(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_double_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_DoubleVector__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "new-DoubleVector"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_double_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_DoubleVector__SWIG_2 (int argc, SCM *argv)
{
#define FUNC_NAME "new-DoubleVector"
  unsigned int arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< double > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  {
    temp2 = scm_to_double(argv[1]);
    arg2 = (double *) &temp2;
  }
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_double_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_DoubleVector__SWIG_3 (int argc, SCM *argv)
{
#define FUNC_NAME "new-DoubleVector"
  std::vector< double > *arg1 = 0 ;
  std::vector< double > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< double > *result = 0 ;
  
  {
    if (scm_is_vector(argv[0])) {
      unsigned long size = scm_c_vector_length(argv[0]);
      temp1 = std::vector< double >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(argv[0],scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (double)(scm_to_double(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, argv[0]);
      }
    } else if (scm_is_null(argv[0])) {
      temp1 = std::vector< double >();
      arg1 = &temp1;
    } else if (scm_is_pair(argv[0])) {
      SCM v = scm_vector(argv[0]);
      unsigned long size = scm_c_vector_length(v);
      temp1 = std::vector< double >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(v,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (double)(scm_to_double(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, argv[0]);
      }
    } else {
      arg1 = (std::vector< double > *) SWIG_MustGetPtr(argv[0],SWIGTYPE_p_std__vectorT_double_t,1, 0);
    }
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_double_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_DoubleVector(SCM rest)
{
#define FUNC_NAME "new-DoubleVector"
  SCM argv[2];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 2, "new-DoubleVector");
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_1(argc,argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_0(argc,argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      /* native sequence? */
      if (scm_is_vector(argv[0])) {
        unsigned int size = scm_c_vector_length(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          SCM o = scm_vector_ref(argv[0],scm_from_ulong(0));
          _v = scm_is_number(o) ? 1 : 0;
        }
      } else if (scm_is_null(argv[0])) {
        /* again, an empty sequence can be of any type */
        _v = 1;
      } else if (scm_is_pair(argv[0])) {
        /* check the first element only */
        SCM head = SCM_CAR(argv[0]);
        _v = scm_is_number(head) ? 1 : 0;
      } else {
        /* wrapped vector? */
        std::vector< double >* v;
        _v = (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorT_double_t, 0) != -1) ? 1 : 0;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_3(argc,argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      {
        _v = scm_is_true(scm_real_p(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_2(argc,argv);
      }
    }
  }
  
  scm_misc_error("new-DoubleVector", "No matching method for generic function `new_DoubleVector'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_length (SCM s_0)
{
#define FUNC_NAME "DoubleVector-length"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  unsigned int result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< double >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (double)(scm_to_double(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< double >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      SCM v = scm_vector(s_0);
      unsigned long size = scm_c_vector_length(v);
      temp1 = std::vector< double >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(v,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (double)(scm_to_double(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else {
      arg1 = (std::vector< double > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_double_t,1, 0);
    }
  }
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  {
    gswig_result = scm_from_ulong(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_emptyq___ (SCM s_0)
{
#define FUNC_NAME "DoubleVector-empty?"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< double >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (double)(scm_to_double(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< double >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      SCM v = scm_vector(s_0);
      unsigned long size = scm_c_vector_length(v);
      temp1 = std::vector< double >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(v,scm_from_ulong(i));
        if (scm_is_number(o))
        temp1[i] = (double)(scm_to_double(o));
        else
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
      }
    } else {
      arg1 = (std::vector< double > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_double_t,1, 0);
    }
  }
  result = (bool)((std::vector< double > const *)arg1)->empty();
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_clearN___ (SCM s_0)
{
#define FUNC_NAME "DoubleVector-clear!"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< double > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_double_t, 1, 0);
  }
  (arg1)->clear();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_pushN___ (SCM s_0, SCM s_1)
{
#define FUNC_NAME "DoubleVector-push!"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< double > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_double_t, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  (arg1)->push_back(arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_popN___ (SCM s_0)
{
#define FUNC_NAME "DoubleVector-pop!"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (std::vector< double > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_double_t, 1, 0);
  }
  try {
    result = (double)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_ref (SCM s_0, SCM s_1)
{
#define FUNC_NAME "DoubleVector-ref"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (std::vector< double > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_double_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  try {
    result = (double)std_vector_Sl_double_Sg__ref(arg1,arg2);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_DoubleVector_setN___ (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "DoubleVector-set!"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< double > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_double_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  {
    arg3 = scm_to_double(s_2);
  }
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_DoubleVector (SCM s_0)
{
#define FUNC_NAME "delete-DoubleVector"
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< double > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_double_t, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_array (SCM s_0)
{
#define FUNC_NAME "new-llama-token-array"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_array *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (llama_token_array *)new_llama_token_array(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_token_array (SCM s_0)
{
#define FUNC_NAME "delete-llama-token-array"
  llama_token_array *arg1 = (llama_token_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_array, 1, 0);
  }
  delete_llama_token_array(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_array_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-array-getitem"
  llama_token_array *arg1 = (llama_token_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_token_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = llama_token_array_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_array_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-token-array-setitem"
  llama_token_array *arg1 = (llama_token_array *) 0 ;
  size_t arg2 ;
  llama_token arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  llama_token_array_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_array_cast (SCM s_0)
{
#define FUNC_NAME "llama-token-array-cast"
  llama_token_array *arg1 = (llama_token_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token *result = 0 ;
  
  {
    arg1 = (llama_token_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_array, 1, 0);
  }
  result = (llama_token *)llama_token_array_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_array_frompointer (SCM s_0)
{
#define FUNC_NAME "llama-token-array-frompointer"
  llama_token *arg1 = (llama_token *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_array *result = 0 ;
  
  {
    arg1 = (llama_token *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_t, 1, 0);
  }
  result = (llama_token_array *)llama_token_array_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_array, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_carray (SCM s_0)
{
#define FUNC_NAME "new-llama-token-data-carray"
  size_t arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data_carray *result = 0 ;
  
  {
    arg1 = scm_to_size_t(s_0);
  }
  result = (llama_token_data_carray *)new_llama_token_data_carray(SWIG_STD_MOVE(arg1));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data_carray, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_token_data_carray (SCM s_0)
{
#define FUNC_NAME "delete-llama-token-data-carray"
  llama_token_data_carray *arg1 = (llama_token_data_carray *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data_carray *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_carray, 1, 0);
  }
  delete_llama_token_data_carray(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_carray_getitem (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-carray-getitem"
  llama_token_data_carray *arg1 = (llama_token_data_carray *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data result;
  
  {
    arg1 = (llama_token_data_carray *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_carray, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  result = llama_token_data_carray_getitem(arg1,SWIG_STD_MOVE(arg2));
  {
    llama_token_data * resultptr;
    resultptr = new llama_token_data(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_token_data, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_carray_setitem (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-token-data-carray-setitem"
  llama_token_data_carray *arg1 = (llama_token_data_carray *) 0 ;
  size_t arg2 ;
  llama_token_data arg3 ;
  llama_token_data *argp3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data_carray *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_carray, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    argp3 = (llama_token_data *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_llama_token_data, 3, 0);
    if (!argp3) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""3" " of type '" "llama_token_data" "'", SCM_EOL); 
    }
    arg3 = *argp3;
  }
  llama_token_data_carray_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_carray_cast (SCM s_0)
{
#define FUNC_NAME "llama-token-data-carray-cast"
  llama_token_data_carray *arg1 = (llama_token_data_carray *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data *result = 0 ;
  
  {
    arg1 = (llama_token_data_carray *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_carray, 1, 0);
  }
  result = (llama_token_data *)llama_token_data_carray_cast(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_carray_frompointer (SCM s_0)
{
#define FUNC_NAME "llama-token-data-carray-frompointer"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data_carray *result = 0 ;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  result = (llama_token_data_carray *)llama_token_data_carray_frompointer(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data_carray, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_TYPE_NONE(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-TYPE-NONE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_TYPE_NONE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_TYPE_SPM(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-TYPE-SPM"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_TYPE_SPM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_TYPE_BPE(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-TYPE-BPE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_TYPE_BPE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_TYPE_WPM(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-TYPE-WPM"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_TYPE_WPM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_DEFAULT(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-DEFAULT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_DEFAULT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_LLAMA3(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-LLAMA3"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_LLAMA3);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-DEEPSEEK-LLM"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-DEEPSEEK-CODER"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_FALCON(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-FALCON"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_FALCON);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_MPT(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-MPT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_MPT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_STARCODER(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-STARCODER"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_STARCODER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_GPT2(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-GPT2"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_GPT2);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_REFACT(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-REFACT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_REFACT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_COMMAND_R(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-COMMAND-R"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_COMMAND_R);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_QWEN2(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-QWEN2"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_QWEN2);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_OLMO(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-OLMO"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_OLMO);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_VOCAB_PRE_TYPE_DBRX(SCM s_0)
{
#define FUNC_NAME "LLAMA-VOCAB-PRE-TYPE-DBRX"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_VOCAB_PRE_TYPE_DBRX);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_TYPE_NONE(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-TYPE-NONE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_TYPE_NONE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_TYPE_NORM(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-TYPE-NORM"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_TYPE_NORM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_TYPE_NEOX(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-TYPE-NEOX"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_TYPE_NEOX);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_TYPE_GLM(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-TYPE-GLM"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_TYPE_GLM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_UNDEFINED(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-UNDEFINED"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_UNDEFINED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_NORMAL(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-NORMAL"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_NORMAL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_UNKNOWN(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-UNKNOWN"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_UNKNOWN);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_CONTROL(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-CONTROL"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_CONTROL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_USER_DEFINED(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-USER-DEFINED"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_USER_DEFINED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_UNUSED(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-UNUSED"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_UNUSED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_TOKEN_TYPE_BYTE(SCM s_0)
{
#define FUNC_NAME "LLAMA-TOKEN-TYPE-BYTE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_TOKEN_TYPE_BYTE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_ALL_F32(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-ALL-F32"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_ALL_F32);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_F16(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-F16"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_F16);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q4_0(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q4-0"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q4_0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q4_1(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q4-1"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q4_1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q4-1-SOME-F16"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q8_0(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q8-0"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q8_0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q5_0(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q5-0"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q5_0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q5_1(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q5-1"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q5_1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q2_K(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q2-K"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q2_K);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q3_K_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q3-K-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q3_K_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q3_K_M(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q3-K-M"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q3_K_M);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q3_K_L(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q3-K-L"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q3_K_L);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q4_K_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q4-K-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q4_K_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q4_K_M(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q4-K-M"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q4_K_M);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q5_K_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q5-K-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q5_K_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q5_K_M(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q5-K-M"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q5_K_M);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q6_K(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q6-K"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q6_K);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ2_XXS(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ2-XXS"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_XXS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ2_XS(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ2-XS"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_XS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_Q2_K_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-Q2-K-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_Q2_K_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ3_XS(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ3-XS"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_XS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ3_XXS(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ3-XXS"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_XXS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ1_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ1-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ1_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ4_NL(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ4-NL"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ4_NL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ3_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ3-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ3_M(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ3-M"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ3_M);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ2_S(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ2-S"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ2_M(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ2-M"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ2_M);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ4_XS(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ4-XS"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ4_XS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_IQ1_M(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-IQ1-M"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_IQ1_M);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_MOSTLY_BF16(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-MOSTLY-BF16"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_MOSTLY_BF16);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_FTYPE_GUESSED(SCM s_0)
{
#define FUNC_NAME "LLAMA-FTYPE-GUESSED"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_FTYPE_GUESSED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-SCALING-TYPE-UNSPECIFIED"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_SCALING_TYPE_NONE(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-SCALING-TYPE-NONE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_SCALING_TYPE_NONE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_SCALING_TYPE_LINEAR(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-SCALING-TYPE-LINEAR"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_SCALING_TYPE_LINEAR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_SCALING_TYPE_YARN(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-SCALING-TYPE-YARN"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_SCALING_TYPE_YARN);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_ROPE_SCALING_TYPE_MAX_VALUE(SCM s_0)
{
#define FUNC_NAME "LLAMA-ROPE-SCALING-TYPE-MAX-VALUE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_ROPE_SCALING_TYPE_MAX_VALUE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_POOLING_TYPE_UNSPECIFIED(SCM s_0)
{
#define FUNC_NAME "LLAMA-POOLING-TYPE-UNSPECIFIED"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_POOLING_TYPE_UNSPECIFIED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_POOLING_TYPE_NONE(SCM s_0)
{
#define FUNC_NAME "LLAMA-POOLING-TYPE-NONE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_POOLING_TYPE_NONE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_POOLING_TYPE_MEAN(SCM s_0)
{
#define FUNC_NAME "LLAMA-POOLING-TYPE-MEAN"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_POOLING_TYPE_MEAN);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_POOLING_TYPE_CLS(SCM s_0)
{
#define FUNC_NAME "LLAMA-POOLING-TYPE-CLS"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_POOLING_TYPE_CLS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_SPLIT_MODE_NONE(SCM s_0)
{
#define FUNC_NAME "LLAMA-SPLIT-MODE-NONE"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_SPLIT_MODE_NONE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_SPLIT_MODE_LAYER(SCM s_0)
{
#define FUNC_NAME "LLAMA-SPLIT-MODE-LAYER"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_SPLIT_MODE_LAYER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_SPLIT_MODE_ROW(SCM s_0)
{
#define FUNC_NAME "LLAMA-SPLIT-MODE-ROW"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_SPLIT_MODE_ROW);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_id_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-id-set"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  llama_token arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->id = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_id_get (SCM s_0)
{
#define FUNC_NAME "llama-token-data-id-get"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  result =  ((arg1)->id);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_logit_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-logit-set"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->logit = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_logit_get (SCM s_0)
{
#define FUNC_NAME "llama-token-data-logit-get"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  result = (float) ((arg1)->logit);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_p_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-p-set"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->p = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_p_get (SCM s_0)
{
#define FUNC_NAME "llama-token-data-p-get"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  result = (float) ((arg1)->p);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data ()
{
#define FUNC_NAME "new-llama-token-data"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data *result = 0 ;
  
  result = (llama_token_data *)new llama_token_data();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_token_data (SCM s_0)
{
#define FUNC_NAME "delete-llama-token-data"
  llama_token_data *arg1 = (llama_token_data *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_array_data_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-array-data-set"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  llama_token_data *arg2 = (llama_token_data *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  {
    arg2 = (llama_token_data *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data, 2, 0);
  }
  if (arg1) (arg1)->data = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_array_data_get (SCM s_0)
{
#define FUNC_NAME "llama-token-data-array-data-get"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data *result = 0 ;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  result = (llama_token_data *) ((arg1)->data);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_array_size_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-array-size-set"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  if (arg1) (arg1)->size = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_array_size_get (SCM s_0)
{
#define FUNC_NAME "llama-token-data-array-size-get"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  result =  ((arg1)->size);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_array_sorted_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-array-sorted-set"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->sorted = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_array_sorted_get (SCM s_0)
{
#define FUNC_NAME "llama-token-data-array-sorted-get"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  result = (bool) ((arg1)->sorted);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_array ()
{
#define FUNC_NAME "new-llama-token-data-array"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data_array *result = 0 ;
  
  result = (llama_token_data_array *)new llama_token_data_array();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data_array, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_token_data_array (SCM s_0)
{
#define FUNC_NAME "delete-llama-token-data-array"
  llama_token_data_array *arg1 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_token_data_array *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_token_data_array, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_n_tokens_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-n-tokens-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_tokens = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_n_tokens_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-n-tokens-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result =  ((arg1)->n_tokens);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_token_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-token-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  llama_token *arg2 = (llama_token *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = (llama_token *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int32_t, 2, 0);
  }
  if (arg1) (arg1)->token = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_token_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-token-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token *result = 0 ;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result = (llama_token *) ((arg1)->token);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_embd_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-embd-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  float *arg2 = (float *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = (float *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  if (arg1) (arg1)->embd = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_embd_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-embd-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result = (float *) ((arg1)->embd);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_pos_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-pos-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  llama_pos *arg2 = (llama_pos *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = (llama_pos *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int32_t, 2, 0);
  }
  if (arg1) (arg1)->pos = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_pos_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-pos-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_pos *result = 0 ;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result = (llama_pos *) ((arg1)->pos);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_n_seq_id_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-n-seq-id-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = (int32_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int32_t, 2, 0);
  }
  if (arg1) (arg1)->n_seq_id = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_n_seq_id_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-n-seq-id-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t *result = 0 ;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result = (int32_t *) ((arg1)->n_seq_id);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_seq_id_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-seq-id-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  llama_seq_id **arg2 = (llama_seq_id **) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = (llama_seq_id **)SWIG_MustGetPtr(s_1, SWIGTYPE_p_p_int32_t, 2, 0);
  }
  if (arg1) (arg1)->seq_id = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_seq_id_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-seq-id-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_seq_id **result = 0 ;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result = (llama_seq_id **) ((arg1)->seq_id);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_logits_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-logits-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  int8_t *arg2 = (int8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = (int8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int8_t, 2, 0);
  }
  if (arg1) (arg1)->logits = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_logits_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-logits-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int8_t *result = 0 ;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result = (int8_t *) ((arg1)->logits);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int8_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_all_pos_0_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-all-pos-0-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  llama_pos arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->all_pos_0 = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_all_pos_0_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-all-pos-0-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_pos result;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result =  ((arg1)->all_pos_0);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_all_pos_1_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-all-pos-1-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  llama_pos arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->all_pos_1 = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_all_pos_1_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-all-pos-1-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_pos result;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result =  ((arg1)->all_pos_1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_all_seq_id_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-batch-all-seq-id-set"
  llama_batch *arg1 = (llama_batch *) 0 ;
  llama_seq_id arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->all_seq_id = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_all_seq_id_get (SCM s_0)
{
#define FUNC_NAME "llama-batch-all-seq-id-get"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_seq_id result;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  result =  ((arg1)->all_seq_id);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_batch ()
{
#define FUNC_NAME "new-llama-batch"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_batch *result = 0 ;
  
  result = (llama_batch *)new llama_batch();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_batch, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_batch (SCM s_0)
{
#define FUNC_NAME "delete-llama-batch"
  llama_batch *arg1 = (llama_batch *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_KV_OVERRIDE_TYPE_INT(SCM s_0)
{
#define FUNC_NAME "LLAMA-KV-OVERRIDE-TYPE-INT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_KV_OVERRIDE_TYPE_INT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_KV_OVERRIDE_TYPE_FLOAT(SCM s_0)
{
#define FUNC_NAME "LLAMA-KV-OVERRIDE-TYPE-FLOAT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_KV_OVERRIDE_TYPE_FLOAT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_KV_OVERRIDE_TYPE_BOOL(SCM s_0)
{
#define FUNC_NAME "LLAMA-KV-OVERRIDE-TYPE-BOOL"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_KV_OVERRIDE_TYPE_BOOL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_KV_OVERRIDE_TYPE_STR(SCM s_0)
{
#define FUNC_NAME "LLAMA-KV-OVERRIDE-TYPE-STR"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_KV_OVERRIDE_TYPE_STR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_kv_override_tag_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-kv-override-tag-set"
  llama_model_kv_override *arg1 = (llama_model_kv_override *) 0 ;
  enum llama_model_kv_override_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_kv_override *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_kv_override, 1, 0);
  }
  {
    arg2 = (enum llama_model_kv_override_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->tag = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_kv_override_tag_get (SCM s_0)
{
#define FUNC_NAME "llama-model-kv-override-tag-get"
  llama_model_kv_override *arg1 = (llama_model_kv_override *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_model_kv_override_type result;
  
  {
    arg1 = (llama_model_kv_override *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_kv_override, 1, 0);
  }
  result = (enum llama_model_kv_override_type) ((arg1)->tag);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_kv_override_key_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-kv-override-key-set"
  llama_model_kv_override *arg1 = (llama_model_kv_override *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_kv_override *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_kv_override, 1, 0);
  }
  {
    arg2 = (char *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_char, 2, 0);
  }
  {
    if(arg2) {
      strncpy((char*)arg1->key, (const char *)arg2, 128-1);
      arg1->key[128-1] = 0;
    } else {
      arg1->key[0] = 0;
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_kv_override_key_get (SCM s_0)
{
#define FUNC_NAME "llama-model-kv-override-key-get"
  llama_model_kv_override *arg1 = (llama_model_kv_override *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  char *result = 0 ;
  
  {
    arg1 = (llama_model_kv_override *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_kv_override, 1, 0);
  }
  result = (char *)(char *) ((arg1)->key);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_char, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_model_kv_override ()
{
#define FUNC_NAME "new-llama-model-kv-override"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model_kv_override *result = 0 ;
  
  result = (llama_model_kv_override *)new llama_model_kv_override();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_model_kv_override, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_model_kv_override (SCM s_0)
{
#define FUNC_NAME "delete-llama-model-kv-override"
  llama_model_kv_override *arg1 = (llama_model_kv_override *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_kv_override *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_kv_override, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_n_gpu_layers_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-n-gpu-layers-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_gpu_layers = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_n_gpu_layers_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-n-gpu-layers-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result =  ((arg1)->n_gpu_layers);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_split_mode_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-split-mode-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  enum llama_split_mode arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = (enum llama_split_mode) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->split_mode = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_split_mode_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-split-mode-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_split_mode result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (enum llama_split_mode) ((arg1)->split_mode);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_main_gpu_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-main-gpu-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->main_gpu = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_main_gpu_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-main-gpu-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result =  ((arg1)->main_gpu);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_tensor_split_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-tensor-split-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  float *arg2 = (float *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = (float *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  if (arg1) (arg1)->tensor_split = (float const *)arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_tensor_split_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-tensor-split-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (float *) ((arg1)->tensor_split);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_progress_callback_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-progress-callback-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  llama_progress_callback arg2 = (llama_progress_callback) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = (llama_progress_callback)SWIG_MustGetPtr(s_1, SWIGTYPE_p_f_float_p_void__bool, 2, 0);
  }
  if (arg1) (arg1)->progress_callback = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_progress_callback_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-progress-callback-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_progress_callback result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (llama_progress_callback) ((arg1)->progress_callback);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f_float_p_void__bool, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_progress_callback_user_data_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-progress-callback-user-data-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  if (arg1) (arg1)->progress_callback_user_data = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_progress_callback_user_data_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-progress-callback-user-data-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  void *result = 0 ;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (void *) ((arg1)->progress_callback_user_data);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_kv_overrides_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-kv-overrides-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  llama_model_kv_override *arg2 = (llama_model_kv_override *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = (llama_model_kv_override *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_model_kv_override, 2, 0);
  }
  if (arg1) (arg1)->kv_overrides = (llama_model_kv_override const *)arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_kv_overrides_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-kv-overrides-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model_kv_override *result = 0 ;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (llama_model_kv_override *) ((arg1)->kv_overrides);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_model_kv_override, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_vocab_only_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-vocab-only-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->vocab_only = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_vocab_only_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-vocab-only-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (bool) ((arg1)->vocab_only);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_use_mmap_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-use-mmap-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->use_mmap = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_use_mmap_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-use-mmap-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (bool) ((arg1)->use_mmap);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_use_mlock_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-use-mlock-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->use_mlock = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_use_mlock_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-use-mlock-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (bool) ((arg1)->use_mlock);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_check_tensors_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-params-check-tensors-set"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->check_tensors = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_params_check_tensors_get (SCM s_0)
{
#define FUNC_NAME "llama-model-params-check-tensors-get"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  result = (bool) ((arg1)->check_tensors);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_model_params ()
{
#define FUNC_NAME "new-llama-model-params"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model_params *result = 0 ;
  
  result = (llama_model_params *)new llama_model_params();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_model_params, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_model_params (SCM s_0)
{
#define FUNC_NAME "delete-llama-model-params"
  llama_model_params *arg1 = (llama_model_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_params, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_seed_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-seed-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->seed = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_seed_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-seed-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->seed);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_ctx_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-n-ctx-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->n_ctx = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_ctx_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-n-ctx-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->n_ctx);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_batch_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-n-batch-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->n_batch = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_batch_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-n-batch-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->n_batch);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_ubatch_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-n-ubatch-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->n_ubatch = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_ubatch_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-n-ubatch-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->n_ubatch);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_seq_max_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-n-seq-max-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->n_seq_max = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_seq_max_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-n-seq-max-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->n_seq_max);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_threads_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-n-threads-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->n_threads = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_threads_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-n-threads-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->n_threads);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_threads_batch_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-n-threads-batch-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->n_threads_batch = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_n_threads_batch_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-n-threads-batch-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->n_threads_batch);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_rope_scaling_type_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-rope-scaling-type-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  enum llama_rope_scaling_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (enum llama_rope_scaling_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->rope_scaling_type = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_rope_scaling_type_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-rope-scaling-type-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_rope_scaling_type result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (enum llama_rope_scaling_type) ((arg1)->rope_scaling_type);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_pooling_type_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-pooling-type-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  enum llama_pooling_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (enum llama_pooling_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->pooling_type = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_pooling_type_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-pooling-type-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_pooling_type result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (enum llama_pooling_type) ((arg1)->pooling_type);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_rope_freq_base_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-rope-freq-base-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->rope_freq_base = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_rope_freq_base_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-rope-freq-base-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->rope_freq_base);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_rope_freq_scale_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-rope-freq-scale-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->rope_freq_scale = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_rope_freq_scale_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-rope-freq-scale-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->rope_freq_scale);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_ext_factor_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-yarn-ext-factor-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->yarn_ext_factor = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_ext_factor_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-yarn-ext-factor-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->yarn_ext_factor);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_attn_factor_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-yarn-attn-factor-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->yarn_attn_factor = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_attn_factor_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-yarn-attn-factor-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->yarn_attn_factor);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_beta_fast_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-yarn-beta-fast-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->yarn_beta_fast = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_beta_fast_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-yarn-beta-fast-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->yarn_beta_fast);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_beta_slow_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-yarn-beta-slow-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->yarn_beta_slow = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_beta_slow_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-yarn-beta-slow-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->yarn_beta_slow);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_orig_ctx_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-yarn-orig-ctx-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->yarn_orig_ctx = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_yarn_orig_ctx_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-yarn-orig-ctx-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->yarn_orig_ctx);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_defrag_thold_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-defrag-thold-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->defrag_thold = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_defrag_thold_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-defrag-thold-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (float) ((arg1)->defrag_thold);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_cb_eval_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-cb-eval-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  ggml_backend_sched_eval_callback arg2 ;
  ggml_backend_sched_eval_callback *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    argp2 = (ggml_backend_sched_eval_callback *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_ggml_backend_sched_eval_callback, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "ggml_backend_sched_eval_callback" "'", SCM_EOL); 
    }
    arg2 = *argp2;
  }
  if (arg1) (arg1)->cb_eval = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_cb_eval_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-cb-eval-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  ggml_backend_sched_eval_callback result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->cb_eval);
  {
    ggml_backend_sched_eval_callback * resultptr;
    resultptr = new ggml_backend_sched_eval_callback(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_ggml_backend_sched_eval_callback, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_cb_eval_user_data_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-cb-eval-user-data-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  if (arg1) (arg1)->cb_eval_user_data = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_cb_eval_user_data_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-cb-eval-user-data-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  void *result = 0 ;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (void *) ((arg1)->cb_eval_user_data);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_type_k_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-type-k-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  enum ggml_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (enum ggml_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->type_k = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_type_k_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-type-k-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum ggml_type result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (enum ggml_type) ((arg1)->type_k);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_type_v_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-type-v-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  enum ggml_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (enum ggml_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->type_v = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_type_v_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-type-v-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum ggml_type result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (enum ggml_type) ((arg1)->type_v);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_logits_all_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-logits-all-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->logits_all = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_logits_all_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-logits-all-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (bool) ((arg1)->logits_all);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_embeddings_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-embeddings-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->embeddings = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_embeddings_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-embeddings-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (bool) ((arg1)->embeddings);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_offload_kqv_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-offload-kqv-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->offload_kqv = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_offload_kqv_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-offload-kqv-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (bool) ((arg1)->offload_kqv);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_flash_attn_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-flash-attn-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->flash_attn = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_flash_attn_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-flash-attn-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (bool) ((arg1)->flash_attn);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_abort_callback_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-abort-callback-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  ggml_abort_callback arg2 ;
  ggml_abort_callback *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    argp2 = (ggml_abort_callback *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_ggml_abort_callback, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "ggml_abort_callback" "'", SCM_EOL); 
    }
    arg2 = *argp2;
  }
  if (arg1) (arg1)->abort_callback = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_abort_callback_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-abort-callback-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  ggml_abort_callback result;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result =  ((arg1)->abort_callback);
  {
    ggml_abort_callback * resultptr;
    resultptr = new ggml_abort_callback(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_ggml_abort_callback, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_abort_callback_data_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-context-params-abort-callback-data-set"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  if (arg1) (arg1)->abort_callback_data = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_params_abort_callback_data_get (SCM s_0)
{
#define FUNC_NAME "llama-context-params-abort-callback-data-get"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  void *result = 0 ;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  result = (void *) ((arg1)->abort_callback_data);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_context_params ()
{
#define FUNC_NAME "new-llama-context-params"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_context_params *result = 0 ;
  
  result = (llama_context_params *)new llama_context_params();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_context_params, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_context_params (SCM s_0)
{
#define FUNC_NAME "delete-llama-context-params"
  llama_context_params *arg1 = (llama_context_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context_params, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_nthread_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-nthread-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->nthread = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_nthread_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-nthread-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result =  ((arg1)->nthread);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_ftype_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-ftype-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  enum llama_ftype arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = (enum llama_ftype) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->ftype = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_ftype_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-ftype-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_ftype result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (enum llama_ftype) ((arg1)->ftype);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_output_tensor_type_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-output-tensor-type-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  enum ggml_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = (enum ggml_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->output_tensor_type = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_output_tensor_type_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-output-tensor-type-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum ggml_type result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (enum ggml_type) ((arg1)->output_tensor_type);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_token_embedding_type_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-token-embedding-type-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  enum ggml_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = (enum ggml_type) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->token_embedding_type = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_token_embedding_type_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-token-embedding-type-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum ggml_type result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (enum ggml_type) ((arg1)->token_embedding_type);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_allow_requantize_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-allow-requantize-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->allow_requantize = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_allow_requantize_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-allow-requantize-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (bool) ((arg1)->allow_requantize);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_quantize_output_tensor_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-quantize-output-tensor-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->quantize_output_tensor = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_quantize_output_tensor_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-quantize-output-tensor-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (bool) ((arg1)->quantize_output_tensor);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_only_copy_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-only-copy-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->only_copy = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_only_copy_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-only-copy-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (bool) ((arg1)->only_copy);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_pure_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-pure-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->pure = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_pure_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-pure-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (bool) ((arg1)->pure);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_keep_split_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-keep-split-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->keep_split = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_keep_split_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-keep-split-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (bool) ((arg1)->keep_split);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_imatrix_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-imatrix-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  if (arg1) (arg1)->imatrix = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_imatrix_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-imatrix-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  void *result = 0 ;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (void *) ((arg1)->imatrix);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_kv_overrides_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-model-quantize-params-kv-overrides-set"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  if (arg1) (arg1)->kv_overrides = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_params_kv_overrides_get (SCM s_0)
{
#define FUNC_NAME "llama-model-quantize-params-kv-overrides-get"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  void *result = 0 ;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  result = (void *) ((arg1)->kv_overrides);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_model_quantize_params ()
{
#define FUNC_NAME "new-llama-model-quantize-params"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model_quantize_params *result = 0 ;
  
  result = (llama_model_quantize_params *)new llama_model_quantize_params();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_model_quantize_params, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_model_quantize_params (SCM s_0)
{
#define FUNC_NAME "delete-llama-model-quantize-params"
  llama_model_quantize_params *arg1 = (llama_model_quantize_params *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model_quantize_params, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_END(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-END"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_END);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_ALT(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-ALT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_ALT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_RULE_REF(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-RULE-REF"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_RULE_REF);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_CHAR(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-CHAR"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_CHAR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_CHAR_NOT(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-CHAR-NOT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_CHAR_NOT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_CHAR_RNG_UPPER(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-CHAR-RNG-UPPER"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_CHAR_RNG_UPPER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_LLAMA_GRETYPE_CHAR_ALT(SCM s_0)
{
#define FUNC_NAME "LLAMA-GRETYPE-CHAR-ALT"
  SCM gswig_result;
  
  {
    gswig_result = scm_from_long(gswig_const_LLAMA_GRETYPE_CHAR_ALT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_element_type_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-grammar-element-type-set"
  llama_grammar_element *arg1 = (llama_grammar_element *) 0 ;
  enum llama_gretype arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_grammar_element *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar_element, 1, 0);
  }
  {
    arg2 = (enum llama_gretype) scm_to_int(s_1); 
  }
  if (arg1) (arg1)->type = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_element_type_get (SCM s_0)
{
#define FUNC_NAME "llama-grammar-element-type-get"
  llama_grammar_element *arg1 = (llama_grammar_element *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_gretype result;
  
  {
    arg1 = (llama_grammar_element *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar_element, 1, 0);
  }
  result = (enum llama_gretype) ((arg1)->type);
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_element_value_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-grammar-element-value-set"
  llama_grammar_element *arg1 = (llama_grammar_element *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_grammar_element *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar_element, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  if (arg1) (arg1)->value = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_element_value_get (SCM s_0)
{
#define FUNC_NAME "llama-grammar-element-value-get"
  llama_grammar_element *arg1 = (llama_grammar_element *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_grammar_element *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar_element, 1, 0);
  }
  result =  ((arg1)->value);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_grammar_element ()
{
#define FUNC_NAME "new-llama-grammar-element"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_grammar_element *result = 0 ;
  
  result = (llama_grammar_element *)new llama_grammar_element();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_grammar_element, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_grammar_element (SCM s_0)
{
#define FUNC_NAME "delete-llama-grammar-element"
  llama_grammar_element *arg1 = (llama_grammar_element *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_grammar_element *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar_element, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_start_ms_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-t-start-ms-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  if (arg1) (arg1)->t_start_ms = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_start_ms_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-t-start-ms-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result = (double) ((arg1)->t_start_ms);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_end_ms_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-t-end-ms-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  if (arg1) (arg1)->t_end_ms = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_end_ms_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-t-end-ms-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result = (double) ((arg1)->t_end_ms);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_load_ms_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-t-load-ms-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  if (arg1) (arg1)->t_load_ms = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_load_ms_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-t-load-ms-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result = (double) ((arg1)->t_load_ms);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_sample_ms_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-t-sample-ms-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  if (arg1) (arg1)->t_sample_ms = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_sample_ms_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-t-sample-ms-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result = (double) ((arg1)->t_sample_ms);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_p_eval_ms_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-t-p-eval-ms-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  if (arg1) (arg1)->t_p_eval_ms = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_p_eval_ms_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-t-p-eval-ms-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result = (double) ((arg1)->t_p_eval_ms);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_eval_ms_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-t-eval-ms-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_double(s_1);
  }
  if (arg1) (arg1)->t_eval_ms = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_t_eval_ms_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-t-eval-ms-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  double result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result = (double) ((arg1)->t_eval_ms);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_n_sample_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-n-sample-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_sample = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_n_sample_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-n-sample-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result =  ((arg1)->n_sample);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_n_p_eval_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-n-p-eval-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_p_eval = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_n_p_eval_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-n-p-eval-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result =  ((arg1)->n_p_eval);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_n_eval_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-timings-n-eval-set"
  llama_timings *arg1 = (llama_timings *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_eval = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_timings_n_eval_get (SCM s_0)
{
#define FUNC_NAME "llama-timings-n-eval-get"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  result =  ((arg1)->n_eval);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_timings ()
{
#define FUNC_NAME "new-llama-timings"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_timings *result = 0 ;
  
  result = (llama_timings *)new llama_timings();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_timings, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_timings (SCM s_0)
{
#define FUNC_NAME "delete-llama-timings"
  llama_timings *arg1 = (llama_timings *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_timings *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_timings, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_chat_message_role_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-chat-message-role-set"
  llama_chat_message *arg1 = (llama_chat_message *) 0 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_chat_message *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_chat_message, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    if (arg2) {
      arg1->role = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->role, (const char *)arg2);
    } else {
      arg1->role = 0;
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  if (must_free2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_chat_message_role_get (SCM s_0)
{
#define FUNC_NAME "llama-chat-message-role-get"
  llama_chat_message *arg1 = (llama_chat_message *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  char *result = 0 ;
  
  {
    arg1 = (llama_chat_message *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_chat_message, 1, 0);
  }
  result = (char *) ((arg1)->role);
  {
    gswig_result = SWIG_str02scm((const char *)result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_chat_message_content_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-chat-message-content-set"
  llama_chat_message *arg1 = (llama_chat_message *) 0 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_chat_message *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_chat_message, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    if (arg2) {
      arg1->content = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->content, (const char *)arg2);
    } else {
      arg1->content = 0;
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  if (must_free2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_chat_message_content_get (SCM s_0)
{
#define FUNC_NAME "llama-chat-message-content-get"
  llama_chat_message *arg1 = (llama_chat_message *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  char *result = 0 ;
  
  {
    arg1 = (llama_chat_message *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_chat_message, 1, 0);
  }
  result = (char *) ((arg1)->content);
  {
    gswig_result = SWIG_str02scm((const char *)result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_chat_message ()
{
#define FUNC_NAME "new-llama-chat-message"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_chat_message *result = 0 ;
  
  result = (llama_chat_message *)new llama_chat_message();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_chat_message, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_chat_message (SCM s_0)
{
#define FUNC_NAME "delete-llama-chat-message"
  llama_chat_message *arg1 = (llama_chat_message *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_chat_message *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_chat_message, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_default_params ()
{
#define FUNC_NAME "llama-model-default-params"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model_params result;
  
  result = llama_model_default_params();
  {
    llama_model_params * resultptr;
    resultptr = new llama_model_params(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_model_params, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_context_default_params ()
{
#define FUNC_NAME "llama-context-default-params"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_context_params result;
  
  result = llama_context_default_params();
  {
    llama_context_params * resultptr;
    resultptr = new llama_context_params(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_context_params, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize_default_params ()
{
#define FUNC_NAME "llama-model-quantize-default-params"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model_quantize_params result;
  
  result = llama_model_quantize_default_params();
  {
    llama_model_quantize_params * resultptr;
    resultptr = new llama_model_quantize_params(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_model_quantize_params, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_backend_init ()
{
#define FUNC_NAME "llama-backend-init"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  llama_backend_init();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_numa_init (SCM s_0)
{
#define FUNC_NAME "llama-numa-init"
  enum ggml_numa_strategy arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (enum ggml_numa_strategy) scm_to_int(s_0); 
  }
  llama_numa_init(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_backend_free ()
{
#define FUNC_NAME "llama-backend-free"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  llama_backend_free();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_load_model_from_file (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-load-model-from-file"
  char *arg1 = (char *) 0 ;
  llama_model_params arg2 ;
  int must_free1 = 0 ;
  llama_model_params *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model *result = 0 ;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    argp2 = (llama_model_params *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_model_params, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "llama_model_params" "'", SCM_EOL); 
    }
    arg2 = *argp2;
  }
  result = (llama_model *)llama_load_model_from_file((char const *)arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_model, 0);
  }
  if (must_free1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_free_model (SCM s_0)
{
#define FUNC_NAME "llama-free-model"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  llama_free_model(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_new_context_with_model (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-new-context-with-model"
  llama_model *arg1 = (llama_model *) 0 ;
  llama_context_params arg2 ;
  llama_context_params *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_context *result = 0 ;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    argp2 = (llama_context_params *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_context_params, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "llama_context_params" "'", SCM_EOL); 
    }
    arg2 = *argp2;
  }
  result = (llama_context *)llama_new_context_with_model(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_context, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_free (SCM s_0)
{
#define FUNC_NAME "llama-free"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_free(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_time_us ()
{
#define FUNC_NAME "llama-time-us"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int64_t result;
  
  result = llama_time_us();
  {
    gswig_result = scm_from_int64(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_max_devices ()
{
#define FUNC_NAME "llama-max-devices"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  result = llama_max_devices();
  {
    gswig_result = scm_from_size_t(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_supports_mmap ()
{
#define FUNC_NAME "llama-supports-mmap"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  result = (bool)llama_supports_mmap();
  {
    gswig_result = scm_from_bool(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_supports_mlock ()
{
#define FUNC_NAME "llama-supports-mlock"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  result = (bool)llama_supports_mlock();
  {
    gswig_result = scm_from_bool(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_supports_gpu_offload ()
{
#define FUNC_NAME "llama-supports-gpu-offload"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  result = (bool)llama_supports_gpu_offload();
  {
    gswig_result = scm_from_bool(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_model (SCM s_0)
{
#define FUNC_NAME "llama-get-model"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_model *result = 0 ;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = (llama_model *)llama_get_model((llama_context const *)arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_model, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_ctx (SCM s_0)
{
#define FUNC_NAME "llama-n-ctx"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_n_ctx((llama_context const *)arg1);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_batch (SCM s_0)
{
#define FUNC_NAME "llama-n-batch"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_n_batch((llama_context const *)arg1);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_ubatch (SCM s_0)
{
#define FUNC_NAME "llama-n-ubatch"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_n_ubatch((llama_context const *)arg1);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_seq_max (SCM s_0)
{
#define FUNC_NAME "llama-n-seq-max"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_n_seq_max((llama_context const *)arg1);
  {
    gswig_result = scm_from_uint32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_vocab (SCM s_0)
{
#define FUNC_NAME "llama-n-vocab"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_n_vocab((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_ctx_train (SCM s_0)
{
#define FUNC_NAME "llama-n-ctx-train"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_n_ctx_train((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_embd (SCM s_0)
{
#define FUNC_NAME "llama-n-embd"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_n_embd((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_n_layer (SCM s_0)
{
#define FUNC_NAME "llama-n-layer"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_n_layer((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_rope_freq_scale_train (SCM s_0)
{
#define FUNC_NAME "llama-rope-freq-scale-train"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = (float)llama_rope_freq_scale_train((llama_model const *)arg1);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_meta_val_str (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-model-meta-val-str"
  llama_model *arg1 = (llama_model *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  result = llama_model_meta_val_str((llama_model const *)arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4));
  {
    gswig_result = scm_from_int32(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  if (must_free3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_meta_count (SCM s_0)
{
#define FUNC_NAME "llama-model-meta-count"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_model_meta_count((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_meta_key_by_index (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-model-meta-key-by-index"
  llama_model *arg1 = (llama_model *) 0 ;
  int32_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  result = llama_model_meta_key_by_index((llama_model const *)arg1,SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4));
  {
    gswig_result = scm_from_int32(result);
  }
  
  if (must_free3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_meta_val_str_by_index (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-model-meta-val-str-by-index"
  llama_model *arg1 = (llama_model *) 0 ;
  int32_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  result = llama_model_meta_val_str_by_index((llama_model const *)arg1,SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4));
  {
    gswig_result = scm_from_int32(result);
  }
  
  if (must_free3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_desc (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-model-desc"
  llama_model *arg1 = (llama_model *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_to_size_t(s_2);
  }
  result = llama_model_desc((llama_model const *)arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    gswig_result = scm_from_int32(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_size (SCM s_0)
{
#define FUNC_NAME "llama-model-size"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint64_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_model_size((llama_model const *)arg1);
  {
    gswig_result = scm_from_uint64(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_n_params (SCM s_0)
{
#define FUNC_NAME "llama-model-n-params"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint64_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_model_n_params((llama_model const *)arg1);
  {
    gswig_result = scm_from_uint64(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_model_tensor (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-get-model-tensor"
  llama_model *arg1 = (llama_model *) 0 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  ggml_tensor *result = 0 ;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (ggml_tensor *)llama_get_model_tensor(arg1,(char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_ggml_tensor, 0);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_quantize (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-model-quantize"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_model_quantize_params *arg3 = (llama_model_quantize_params *) 0 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  uint32_t result;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (llama_model_quantize_params *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_llama_model_quantize_params, 3, 0);
  }
  result = llama_model_quantize((char const *)arg1,(char const *)arg2,(llama_model_quantize_params const *)arg3);
  {
    gswig_result = scm_from_uint32(result);
  }
  if (must_free1) SWIG_free(arg1);
  if (must_free2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_model_apply_lora_from_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-model-apply-lora-from-file"
  llama_model *arg1 = (llama_model *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  char *arg4 = (char *) 0 ;
  int32_t arg5 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_to_int32(s_4);
  }
  result = llama_model_apply_lora_from_file((llama_model const *)arg1,(char const *)arg2,arg3,(char const *)arg4,SWIG_STD_MOVE(arg5));
  {
    gswig_result = scm_from_int32(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  if (must_free4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_control_vector_apply (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "llama-control-vector-apply"
  llama_context *arg1 = (llama_context *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  int32_t arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (float *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  {
    arg3 = scm_to_size_t(s_2);
  }
  {
    arg4 = scm_to_int32(s_3);
  }
  {
    arg5 = scm_to_int32(s_4);
  }
  {
    arg6 = scm_to_int32(s_5);
  }
  result = llama_control_vector_apply(arg1,(float const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_cell_pos_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-cell-pos-set"
  llama_kv_cache_view_cell *arg1 = (llama_kv_cache_view_cell *) 0 ;
  llama_pos arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view_cell *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view_cell, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->pos = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_cell_pos_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-cell-pos-get"
  llama_kv_cache_view_cell *arg1 = (llama_kv_cache_view_cell *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_pos result;
  
  {
    arg1 = (llama_kv_cache_view_cell *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view_cell, 1, 0);
  }
  result =  ((arg1)->pos);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_kv_cache_view_cell ()
{
#define FUNC_NAME "new-llama-kv-cache-view-cell"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_kv_cache_view_cell *result = 0 ;
  
  result = (llama_kv_cache_view_cell *)new llama_kv_cache_view_cell();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_kv_cache_view_cell, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_kv_cache_view_cell (SCM s_0)
{
#define FUNC_NAME "delete-llama-kv-cache-view-cell"
  llama_kv_cache_view_cell *arg1 = (llama_kv_cache_view_cell *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view_cell *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view_cell, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_n_cells_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-n-cells-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_cells = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_n_cells_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-n-cells-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result =  ((arg1)->n_cells);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_n_seq_max_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-n-seq-max-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->n_seq_max = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_n_seq_max_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-n-seq-max-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result =  ((arg1)->n_seq_max);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_token_count_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-token-count-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->token_count = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_token_count_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-token-count-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result =  ((arg1)->token_count);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_used_cells_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-used-cells-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->used_cells = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_used_cells_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-used-cells-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result =  ((arg1)->used_cells);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_max_contiguous_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-max-contiguous-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->max_contiguous = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_max_contiguous_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-max-contiguous-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result =  ((arg1)->max_contiguous);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_max_contiguous_idx_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-max-contiguous-idx-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  if (arg1) (arg1)->max_contiguous_idx = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_max_contiguous_idx_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-max-contiguous-idx-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result =  ((arg1)->max_contiguous_idx);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_cells_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-cells-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  llama_kv_cache_view_cell *arg2 = (llama_kv_cache_view_cell *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = (llama_kv_cache_view_cell *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_kv_cache_view_cell, 2, 0);
  }
  if (arg1) (arg1)->cells = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_cells_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-cells-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_kv_cache_view_cell *result = 0 ;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result = (llama_kv_cache_view_cell *) ((arg1)->cells);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_kv_cache_view_cell, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_cells_sequences_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-cells-sequences-set"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  llama_seq_id *arg2 = (llama_seq_id *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  {
    arg2 = (llama_seq_id *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int32_t, 2, 0);
  }
  if (arg1) (arg1)->cells_sequences = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_cells_sequences_get (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-cells-sequences-get"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_seq_id *result = 0 ;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  result = (llama_seq_id *) ((arg1)->cells_sequences);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_kv_cache_view ()
{
#define FUNC_NAME "new-llama-kv-cache-view"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_kv_cache_view *result = 0 ;
  
  result = (llama_kv_cache_view *)new llama_kv_cache_view();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_kv_cache_view, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_kv_cache_view (SCM s_0)
{
#define FUNC_NAME "delete-llama-kv-cache-view"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_init (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-init"
  llama_context *arg1 = (llama_context *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_kv_cache_view result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = llama_kv_cache_view_init((llama_context const *)arg1,SWIG_STD_MOVE(arg2));
  {
    llama_kv_cache_view * resultptr;
    resultptr = new llama_kv_cache_view(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_kv_cache_view, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_free (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-view-free"
  llama_kv_cache_view *arg1 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_kv_cache_view, 1, 0);
  }
  llama_kv_cache_view_free(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_view_update (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-view-update"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_kv_cache_view *arg2 = (llama_kv_cache_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_kv_cache_view *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_kv_cache_view, 2, 0);
  }
  llama_kv_cache_view_update((llama_context const *)arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_kv_cache_token_count (SCM s_0)
{
#define FUNC_NAME "llama-get-kv-cache-token-count"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_get_kv_cache_token_count((llama_context const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_kv_cache_used_cells (SCM s_0)
{
#define FUNC_NAME "llama-get-kv-cache-used-cells"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_get_kv_cache_used_cells((llama_context const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_clear (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-clear"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_kv_cache_clear(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_seq_rm (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-kv-cache-seq-rm"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  llama_pos arg3 ;
  llama_pos arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = scm_to_int32(s_3);
  }
  result = (bool)llama_kv_cache_seq_rm(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_seq_cp (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-kv-cache-seq-cp"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  llama_seq_id arg3 ;
  llama_pos arg4 ;
  llama_pos arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = scm_to_int32(s_3);
  }
  {
    arg5 = scm_to_int32(s_4);
  }
  llama_kv_cache_seq_cp(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_seq_keep (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-seq-keep"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  llama_kv_cache_seq_keep(arg1,SWIG_STD_MOVE(arg2));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_seq_add (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-kv-cache-seq-add"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  llama_pos arg3 ;
  llama_pos arg4 ;
  llama_pos arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = scm_to_int32(s_3);
  }
  {
    arg5 = scm_to_int32(s_4);
  }
  llama_kv_cache_seq_add(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_seq_div (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-kv-cache-seq-div"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  llama_pos arg3 ;
  llama_pos arg4 ;
  int arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = scm_to_int32(s_3);
  }
  {
    arg5 = scm_to_int(s_4);
  }
  llama_kv_cache_seq_div(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_seq_pos_max (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-kv-cache-seq-pos-max"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_pos result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = llama_kv_cache_seq_pos_max(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_defrag (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-defrag"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_kv_cache_defrag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_kv_cache_update (SCM s_0)
{
#define FUNC_NAME "llama-kv-cache-update"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_kv_cache_update(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_get_size (SCM s_0)
{
#define FUNC_NAME "llama-state-get-size"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_state_get_size((llama_context const *)arg1);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_state_size (SCM s_0)
{
#define FUNC_NAME "llama-get-state-size"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_get_state_size((llama_context const *)arg1);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_get_data (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-state-get-data"
  llama_context *arg1 = (llama_context *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (uint8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_uint8_t, 2, 0);
  }
  result = llama_state_get_data(arg1,arg2);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_copy_state_data (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-copy-state-data"
  llama_context *arg1 = (llama_context *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (uint8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_uint8_t, 2, 0);
  }
  result = llama_copy_state_data(arg1,arg2);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_set_data (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-state-set-data"
  llama_context *arg1 = (llama_context *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (uint8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_uint8_t, 2, 0);
  }
  result = llama_state_set_data(arg1,(uint8_t const *)arg2);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_set_state_data (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-set-state-data"
  llama_context *arg1 = (llama_context *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (uint8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_uint8_t, 2, 0);
  }
  result = llama_set_state_data(arg1,(uint8_t const *)arg2);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_load_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-state-load-file"
  llama_context *arg1 = (llama_context *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_token *arg3 = (llama_token *) 0 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (llama_token *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  {
    arg5 = (size_t *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_size_t, 5, 0);
  }
  result = (bool)llama_state_load_file(arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4),arg5);
  {
    gswig_result = scm_from_bool(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_load_session_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-load-session-file"
  llama_context *arg1 = (llama_context *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_token *arg3 = (llama_token *) 0 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (llama_token *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  {
    arg5 = (size_t *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_size_t, 5, 0);
  }
  result = (bool)llama_load_session_file(arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4),arg5);
  {
    gswig_result = scm_from_bool(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_save_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-state-save-file"
  llama_context *arg1 = (llama_context *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_token *arg3 = (llama_token *) 0 ;
  size_t arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (llama_token *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  result = (bool)llama_state_save_file(arg1,(char const *)arg2,(int32_t const *)arg3,SWIG_STD_MOVE(arg4));
  {
    gswig_result = scm_from_bool(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_save_session_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-save-session-file"
  llama_context *arg1 = (llama_context *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_token *arg3 = (llama_token *) 0 ;
  size_t arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (llama_token *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  result = (bool)llama_save_session_file(arg1,(char const *)arg2,(int32_t const *)arg3,SWIG_STD_MOVE(arg4));
  {
    gswig_result = scm_from_bool(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_seq_get_size (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-state-seq-get-size"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = llama_state_seq_get_size(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_seq_get_data (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-state-seq-get-data"
  llama_context *arg1 = (llama_context *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  llama_seq_id arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (uint8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_uint8_t, 2, 0);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  result = llama_state_seq_get_data(arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_seq_set_data (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-state-seq-set-data"
  llama_context *arg1 = (llama_context *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  llama_seq_id arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (uint8_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_uint8_t, 2, 0);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  result = llama_state_seq_set_data(arg1,(uint8_t const *)arg2,SWIG_STD_MOVE(arg3));
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_seq_save_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-state-seq-save-file"
  llama_context *arg1 = (llama_context *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_seq_id arg3 ;
  llama_token *arg4 = (llama_token *) 0 ;
  size_t arg5 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = (llama_token *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_int32_t, 4, 0);
  }
  {
    arg5 = scm_to_size_t(s_4);
  }
  result = llama_state_seq_save_file(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3),(int32_t const *)arg4,SWIG_STD_MOVE(arg5));
  {
    gswig_result = scm_from_size_t(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_state_seq_load_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "llama-state-seq-load-file"
  llama_context *arg1 = (llama_context *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_seq_id arg3 ;
  llama_token *arg4 = (llama_token *) 0 ;
  size_t arg5 ;
  size_t *arg6 = (size_t *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = (llama_token *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_int32_t, 4, 0);
  }
  {
    arg5 = scm_to_size_t(s_4);
  }
  {
    arg6 = (size_t *)SWIG_MustGetPtr(s_5, SWIGTYPE_p_size_t, 6, 0);
  }
  result = llama_state_seq_load_file(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5),arg6);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_get_one (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-batch-get-one"
  llama_token *arg1 = (llama_token *) 0 ;
  int32_t arg2 ;
  llama_pos arg3 ;
  llama_seq_id arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_batch result;
  
  {
    arg1 = (llama_token *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_int32_t, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = scm_to_int32(s_3);
  }
  result = llama_batch_get_one(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  {
    llama_batch * resultptr;
    resultptr = new llama_batch(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_batch, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_init (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-batch-init"
  int32_t arg1 ;
  int32_t arg2 ;
  int32_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_batch result;
  
  {
    arg1 = scm_to_int32(s_0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  result = llama_batch_init(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    llama_batch * resultptr;
    resultptr = new llama_batch(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_batch, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_free (SCM s_0)
{
#define FUNC_NAME "llama-batch-free"
  llama_batch arg1 ;
  llama_batch *argp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    argp1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
    if (!argp1) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""1" " of type '" "llama_batch" "'", SCM_EOL); 
    }
    arg1 = *argp1;
  }
  llama_batch_free(SWIG_STD_MOVE(arg1));
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_decode (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-decode"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_batch arg2 ;
  llama_batch *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    argp2 = (llama_batch *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_batch, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "llama_batch" "'", SCM_EOL); 
    }
    arg2 = *argp2;
  }
  result = llama_decode(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_set_n_threads (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-set-n-threads"
  llama_context *arg1 = (llama_context *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  {
    arg3 = scm_to_uint32(s_2);
  }
  llama_set_n_threads(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_set_causal_attn (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-set-causal-attn"
  llama_context *arg1 = (llama_context *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  llama_set_causal_attn(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_set_abort_callback (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-set-abort-callback"
  llama_context *arg1 = (llama_context *) 0 ;
  ggml_abort_callback arg2 ;
  void *arg3 = (void *) 0 ;
  ggml_abort_callback *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    argp2 = (ggml_abort_callback *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_ggml_abort_callback, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "ggml_abort_callback" "'", SCM_EOL); 
    }
    arg2 = *argp2;
  }
  {
    arg3 = (void *)SWIG_MustGetPtr(s_2, NULL, 3, 0);
  }
  llama_set_abort_callback(arg1,SWIG_STD_MOVE(arg2),arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_synchronize (SCM s_0)
{
#define FUNC_NAME "llama-synchronize"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_synchronize(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_logits (SCM s_0)
{
#define FUNC_NAME "llama-get-logits"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = (float *)llama_get_logits(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_logits_ith (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-get-logits-ith"
  llama_context *arg1 = (llama_context *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (float *)llama_get_logits_ith(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_embeddings (SCM s_0)
{
#define FUNC_NAME "llama-get-embeddings"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = (float *)llama_get_embeddings(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_embeddings_ith (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-get-embeddings-ith"
  llama_context *arg1 = (llama_context *) 0 ;
  int32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (float *)llama_get_embeddings_ith(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_embeddings_seq (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-get-embeddings-seq"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_seq_id arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float *result = 0 ;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (float *)llama_get_embeddings_seq(arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_float, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_get_text (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-get-text"
  llama_model *arg1 = (llama_model *) 0 ;
  llama_token arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  char *result = 0 ;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (char *)llama_token_get_text((llama_model const *)arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = SWIG_str02scm((const char *)result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_get_score (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-get-score"
  llama_model *arg1 = (llama_model *) 0 ;
  llama_token arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (float)llama_token_get_score((llama_model const *)arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_get_type (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-get-type"
  llama_model *arg1 = (llama_model *) 0 ;
  llama_token arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  enum llama_token_type result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (enum llama_token_type)llama_token_get_type((llama_model const *)arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_long((int)result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_is_eog (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-is-eog"
  llama_model *arg1 = (llama_model *) 0 ;
  llama_token arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  result = (bool)llama_token_is_eog((llama_model const *)arg1,SWIG_STD_MOVE(arg2));
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_bos (SCM s_0)
{
#define FUNC_NAME "llama-token-bos"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_bos((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_eos (SCM s_0)
{
#define FUNC_NAME "llama-token-eos"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_eos((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_cls (SCM s_0)
{
#define FUNC_NAME "llama-token-cls"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_cls((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_sep (SCM s_0)
{
#define FUNC_NAME "llama-token-sep"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_sep((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_nl (SCM s_0)
{
#define FUNC_NAME "llama-token-nl"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_nl((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_add_bos_token (SCM s_0)
{
#define FUNC_NAME "llama-add-bos-token"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_add_bos_token((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_add_eos_token (SCM s_0)
{
#define FUNC_NAME "llama-add-eos-token"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_add_eos_token((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_prefix (SCM s_0)
{
#define FUNC_NAME "llama-token-prefix"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_prefix((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_middle (SCM s_0)
{
#define FUNC_NAME "llama-token-middle"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_middle((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_suffix (SCM s_0)
{
#define FUNC_NAME "llama-token-suffix"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_suffix((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_eot (SCM s_0)
{
#define FUNC_NAME "llama-token-eot"
  llama_model *arg1 = (llama_model *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  result = llama_token_eot((llama_model const *)arg1);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_tokenize (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "llama-tokenize"
  llama_model *arg1 = (llama_model *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  llama_token *arg4 = (llama_token *) 0 ;
  int32_t arg5 ;
  bool arg6 ;
  bool arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    size_t temp;
    arg2 = SWIG_Guile_scm2newstr(s_1,&temp);
    arg3 = temp + 1; // for some reason the temp is set to strlen()input) -1, see ./Lib/guile/guile_scm_run.swg
  }
  {
    arg4 = (llama_token *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 4, 0);
  }
  {
    arg5 = scm_to_int32(s_3);
  }
  {
    arg6 = scm_to_bool(s_4);
  }
  {
    arg7 = scm_to_bool(s_5);
  }
  result = llama_tokenize((llama_model const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5),arg6,arg7);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_to_piece (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-token-to-piece"
  llama_model *arg1 = (llama_model *) 0 ;
  llama_token arg2 ;
  char *arg3 = (char *) 0 ;
  int32_t arg4 ;
  bool arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = (char*) SCM_BYTEVECTOR_CONTENTS(s_2);
    arg4 = SCM_BYTEVECTOR_LENGTH(s_2);
  }
  {
    arg5 = scm_to_bool(s_3);
  }
  result = llama_token_to_piece((llama_model const *)arg1,SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4),arg5);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_chat_apply_template (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "llama-chat-apply-template"
  llama_model *arg1 = (llama_model *) 0 ;
  char *arg2 = (char *) 0 ;
  llama_chat_message *arg3 = (llama_chat_message *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  int32_t arg7 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (llama_model *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_model, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (llama_chat_message *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_llama_chat_message, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  {
    arg5 = scm_to_bool(s_4);
  }
  {
    arg6 = (char*) SCM_BYTEVECTOR_CONTENTS(s_5);
    arg7 = SCM_BYTEVECTOR_LENGTH(s_5);
  }
  result = llama_chat_apply_template((llama_model const *)arg1,(char const *)arg2,(llama_chat_message const *)arg3,SWIG_STD_MOVE(arg4),arg5,arg6,SWIG_STD_MOVE(arg7));
  {
    gswig_result = scm_from_int32(result);
  }
  
  if (must_free2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_init (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-grammar-init"
  llama_grammar_element **arg1 = (llama_grammar_element **) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_grammar *result = 0 ;
  
  {
    arg1 = (llama_grammar_element **)SWIG_MustGetPtr(s_0, SWIGTYPE_p_p_llama_grammar_element, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = scm_to_size_t(s_2);
  }
  result = (llama_grammar *)llama_grammar_init((llama_grammar_element const **)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_grammar, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_free (SCM s_0)
{
#define FUNC_NAME "llama-grammar-free"
  llama_grammar *arg1 = (llama_grammar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_grammar *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar, 1, 0);
  }
  llama_grammar_free(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_copy (SCM s_0)
{
#define FUNC_NAME "llama-grammar-copy"
  llama_grammar *arg1 = (llama_grammar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_grammar *result = 0 ;
  
  {
    arg1 = (llama_grammar *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_grammar, 1, 0);
  }
  result = (llama_grammar *)llama_grammar_copy((llama_grammar const *)arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_grammar, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_set_rng_seed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-set-rng-seed"
  llama_context *arg1 = (llama_context *) 0 ;
  uint32_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = scm_to_uint32(s_1);
  }
  llama_set_rng_seed(arg1,SWIG_STD_MOVE(arg2));
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_repetition_penalties (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "llama-sample-repetition-penalties"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  llama_token *arg3 = (llama_token *) 0 ;
  size_t arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (llama_token *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  {
    arg5 = (float) scm_to_double(s_4);
  }
  {
    arg6 = (float) scm_to_double(s_5);
  }
  {
    arg7 = (float) scm_to_double(s_6);
  }
  llama_sample_repetition_penalties(arg1,arg2,(int32_t const *)arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_apply_guidance (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-sample-apply-guidance"
  llama_context *arg1 = (llama_context *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (float *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  {
    arg3 = (float *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_float, 3, 0);
  }
  {
    arg4 = (float) scm_to_double(s_3);
  }
  llama_sample_apply_guidance(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_softmax (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-sample-softmax"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  llama_sample_softmax(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_top_k (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-sample-top-k"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  int32_t arg3 ;
  size_t arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  llama_sample_top_k(arg1,arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_top_p (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-sample-top-p"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  size_t arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  llama_sample_top_p(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_min_p (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-sample-min-p"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  size_t arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  llama_sample_min_p(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_tail_free (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-sample-tail-free"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  size_t arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  llama_sample_tail_free(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_typical (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "llama-sample-typical"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  size_t arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  llama_sample_typical(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_entropy (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-sample-entropy"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = (float) scm_to_double(s_3);
  }
  {
    arg5 = (float) scm_to_double(s_4);
  }
  llama_sample_entropy(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_temp (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-sample-temp"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  llama_sample_temp(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_grammar (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-sample-grammar"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  llama_grammar *arg3 = (llama_grammar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (llama_grammar *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_llama_grammar, 3, 0);
  }
  llama_sample_grammar(arg1,arg2,(llama_grammar const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_token_mirostat (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "llama-sample-token-mirostat"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  float arg4 ;
  int32_t arg5 ;
  float *arg6 = (float *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = (float) scm_to_double(s_3);
  }
  {
    arg5 = scm_to_int32(s_4);
  }
  {
    arg6 = (float *)SWIG_MustGetPtr(s_5, SWIGTYPE_p_float, 6, 0);
  }
  result = llama_sample_token_mirostat(arg1,arg2,arg3,arg4,SWIG_STD_MOVE(arg5),arg6);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_token_mirostat_v2 (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-sample-token-mirostat-v2"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  float arg3 ;
  float arg4 ;
  float *arg5 = (float *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  {
    arg3 = (float) scm_to_double(s_2);
  }
  {
    arg4 = (float) scm_to_double(s_3);
  }
  {
    arg5 = (float *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_float, 5, 0);
  }
  result = llama_sample_token_mirostat_v2(arg1,arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_token_greedy (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-sample-token-greedy"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  result = llama_sample_token_greedy(arg1,arg2);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_sample_token (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-sample-token"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_token_data_array *arg2 = (llama_token_data_array *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_token_data_array *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data_array, 2, 0);
  }
  result = llama_sample_token(arg1,arg2);
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_grammar_accept_token (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-grammar-accept-token"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_grammar *arg2 = (llama_grammar *) 0 ;
  llama_token arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_grammar *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_grammar, 2, 0);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  llama_grammar_accept_token(arg1,arg2,SWIG_STD_MOVE(arg3));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_tokens_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beam-view-tokens-set"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  llama_token *arg2 = (llama_token *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  {
    arg2 = (llama_token *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int32_t, 2, 0);
  }
  if (arg1) (arg1)->tokens = (llama_token const *)arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_tokens_get (SCM s_0)
{
#define FUNC_NAME "llama-beam-view-tokens-get"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token *result = 0 ;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  result = (llama_token *) ((arg1)->tokens);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_n_tokens_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beam-view-n-tokens-set"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  if (arg1) (arg1)->n_tokens = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_n_tokens_get (SCM s_0)
{
#define FUNC_NAME "llama-beam-view-n-tokens-get"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  result =  ((arg1)->n_tokens);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_p_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beam-view-p-set"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  {
    arg2 = (float) scm_to_double(s_1);
  }
  if (arg1) (arg1)->p = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_p_get (SCM s_0)
{
#define FUNC_NAME "llama-beam-view-p-get"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  float result;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  result = (float) ((arg1)->p);
  {
    gswig_result = scm_from_double(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_eob_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beam-view-eob-set"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->eob = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_view_eob_get (SCM s_0)
{
#define FUNC_NAME "llama-beam-view-eob-get"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  result = (bool) ((arg1)->eob);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_beam_view ()
{
#define FUNC_NAME "new-llama-beam-view"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_beam_view *result = 0 ;
  
  result = (llama_beam_view *)new llama_beam_view();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_beam_view, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_beam_view (SCM s_0)
{
#define FUNC_NAME "delete-llama-beam-view"
  llama_beam_view *arg1 = (llama_beam_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beam_view *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beam_view, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_beam_views_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beams-state-beam-views-set"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  llama_beam_view *arg2 = (llama_beam_view *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  {
    arg2 = (llama_beam_view *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_beam_view, 2, 0);
  }
  if (arg1) (arg1)->beam_views = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_beam_views_get (SCM s_0)
{
#define FUNC_NAME "llama-beams-state-beam-views-get"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_beam_view *result = 0 ;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  result = (llama_beam_view *) ((arg1)->beam_views);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_beam_view, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_n_beams_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beams-state-n-beams-set"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  if (arg1) (arg1)->n_beams = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_n_beams_get (SCM s_0)
{
#define FUNC_NAME "llama-beams-state-n-beams-get"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  result =  ((arg1)->n_beams);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_common_prefix_length_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beams-state-common-prefix-length-set"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  size_t arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  if (arg1) (arg1)->common_prefix_length = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_common_prefix_length_get (SCM s_0)
{
#define FUNC_NAME "llama-beams-state-common-prefix-length-get"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  size_t result;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  result =  ((arg1)->common_prefix_length);
  {
    gswig_result = scm_from_size_t(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_last_call_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-beams-state-last-call-set"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  {
    arg2 = scm_to_bool(s_1);
  }
  if (arg1) (arg1)->last_call = arg2;
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beams_state_last_call_get (SCM s_0)
{
#define FUNC_NAME "llama-beams-state-last-call-get"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  result = (bool) ((arg1)->last_call);
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_beams_state ()
{
#define FUNC_NAME "new-llama-beams-state"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_beams_state *result = 0 ;
  
  result = (llama_beams_state *)new llama_beams_state();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_beams_state, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_beams_state (SCM s_0)
{
#define FUNC_NAME "delete-llama-beams-state"
  llama_beams_state *arg1 = (llama_beams_state *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_beams_state *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_beams_state, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_beam_search (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "llama-beam-search"
  llama_context *arg1 = (llama_context *) 0 ;
  llama_beam_search_callback_fn_t arg2 = (llama_beam_search_callback_fn_t) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  int32_t arg5 ;
  int32_t arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  {
    arg2 = (llama_beam_search_callback_fn_t)SWIG_MustGetPtr(s_1, SWIGTYPE_p_f_p_void_llama_beams_state__void, 2, 0);
  }
  {
    arg3 = (void *)SWIG_MustGetPtr(s_2, NULL, 3, 0);
  }
  {
    arg4 = scm_to_size_t(s_3);
  }
  {
    arg5 = scm_to_int32(s_4);
  }
  {
    arg6 = scm_to_int32(s_5);
  }
  llama_beam_search(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_split_path (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-split-path"
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int must_free1 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int result;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_to_int(s_3);
  }
  {
    arg5 = scm_to_int(s_4);
  }
  result = (int)llama_split_path(arg1,SWIG_STD_MOVE(arg2),(char const *)arg3,arg4,arg5);
  {
    gswig_result = scm_from_int(result);
  }
  if (must_free1) SWIG_free(arg1);
  if (must_free3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_split_prefix (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-split-prefix"
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int must_free1 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int result;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_to_size_t(s_1);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_to_int(s_3);
  }
  {
    arg5 = scm_to_int(s_4);
  }
  result = (int)llama_split_prefix(arg1,SWIG_STD_MOVE(arg2),(char const *)arg3,arg4,arg5);
  {
    gswig_result = scm_from_int(result);
  }
  if (must_free1) SWIG_free(arg1);
  if (must_free3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_get_timings (SCM s_0)
{
#define FUNC_NAME "llama-get-timings"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_timings result;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  result = llama_get_timings(arg1);
  {
    llama_timings * resultptr;
    resultptr = new llama_timings(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_timings, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_print_timings (SCM s_0)
{
#define FUNC_NAME "llama-print-timings"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_print_timings(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_reset_timings (SCM s_0)
{
#define FUNC_NAME "llama-reset-timings"
  llama_context *arg1 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (llama_context *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_context, 1, 0);
  }
  llama_reset_timings(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_print_system_info ()
{
#define FUNC_NAME "llama-print-system-info"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  char *result = 0 ;
  
  result = (char *)llama_print_system_info();
  {
    gswig_result = SWIG_str02scm((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_log_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-log-set"
  ggml_log_callback arg1 ;
  void *arg2 = (void *) 0 ;
  ggml_log_callback *argp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    argp1 = (ggml_log_callback *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ggml_log_callback, 1, 0);
    if (!argp1) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""1" " of type '" "ggml_log_callback" "'", SCM_EOL); 
    }
    arg1 = *argp1;
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  llama_log_set(SWIG_STD_MOVE(arg1),arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_dump_timing_info_yaml (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-dump-timing-info-yaml"
  FILE *arg1 = (FILE *) 0 ;
  llama_context *arg2 = (llama_context *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (FILE *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_FILE, 1, 0);
  }
  {
    arg2 = (llama_context *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_context, 2, 0);
  }
  llama_dump_timing_info_yaml(arg1,(llama_context const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_seq_id_vector__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-seq-id-vector"
  unsigned int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_seq_id > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  result = (std::vector< llama_seq_id > *)new std::vector< llama_seq_id >(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_seq_id_vector__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-seq-id-vector"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_seq_id > *result = 0 ;
  
  result = (std::vector< llama_seq_id > *)new std::vector< llama_seq_id >();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_seq_id_vector__SWIG_2 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-seq-id-vector"
  unsigned int arg1 ;
  int32_t *arg2 = 0 ;
  int32_t *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_seq_id > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  {
    argp2 = (int32_t *)SWIG_MustGetPtr(argv[1], SWIGTYPE_p_int32_t, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "int32_t const &" "'", SCM_EOL); 
    }
    arg2 = argp2;
  }
  result = (std::vector< llama_seq_id > *)new std::vector< llama_seq_id >(arg1,(int32_t const &)*arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_seq_id_vector__SWIG_3 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-seq-id-vector"
  std::vector< llama_seq_id > *arg1 = 0 ;
  std::vector< int32_t > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_seq_id > *result = 0 ;
  
  {
    if (scm_is_vector(argv[0])) {
      unsigned long size = scm_c_vector_length(argv[0]);
      temp1 = std::vector< int32_t >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(argv[0],scm_from_ulong(i));
        temp1[i] = *((int32_t*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_int32_t,
            1, 0));
      }
    } else if (scm_is_null(argv[0])) {
      temp1 = std::vector< int32_t >();
      arg1 = &temp1;
    } else if (scm_is_pair(argv[0])) {
      temp1 = std::vector< int32_t >();
      arg1 = &temp1;
      SCM head, tail;
      tail = argv[0];
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp1.push_back(*((int32_t*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_int32_t,
              1, 0)));
      }
    } else {
      arg1 = (std::vector< llama_seq_id > *) SWIG_MustGetPtr(argv[0],SWIGTYPE_p_std__vectorT_llama_seq_id_t,1, 0);
    }
  }
  result = (std::vector< llama_seq_id > *)new std::vector< llama_seq_id >((std::vector< llama_seq_id > const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_seq_id_vector(SCM rest)
{
#define FUNC_NAME "new-llama-seq-id-vector"
  SCM argv[2];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 2, "new-llama-seq-id-vector");
  if (argc == 0) {
    return _wrap_new_llama_seq_id_vector__SWIG_1(argc,argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      return _wrap_new_llama_seq_id_vector__SWIG_0(argc,argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      /* native sequence? */
      if (scm_is_vector(argv[0])) {
        unsigned int size = scm_c_vector_length(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          int32_t* x;
          SCM o = scm_vector_ref(argv[0],scm_from_ulong(0));
          if (SWIG_ConvertPtr(o,(void**) &x,
              SWIGTYPE_p_int32_t, 0) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else if (scm_is_null(argv[0])) {
        /* again, an empty sequence can be of any type */
        _v = 1;
      } else if (scm_is_pair(argv[0])) {
        /* check the first element only */
        int32_t* x;
        SCM head = SCM_CAR(argv[0]);
        if (SWIG_ConvertPtr(head,(void**) &x,
            SWIGTYPE_p_int32_t, 0) != -1)
        _v = 1;
        else
        _v = 0;
      } else {
        /* wrapped vector? */
        std::vector< int32_t >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorT_llama_seq_id_t, 0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_llama_seq_id_vector__SWIG_3(argc,argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      {
        void *ptr;
        int res = SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_int32_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_llama_seq_id_vector__SWIG_2(argc,argv);
      }
    }
  }
  
  scm_misc_error("new-llama-seq-id-vector", "No matching method for generic function `new_llama_seq_id_vector'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_length (SCM s_0)
{
#define FUNC_NAME "llama-seq-id-vector-length"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  std::vector< int32_t > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  unsigned int result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< int32_t >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        temp1[i] = *((int32_t*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_int32_t,
            1, 0));
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< int32_t >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      temp1 = std::vector< int32_t >();
      arg1 = &temp1;
      SCM head, tail;
      tail = s_0;
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp1.push_back(*((int32_t*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_int32_t,
              1, 0)));
      }
    } else {
      arg1 = (std::vector< llama_seq_id > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_llama_seq_id_t,1, 0);
    }
  }
  result = (unsigned int)((std::vector< llama_seq_id > const *)arg1)->size();
  {
    gswig_result = scm_from_ulong(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_emptyq___ (SCM s_0)
{
#define FUNC_NAME "llama-seq-id-vector-empty?"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  std::vector< int32_t > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< int32_t >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        temp1[i] = *((int32_t*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_int32_t,
            1, 0));
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< int32_t >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      temp1 = std::vector< int32_t >();
      arg1 = &temp1;
      SCM head, tail;
      tail = s_0;
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp1.push_back(*((int32_t*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_int32_t,
              1, 0)));
      }
    } else {
      arg1 = (std::vector< llama_seq_id > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_llama_seq_id_t,1, 0);
    }
  }
  result = (bool)((std::vector< llama_seq_id > const *)arg1)->empty();
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_clearN___ (SCM s_0)
{
#define FUNC_NAME "llama-seq-id-vector-clear!"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_seq_id > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1, 0);
  }
  (arg1)->clear();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_pushN___ (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-seq-id-vector-push!"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  int32_t *arg2 = 0 ;
  int32_t *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_seq_id > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1, 0);
  }
  {
    argp2 = (int32_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int32_t, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "int32_t const &" "'", SCM_EOL); 
    }
    arg2 = argp2;
  }
  (arg1)->push_back((int32_t const &)*arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_popN___ (SCM s_0)
{
#define FUNC_NAME "llama-seq-id-vector-pop!"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t result;
  
  {
    arg1 = (std::vector< llama_seq_id > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1, 0);
  }
  try {
    result = std_vector_Sl_llama_seq_id_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = scm_from_int32(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_ref (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-seq-id-vector-ref"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  int32_t *result = 0 ;
  
  {
    arg1 = (std::vector< llama_seq_id > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  try {
    result = (int32_t *) &std_vector_Sl_llama_seq_id_Sg__ref(arg1,arg2);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_int32_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_seq_id_vector_setN___ (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-seq-id-vector-set!"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  int arg2 ;
  int32_t *arg3 = 0 ;
  int32_t *argp3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_seq_id > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  {
    argp3 = (int32_t *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int32_t, 3, 0);
    if (!argp3) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""3" " of type '" "int32_t const &" "'", SCM_EOL); 
    }
    arg3 = argp3;
  }
  try {
    std_vector_Sl_llama_seq_id_Sg__set(arg1,arg2,(int32_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_seq_id_vector (SCM s_0)
{
#define FUNC_NAME "delete-llama-seq-id-vector"
  std::vector< llama_seq_id > *arg1 = (std::vector< llama_seq_id > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_seq_id > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_seq_id_t, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_vector__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-token-data-vector"
  unsigned int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_token_data > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  result = (std::vector< llama_token_data > *)new std::vector< llama_token_data >(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_vector__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-token-data-vector"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_token_data > *result = 0 ;
  
  result = (std::vector< llama_token_data > *)new std::vector< llama_token_data >();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_vector__SWIG_2 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-token-data-vector"
  unsigned int arg1 ;
  llama_token_data *arg2 = 0 ;
  llama_token_data *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_token_data > *result = 0 ;
  
  {
    arg1 = (unsigned int) scm_to_uint(argv[0]);
  }
  {
    argp2 = (llama_token_data *)SWIG_MustGetPtr(argv[1], SWIGTYPE_p_llama_token_data, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "llama_token_data const &" "'", SCM_EOL); 
    }
    arg2 = argp2;
  }
  result = (std::vector< llama_token_data > *)new std::vector< llama_token_data >(arg1,(llama_token_data const &)*arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_vector__SWIG_3 (int argc, SCM *argv)
{
#define FUNC_NAME "new-llama-token-data-vector"
  std::vector< llama_token_data > *arg1 = 0 ;
  std::vector< llama_token_data > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  std::vector< llama_token_data > *result = 0 ;
  
  {
    if (scm_is_vector(argv[0])) {
      unsigned long size = scm_c_vector_length(argv[0]);
      temp1 = std::vector< llama_token_data >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(argv[0],scm_from_ulong(i));
        temp1[i] = *((llama_token_data*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_llama_token_data,
            1, 0));
      }
    } else if (scm_is_null(argv[0])) {
      temp1 = std::vector< llama_token_data >();
      arg1 = &temp1;
    } else if (scm_is_pair(argv[0])) {
      temp1 = std::vector< llama_token_data >();
      arg1 = &temp1;
      SCM head, tail;
      tail = argv[0];
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp1.push_back(*((llama_token_data*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_llama_token_data,
              1, 0)));
      }
    } else {
      arg1 = (std::vector< llama_token_data > *) SWIG_MustGetPtr(argv[0],SWIGTYPE_p_std__vectorT_llama_token_data_t,1, 0);
    }
  }
  result = (std::vector< llama_token_data > *)new std::vector< llama_token_data >((std::vector< llama_token_data > const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_llama_token_data_vector(SCM rest)
{
#define FUNC_NAME "new-llama-token-data-vector"
  SCM argv[2];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 2, "new-llama-token-data-vector");
  if (argc == 0) {
    return _wrap_new_llama_token_data_vector__SWIG_1(argc,argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      return _wrap_new_llama_token_data_vector__SWIG_0(argc,argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      /* native sequence? */
      if (scm_is_vector(argv[0])) {
        unsigned int size = scm_c_vector_length(argv[0]);
        if (size == 0) {
          /* an empty sequence can be of any type */
          _v = 1;
        } else {
          /* check the first element only */
          llama_token_data* x;
          SCM o = scm_vector_ref(argv[0],scm_from_ulong(0));
          if (SWIG_ConvertPtr(o,(void**) &x,
              SWIGTYPE_p_llama_token_data, 0) != -1)
          _v = 1;
          else
          _v = 0;
        }
      } else if (scm_is_null(argv[0])) {
        /* again, an empty sequence can be of any type */
        _v = 1;
      } else if (scm_is_pair(argv[0])) {
        /* check the first element only */
        llama_token_data* x;
        SCM head = SCM_CAR(argv[0]);
        if (SWIG_ConvertPtr(head,(void**) &x,
            SWIGTYPE_p_llama_token_data, 0) != -1)
        _v = 1;
        else
        _v = 0;
      } else {
        /* wrapped vector? */
        std::vector< llama_token_data >* v;
        if (SWIG_ConvertPtr(argv[0],(void **) &v, 
            SWIGTYPE_p_std__vectorT_llama_token_data_t, 0) != -1)
        _v = 1;
        else
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_llama_token_data_vector__SWIG_3(argc,argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = scm_is_true(scm_integer_p(argv[0])) && scm_is_true(scm_exact_p(argv[0]))? 1 : 0;
    }
    if (_v) {
      {
        void *ptr;
        int res = SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_llama_token_data, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_llama_token_data_vector__SWIG_2(argc,argv);
      }
    }
  }
  
  scm_misc_error("new-llama-token-data-vector", "No matching method for generic function `new_llama_token_data_vector'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_length (SCM s_0)
{
#define FUNC_NAME "llama-token-data-vector-length"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  std::vector< llama_token_data > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  unsigned int result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< llama_token_data >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        temp1[i] = *((llama_token_data*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_llama_token_data,
            1, 0));
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< llama_token_data >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      temp1 = std::vector< llama_token_data >();
      arg1 = &temp1;
      SCM head, tail;
      tail = s_0;
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp1.push_back(*((llama_token_data*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_llama_token_data,
              1, 0)));
      }
    } else {
      arg1 = (std::vector< llama_token_data > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_llama_token_data_t,1, 0);
    }
  }
  result = (unsigned int)((std::vector< llama_token_data > const *)arg1)->size();
  {
    gswig_result = scm_from_ulong(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_emptyq___ (SCM s_0)
{
#define FUNC_NAME "llama-token-data-vector-empty?"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  std::vector< llama_token_data > temp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  bool result;
  
  {
    if (scm_is_vector(s_0)) {
      unsigned long size = scm_c_vector_length(s_0);
      temp1 = std::vector< llama_token_data >(size);
      arg1 = &temp1;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_0,scm_from_ulong(i));
        temp1[i] = *((llama_token_data*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_llama_token_data,
            1, 0));
      }
    } else if (scm_is_null(s_0)) {
      temp1 = std::vector< llama_token_data >();
      arg1 = &temp1;
    } else if (scm_is_pair(s_0)) {
      temp1 = std::vector< llama_token_data >();
      arg1 = &temp1;
      SCM head, tail;
      tail = s_0;
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp1.push_back(*((llama_token_data*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_llama_token_data,
              1, 0)));
      }
    } else {
      arg1 = (std::vector< llama_token_data > *) SWIG_MustGetPtr(s_0,SWIGTYPE_p_std__vectorT_llama_token_data_t,1, 0);
    }
  }
  result = (bool)((std::vector< llama_token_data > const *)arg1)->empty();
  {
    gswig_result = scm_from_bool(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_clearN___ (SCM s_0)
{
#define FUNC_NAME "llama-token-data-vector-clear!"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
  }
  (arg1)->clear();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_pushN___ (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-vector-push!"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  llama_token_data *arg2 = 0 ;
  llama_token_data *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
  }
  {
    argp2 = (llama_token_data *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_llama_token_data, 2, 0);
    if (!argp2) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""2" " of type '" "llama_token_data const &" "'", SCM_EOL); 
    }
    arg2 = argp2;
  }
  (arg1)->push_back((llama_token_data const &)*arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_popN___ (SCM s_0)
{
#define FUNC_NAME "llama-token-data-vector-pop!"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data result;
  
  {
    arg1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
  }
  try {
    result = std_vector_Sl_llama_token_data_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    llama_token_data * resultptr;
    resultptr = new llama_token_data(result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_llama_token_data, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_ref (SCM s_0, SCM s_1)
{
#define FUNC_NAME "llama-token-data-vector-ref"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data *result = 0 ;
  
  {
    arg1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  try {
    result = (llama_token_data *) &std_vector_Sl_llama_token_data_Sg__ref(arg1,arg2);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_setN___ (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "llama-token-data-vector-set!"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  int arg2 ;
  llama_token_data *arg3 = 0 ;
  llama_token_data *argp3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
  }
  {
    arg2 = scm_to_int(s_1);
  }
  {
    argp3 = (llama_token_data *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_llama_token_data, 3, 0);
    if (!argp3) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""3" " of type '" "llama_token_data const &" "'", SCM_EOL); 
    }
    arg3 = argp3;
  }
  try {
    std_vector_Sl_llama_token_data_Sg__set(arg1,arg2,(llama_token_data const &)*arg3);
  } catch(std::out_of_range &_e) {
    {
      std::out_of_range * temp = new std::out_of_range(_e);
      scm_throw(scm_from_locale_symbol("swig-exception"),
        scm_list_n(SWIG_NewPointerObj(temp, SWIGTYPE_p_std__out_of_range, 1),
          SCM_UNDEFINED));
    }
  }
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_llama_token_data_vector (SCM s_0)
{
#define FUNC_NAME "delete-llama-token-data-vector"
  std::vector< llama_token_data > *arg1 = (std::vector< llama_token_data > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
  }
  delete arg1;
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_batch_add (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "llama-batch-add"
  llama_batch *arg1 = 0 ;
  llama_token arg2 ;
  llama_pos arg3 ;
  std::vector< llama_seq_id > *arg4 = 0 ;
  bool arg5 ;
  llama_batch *argp1 ;
  std::vector< int32_t > temp4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    argp1 = (llama_batch *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_llama_batch, 1, 0);
    if (!argp1) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""1" " of type '" "llama_batch &" "'", SCM_EOL); 
    }
    arg1 = argp1;
  }
  {
    arg2 = scm_to_int32(s_1);
  }
  {
    arg3 = scm_to_int32(s_2);
  }
  {
    if (scm_is_vector(s_3)) {
      unsigned long size = scm_c_vector_length(s_3);
      temp4 = std::vector< int32_t >(size);
      arg4 = &temp4;
      for (unsigned long i=0; i<size; i++) {
        SCM o = scm_vector_ref(s_3,scm_from_ulong(i));
        temp4[i] = *((int32_t*) SWIG_MustGetPtr(o,
            SWIGTYPE_p_int32_t,
            4, 0));
      }
    } else if (scm_is_null(s_3)) {
      temp4 = std::vector< int32_t >();
      arg4 = &temp4;
    } else if (scm_is_pair(s_3)) {
      temp4 = std::vector< int32_t >();
      arg4 = &temp4;
      SCM head, tail;
      tail = s_3;
      while (!scm_is_null(tail)) {
        head = SCM_CAR(tail);
        tail = SCM_CDR(tail);
        temp4.push_back(*((int32_t*) SWIG_MustGetPtr(head,
              SWIGTYPE_p_int32_t,
              4, 0)));
      }
    } else {
      arg4 = (std::vector< llama_seq_id > *) SWIG_MustGetPtr(s_3,SWIGTYPE_p_std__vectorT_llama_seq_id_t,4, 0);
    }
  }
  {
    arg5 = scm_to_bool(s_4);
  }
  llama_batch_add(*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< int32_t > const &)*arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_llama_token_data_vector_data (SCM s_0)
{
#define FUNC_NAME "llama-token-data-vector-data"
  std::vector< llama_token_data > *arg1 = 0 ;
  std::vector< llama_token_data > *argp1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  llama_token_data *result = 0 ;
  
  {
    argp1 = (std::vector< llama_token_data > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorT_llama_token_data_t, 1, 0);
    if (!argp1) {
      scm_misc_error(FUNC_NAME, "invalid null reference for argument ""1" " of type '" "std::vector< llama_token_data > &" "'", SCM_EOL); 
    }
    arg1 = argp1;
  }
  result = (llama_token_data *)llama_token_data_vector_data(*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_llama_token_data, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


#ifdef __cplusplus
extern "C" {
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_bool_arrayTo_p_bool(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bool *)  ((bool_array *) x));
}
static void *_p_double_t_arrayTo_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double *)  ((double_t_array *) x));
}
static void *_p_f_float_p_void__bool_arrayTo_p_f_float_p_void__bool(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bool (*)(float,void *))  ((bool_array (*)(float,void *)) x));
}
static void *_p_float_arrayTo_p_float(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((float *)  ((float_array *) x));
}
static void *_p_int16_arrayTo_p_int16_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int16_t *)  ((int16_array *) x));
}
static void *_p_int32_arrayTo_p_int32_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int32_t *)  ((int32_array *) x));
}
static void *_p_int64_arrayTo_p_int64_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int64_t *)  ((int64_array *) x));
}
static void *_p_int8_arrayTo_p_int8_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int8_t *)  ((int8_array *) x));
}
static void *_p_llama_token_data_carrayTo_p_llama_token_data(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((llama_token_data *)  ((llama_token_data_carray *) x));
}
static void *_p_p_int32_arrayTo_p_p_int32_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int32_t **)  ((int32_array **) x));
}
static void *_p_size_t_arrayTo_p_size_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((size_t *)  ((size_t_array *) x));
}
static void *_p_uint16_arrayTo_p_uint16_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uint16_t *)  ((uint16_array *) x));
}
static void *_p_uint32_arrayTo_p_uint32_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uint32_t *)  ((uint32_array *) x));
}
static void *_p_uint64_arrayTo_p_uint64_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uint64_t *)  ((uint64_array *) x));
}
static void *_p_uint8_arrayTo_p_uint8_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uint8_t *)  ((uint8_array *) x));
}
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool_array = {"_p_bool_array", "bool_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double_t_array = {"_p_double_t_array", "double_t_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float_p_void__bool = {"_p_f_float_p_void__bool", "llama_progress_callback|bool (*)(float,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float_p_void__bool_array = {"_p_f_float_p_void__bool_array", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_void_llama_beams_state__void = {"_p_f_p_void_llama_beams_state__void", "llama_beam_search_callback_fn_t|void (*)(void *,llama_beams_state)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float_array = {"_p_float_array", "float_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ggml_abort_callback = {"_p_ggml_abort_callback", "ggml_abort_callback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ggml_backend_sched_eval_callback = {"_p_ggml_backend_sched_eval_callback", "ggml_backend_sched_eval_callback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ggml_log_callback = {"_p_ggml_log_callback", "ggml_log_callback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ggml_tensor = {"_p_ggml_tensor", "ggml_tensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_array = {"_p_int16_array", "int16_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_array = {"_p_int32_array", "int32_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "llama_pos *|llama_seq_id *|llama_token *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_array = {"_p_int64_array", "int64_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_array = {"_p_int8_array", "int8_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_batch = {"_p_llama_batch", "llama_batch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_beam_view = {"_p_llama_beam_view", "llama_beam_view *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_beams_state = {"_p_llama_beams_state", "llama_beams_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_chat_message = {"_p_llama_chat_message", "llama_chat_message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_context = {"_p_llama_context", "llama_context *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_context_params = {"_p_llama_context_params", "llama_context_params *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_grammar = {"_p_llama_grammar", "llama_grammar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_grammar_element = {"_p_llama_grammar_element", "llama_grammar_element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_kv_cache_view = {"_p_llama_kv_cache_view", "llama_kv_cache_view *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_kv_cache_view_cell = {"_p_llama_kv_cache_view_cell", "llama_kv_cache_view_cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_model = {"_p_llama_model", "llama_model *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_model_kv_override = {"_p_llama_model_kv_override", "llama_model_kv_override *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_model_params = {"_p_llama_model_params", "llama_model_params *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_model_quantize_params = {"_p_llama_model_quantize_params", "llama_model_quantize_params *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_timings = {"_p_llama_timings", "llama_timings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_token_array = {"_p_llama_token_array", "llama_token_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_token_data = {"_p_llama_token_data", "llama_token_data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_token_data_array = {"_p_llama_token_data_array", "llama_token_data_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_llama_token_data_carray = {"_p_llama_token_data_carray", "llama_token_data_carray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int32_t = {"_p_p_int32_t", "llama_seq_id **|int32_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int32_array = {"_p_p_int32_array", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_llama_grammar_element = {"_p_p_llama_grammar_element", "llama_grammar_element **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t_array = {"_p_size_t_array", "size_t_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_llama_seq_id_t = {"_p_std__vectorT_llama_seq_id_t", "std::vector< llama_seq_id > *|std::vector< int32_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_llama_token_data_t = {"_p_std__vectorT_llama_token_data_t", "std::vector< llama_token_data > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_array = {"_p_uint16_array", "uint16_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_array = {"_p_uint32_array", "uint32_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_array = {"_p_uint64_array", "uint64_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_array = {"_p_uint8_array", "uint8_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "SCM *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_bool,
  &_swigt__p_bool_array,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_double_t_array,
  &_swigt__p_f_float_p_void__bool,
  &_swigt__p_f_float_p_void__bool_array,
  &_swigt__p_f_p_void_llama_beams_state__void,
  &_swigt__p_float,
  &_swigt__p_float_array,
  &_swigt__p_ggml_abort_callback,
  &_swigt__p_ggml_backend_sched_eval_callback,
  &_swigt__p_ggml_log_callback,
  &_swigt__p_ggml_tensor,
  &_swigt__p_int16_array,
  &_swigt__p_int16_t,
  &_swigt__p_int32_array,
  &_swigt__p_int32_t,
  &_swigt__p_int64_array,
  &_swigt__p_int64_t,
  &_swigt__p_int8_array,
  &_swigt__p_int8_t,
  &_swigt__p_llama_batch,
  &_swigt__p_llama_beam_view,
  &_swigt__p_llama_beams_state,
  &_swigt__p_llama_chat_message,
  &_swigt__p_llama_context,
  &_swigt__p_llama_context_params,
  &_swigt__p_llama_grammar,
  &_swigt__p_llama_grammar_element,
  &_swigt__p_llama_kv_cache_view,
  &_swigt__p_llama_kv_cache_view_cell,
  &_swigt__p_llama_model,
  &_swigt__p_llama_model_kv_override,
  &_swigt__p_llama_model_params,
  &_swigt__p_llama_model_quantize_params,
  &_swigt__p_llama_timings,
  &_swigt__p_llama_token_array,
  &_swigt__p_llama_token_data,
  &_swigt__p_llama_token_data_array,
  &_swigt__p_llama_token_data_carray,
  &_swigt__p_p_int32_array,
  &_swigt__p_p_int32_t,
  &_swigt__p_p_llama_grammar_element,
  &_swigt__p_size_t,
  &_swigt__p_size_t_array,
  &_swigt__p_size_type,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_llama_seq_id_t,
  &_swigt__p_std__vectorT_llama_token_data_t,
  &_swigt__p_uint16_array,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_array,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_array,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_array,
  &_swigt__p_uint8_t,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},  {&_swigt__p_bool_array, _p_bool_arrayTo_p_bool, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool_array[] = {  {&_swigt__p_bool_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},  {&_swigt__p_double_t_array, _p_double_t_arrayTo_p_double, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double_t_array[] = {  {&_swigt__p_double_t_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float_p_void__bool_array[] = {{&_swigt__p_f_float_p_void__bool_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float_p_void__bool[] = {  {&_swigt__p_f_float_p_void__bool, 0, 0, 0},  {&_swigt__p_f_float_p_void__bool_array, _p_f_float_p_void__bool_arrayTo_p_f_float_p_void__bool, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_llama_beams_state__void[] = {  {&_swigt__p_f_p_void_llama_beams_state__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},  {&_swigt__p_float_array, _p_float_arrayTo_p_float, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float_array[] = {  {&_swigt__p_float_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ggml_abort_callback[] = {  {&_swigt__p_ggml_abort_callback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ggml_backend_sched_eval_callback[] = {  {&_swigt__p_ggml_backend_sched_eval_callback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ggml_log_callback[] = {  {&_swigt__p_ggml_log_callback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ggml_tensor[] = {  {&_swigt__p_ggml_tensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_array[] = {  {&_swigt__p_int16_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},  {&_swigt__p_int16_array, _p_int16_arrayTo_p_int16_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_array[] = {  {&_swigt__p_int32_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},  {&_swigt__p_int32_array, _p_int32_arrayTo_p_int32_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_array[] = {  {&_swigt__p_int64_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},  {&_swigt__p_int64_array, _p_int64_arrayTo_p_int64_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_array[] = {  {&_swigt__p_int8_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},  {&_swigt__p_int8_array, _p_int8_arrayTo_p_int8_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_batch[] = {  {&_swigt__p_llama_batch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_beam_view[] = {  {&_swigt__p_llama_beam_view, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_beams_state[] = {  {&_swigt__p_llama_beams_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_chat_message[] = {  {&_swigt__p_llama_chat_message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_context[] = {  {&_swigt__p_llama_context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_context_params[] = {  {&_swigt__p_llama_context_params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_grammar[] = {  {&_swigt__p_llama_grammar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_grammar_element[] = {  {&_swigt__p_llama_grammar_element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_kv_cache_view[] = {  {&_swigt__p_llama_kv_cache_view, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_kv_cache_view_cell[] = {  {&_swigt__p_llama_kv_cache_view_cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_model[] = {  {&_swigt__p_llama_model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_model_kv_override[] = {  {&_swigt__p_llama_model_kv_override, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_model_params[] = {  {&_swigt__p_llama_model_params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_model_quantize_params[] = {  {&_swigt__p_llama_model_quantize_params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_timings[] = {  {&_swigt__p_llama_timings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_token_array[] = {  {&_swigt__p_llama_token_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_token_data[] = {  {&_swigt__p_llama_token_data, 0, 0, 0},  {&_swigt__p_llama_token_data_carray, _p_llama_token_data_carrayTo_p_llama_token_data, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_token_data_array[] = {  {&_swigt__p_llama_token_data_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_llama_token_data_carray[] = {  {&_swigt__p_llama_token_data_carray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int32_array[] = {{&_swigt__p_p_int32_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int32_t[] = {  {&_swigt__p_p_int32_t, 0, 0, 0},  {&_swigt__p_p_int32_array, _p_p_int32_arrayTo_p_p_int32_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_llama_grammar_element[] = {  {&_swigt__p_p_llama_grammar_element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},  {&_swigt__p_size_t_array, _p_size_t_arrayTo_p_size_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t_array[] = {  {&_swigt__p_size_t_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_llama_seq_id_t[] = {  {&_swigt__p_std__vectorT_llama_seq_id_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_llama_token_data_t[] = {  {&_swigt__p_std__vectorT_llama_token_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_array[] = {  {&_swigt__p_uint16_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},  {&_swigt__p_uint16_array, _p_uint16_arrayTo_p_uint16_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_array[] = {  {&_swigt__p_uint32_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},  {&_swigt__p_uint32_array, _p_uint32_arrayTo_p_uint32_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_array[] = {  {&_swigt__p_uint64_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},  {&_swigt__p_uint64_array, _p_uint64_arrayTo_p_uint64_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_array[] = {  {&_swigt__p_uint8_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},  {&_swigt__p_uint8_array, _p_uint8_arrayTo_p_uint8_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_bool,
  _swigc__p_bool_array,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_double_t_array,
  _swigc__p_f_float_p_void__bool,
  _swigc__p_f_float_p_void__bool_array,
  _swigc__p_f_p_void_llama_beams_state__void,
  _swigc__p_float,
  _swigc__p_float_array,
  _swigc__p_ggml_abort_callback,
  _swigc__p_ggml_backend_sched_eval_callback,
  _swigc__p_ggml_log_callback,
  _swigc__p_ggml_tensor,
  _swigc__p_int16_array,
  _swigc__p_int16_t,
  _swigc__p_int32_array,
  _swigc__p_int32_t,
  _swigc__p_int64_array,
  _swigc__p_int64_t,
  _swigc__p_int8_array,
  _swigc__p_int8_t,
  _swigc__p_llama_batch,
  _swigc__p_llama_beam_view,
  _swigc__p_llama_beams_state,
  _swigc__p_llama_chat_message,
  _swigc__p_llama_context,
  _swigc__p_llama_context_params,
  _swigc__p_llama_grammar,
  _swigc__p_llama_grammar_element,
  _swigc__p_llama_kv_cache_view,
  _swigc__p_llama_kv_cache_view_cell,
  _swigc__p_llama_model,
  _swigc__p_llama_model_kv_override,
  _swigc__p_llama_model_params,
  _swigc__p_llama_model_quantize_params,
  _swigc__p_llama_timings,
  _swigc__p_llama_token_array,
  _swigc__p_llama_token_data,
  _swigc__p_llama_token_data_array,
  _swigc__p_llama_token_data_carray,
  _swigc__p_p_int32_array,
  _swigc__p_p_int32_t,
  _swigc__p_p_llama_grammar_element,
  _swigc__p_size_t,
  _swigc__p_size_t_array,
  _swigc__p_size_type,
  _swigc__p_std__out_of_range,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_llama_seq_id_t,
  _swigc__p_std__vectorT_llama_token_data_t,
  _swigc__p_uint16_array,
  _swigc__p_uint16_t,
  _swigc__p_uint32_array,
  _swigc__p_uint32_t,
  _swigc__p_uint64_array,
  _swigc__p_uint64_t,
  _swigc__p_uint8_array,
  _swigc__p_uint8_t,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


SWIG_GUILE_INIT_STATIC void
SWIG_init(void)
{
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  
  SWIG_TypeClientData(SWIGTYPE_p_int8_array, (void *) &_swig_guile_clientdataint8_array);
  scm_c_define_gsubr("new-int8-array", 1, 0, 0, (swig_guile_proc) _wrap_new_int8_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_int8_array->clientdata))->destroy = (guile_destructor) _wrap_delete_int8_array;
  scm_c_define_gsubr("delete-int8-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_int8_array);
  scm_c_define_gsubr("int8-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_int8_array_getitem);
  scm_c_define_gsubr("int8-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_int8_array_setitem);
  scm_c_define_gsubr("int8-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_int8_array_cast);
  scm_c_define_gsubr("int8-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_int8_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_uint8_array, (void *) &_swig_guile_clientdatauint8_array);
  scm_c_define_gsubr("new-uint8-array", 1, 0, 0, (swig_guile_proc) _wrap_new_uint8_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_uint8_array->clientdata))->destroy = (guile_destructor) _wrap_delete_uint8_array;
  scm_c_define_gsubr("delete-uint8-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_uint8_array);
  scm_c_define_gsubr("uint8-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_uint8_array_getitem);
  scm_c_define_gsubr("uint8-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_uint8_array_setitem);
  scm_c_define_gsubr("uint8-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_uint8_array_cast);
  scm_c_define_gsubr("uint8-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_uint8_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_int16_array, (void *) &_swig_guile_clientdataint16_array);
  scm_c_define_gsubr("new-int16-array", 1, 0, 0, (swig_guile_proc) _wrap_new_int16_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_int16_array->clientdata))->destroy = (guile_destructor) _wrap_delete_int16_array;
  scm_c_define_gsubr("delete-int16-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_int16_array);
  scm_c_define_gsubr("int16-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_int16_array_getitem);
  scm_c_define_gsubr("int16-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_int16_array_setitem);
  scm_c_define_gsubr("int16-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_int16_array_cast);
  scm_c_define_gsubr("int16-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_int16_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_uint16_array, (void *) &_swig_guile_clientdatauint16_array);
  scm_c_define_gsubr("new-uint16-array", 1, 0, 0, (swig_guile_proc) _wrap_new_uint16_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_uint16_array->clientdata))->destroy = (guile_destructor) _wrap_delete_uint16_array;
  scm_c_define_gsubr("delete-uint16-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_uint16_array);
  scm_c_define_gsubr("uint16-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_uint16_array_getitem);
  scm_c_define_gsubr("uint16-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_uint16_array_setitem);
  scm_c_define_gsubr("uint16-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_uint16_array_cast);
  scm_c_define_gsubr("uint16-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_uint16_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_int32_array, (void *) &_swig_guile_clientdataint32_array);
  scm_c_define_gsubr("new-int32-array", 1, 0, 0, (swig_guile_proc) _wrap_new_int32_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_int32_array->clientdata))->destroy = (guile_destructor) _wrap_delete_int32_array;
  scm_c_define_gsubr("delete-int32-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_int32_array);
  scm_c_define_gsubr("int32-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_int32_array_getitem);
  scm_c_define_gsubr("int32-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_int32_array_setitem);
  scm_c_define_gsubr("int32-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_int32_array_cast);
  scm_c_define_gsubr("int32-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_int32_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_uint32_array, (void *) &_swig_guile_clientdatauint32_array);
  scm_c_define_gsubr("new-uint32-array", 1, 0, 0, (swig_guile_proc) _wrap_new_uint32_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_uint32_array->clientdata))->destroy = (guile_destructor) _wrap_delete_uint32_array;
  scm_c_define_gsubr("delete-uint32-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_uint32_array);
  scm_c_define_gsubr("uint32-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_uint32_array_getitem);
  scm_c_define_gsubr("uint32-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_uint32_array_setitem);
  scm_c_define_gsubr("uint32-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_uint32_array_cast);
  scm_c_define_gsubr("uint32-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_uint32_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_int64_array, (void *) &_swig_guile_clientdataint64_array);
  scm_c_define_gsubr("new-int64-array", 1, 0, 0, (swig_guile_proc) _wrap_new_int64_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_int64_array->clientdata))->destroy = (guile_destructor) _wrap_delete_int64_array;
  scm_c_define_gsubr("delete-int64-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_int64_array);
  scm_c_define_gsubr("int64-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_int64_array_getitem);
  scm_c_define_gsubr("int64-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_int64_array_setitem);
  scm_c_define_gsubr("int64-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_int64_array_cast);
  scm_c_define_gsubr("int64-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_int64_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_uint64_array, (void *) &_swig_guile_clientdatauint64_array);
  scm_c_define_gsubr("new-uint64-array", 1, 0, 0, (swig_guile_proc) _wrap_new_uint64_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_uint64_array->clientdata))->destroy = (guile_destructor) _wrap_delete_uint64_array;
  scm_c_define_gsubr("delete-uint64-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_uint64_array);
  scm_c_define_gsubr("uint64-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_uint64_array_getitem);
  scm_c_define_gsubr("uint64-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_uint64_array_setitem);
  scm_c_define_gsubr("uint64-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_uint64_array_cast);
  scm_c_define_gsubr("uint64-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_uint64_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_size_t_array, (void *) &_swig_guile_clientdatasize_t_array);
  scm_c_define_gsubr("new-size-t-array", 1, 0, 0, (swig_guile_proc) _wrap_new_size_t_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_size_t_array->clientdata))->destroy = (guile_destructor) _wrap_delete_size_t_array;
  scm_c_define_gsubr("delete-size-t-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_size_t_array);
  scm_c_define_gsubr("size-t-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_size_t_array_getitem);
  scm_c_define_gsubr("size-t-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_size_t_array_setitem);
  scm_c_define_gsubr("size-t-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_size_t_array_cast);
  scm_c_define_gsubr("size-t-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_size_t_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_bool_array, (void *) &_swig_guile_clientdatabool_array);
  scm_c_define_gsubr("new-bool-array", 1, 0, 0, (swig_guile_proc) _wrap_new_bool_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_bool_array->clientdata))->destroy = (guile_destructor) _wrap_delete_bool_array;
  scm_c_define_gsubr("delete-bool-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_bool_array);
  scm_c_define_gsubr("bool-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_bool_array_getitem);
  scm_c_define_gsubr("bool-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_bool_array_setitem);
  scm_c_define_gsubr("bool-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_bool_array_cast);
  scm_c_define_gsubr("bool-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_bool_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_float_array, (void *) &_swig_guile_clientdatafloat_array);
  scm_c_define_gsubr("new-float-array", 1, 0, 0, (swig_guile_proc) _wrap_new_float_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_float_array->clientdata))->destroy = (guile_destructor) _wrap_delete_float_array;
  scm_c_define_gsubr("delete-float-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_float_array);
  scm_c_define_gsubr("float-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_float_array_getitem);
  scm_c_define_gsubr("float-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_float_array_setitem);
  scm_c_define_gsubr("float-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_float_array_cast);
  scm_c_define_gsubr("float-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_float_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_double_t_array, (void *) &_swig_guile_clientdatadouble_t_array);
  scm_c_define_gsubr("new-double-t-array", 1, 0, 0, (swig_guile_proc) _wrap_new_double_t_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_double_t_array->clientdata))->destroy = (guile_destructor) _wrap_delete_double_t_array;
  scm_c_define_gsubr("delete-double-t-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_double_t_array);
  scm_c_define_gsubr("double-t-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_double_t_array_getitem);
  scm_c_define_gsubr("double-t-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_double_t_array_setitem);
  scm_c_define_gsubr("double-t-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_double_t_array_cast);
  scm_c_define_gsubr("double-t-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_double_t_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_t, (void *) &_swig_guile_clientdataIntVector);
  scm_c_define_gsubr("new-IntVector", 0, 0, 1, (swig_guile_proc) _wrap_new_IntVector);
  scm_c_define_gsubr("IntVector-length", 1, 0, 0, (swig_guile_proc) _wrap_IntVector_length);
  scm_c_define_gsubr("IntVector-empty?", 1, 0, 0, (swig_guile_proc) _wrap_IntVector_emptyq___);
  scm_c_define_gsubr("IntVector-clear!", 1, 0, 0, (swig_guile_proc) _wrap_IntVector_clearN___);
  scm_c_define_gsubr("IntVector-push!", 2, 0, 0, (swig_guile_proc) _wrap_IntVector_pushN___);
  scm_c_define_gsubr("IntVector-pop!", 1, 0, 0, (swig_guile_proc) _wrap_IntVector_popN___);
  scm_c_define_gsubr("IntVector-ref", 2, 0, 0, (swig_guile_proc) _wrap_IntVector_ref);
  scm_c_define_gsubr("IntVector-set!", 3, 0, 0, (swig_guile_proc) _wrap_IntVector_setN___);
  ((swig_guile_clientdata *)(SWIGTYPE_p_std__vectorT_int_t->clientdata))->destroy = (guile_destructor) _wrap_delete_IntVector;
  scm_c_define_gsubr("delete-IntVector", 1, 0, 0, (swig_guile_proc) _wrap_delete_IntVector);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t, (void *) &_swig_guile_clientdataDoubleVector);
  scm_c_define_gsubr("new-DoubleVector", 0, 0, 1, (swig_guile_proc) _wrap_new_DoubleVector);
  scm_c_define_gsubr("DoubleVector-length", 1, 0, 0, (swig_guile_proc) _wrap_DoubleVector_length);
  scm_c_define_gsubr("DoubleVector-empty?", 1, 0, 0, (swig_guile_proc) _wrap_DoubleVector_emptyq___);
  scm_c_define_gsubr("DoubleVector-clear!", 1, 0, 0, (swig_guile_proc) _wrap_DoubleVector_clearN___);
  scm_c_define_gsubr("DoubleVector-push!", 2, 0, 0, (swig_guile_proc) _wrap_DoubleVector_pushN___);
  scm_c_define_gsubr("DoubleVector-pop!", 1, 0, 0, (swig_guile_proc) _wrap_DoubleVector_popN___);
  scm_c_define_gsubr("DoubleVector-ref", 2, 0, 0, (swig_guile_proc) _wrap_DoubleVector_ref);
  scm_c_define_gsubr("DoubleVector-set!", 3, 0, 0, (swig_guile_proc) _wrap_DoubleVector_setN___);
  ((swig_guile_clientdata *)(SWIGTYPE_p_std__vectorT_double_t->clientdata))->destroy = (guile_destructor) _wrap_delete_DoubleVector;
  scm_c_define_gsubr("delete-DoubleVector", 1, 0, 0, (swig_guile_proc) _wrap_delete_DoubleVector);
  SWIG_TypeClientData(SWIGTYPE_p_llama_token_array, (void *) &_swig_guile_clientdatallama_token_array);
  scm_c_define_gsubr("new-llama-token-array", 1, 0, 0, (swig_guile_proc) _wrap_new_llama_token_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_token_array->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_token_array;
  scm_c_define_gsubr("delete-llama-token-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_token_array);
  scm_c_define_gsubr("llama-token-array-getitem", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_array_getitem);
  scm_c_define_gsubr("llama-token-array-setitem", 3, 0, 0, (swig_guile_proc) _wrap_llama_token_array_setitem);
  scm_c_define_gsubr("llama-token-array-cast", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_array_cast);
  scm_c_define_gsubr("llama-token-array-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_array_frompointer);
  SWIG_TypeClientData(SWIGTYPE_p_llama_token_data_carray, (void *) &_swig_guile_clientdatallama_token_data_carray);
  scm_c_define_gsubr("new-llama-token-data-carray", 1, 0, 0, (swig_guile_proc) _wrap_new_llama_token_data_carray);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_token_data_carray->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_token_data_carray;
  scm_c_define_gsubr("delete-llama-token-data-carray", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_token_data_carray);
  scm_c_define_gsubr("llama-token-data-carray-getitem", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_carray_getitem);
  scm_c_define_gsubr("llama-token-data-carray-setitem", 3, 0, 0, (swig_guile_proc) _wrap_llama_token_data_carray_setitem);
  scm_c_define_gsubr("llama-token-data-carray-cast", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_carray_cast);
  scm_c_define_gsubr("llama-token-data-carray-frompointer", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_carray_frompointer);
  scm_c_define_gsubr("LLAMA-VOCAB-TYPE-NONE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_TYPE_NONE);
  scm_c_define_gsubr("LLAMA-VOCAB-TYPE-SPM", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_TYPE_SPM);
  scm_c_define_gsubr("LLAMA-VOCAB-TYPE-BPE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_TYPE_BPE);
  scm_c_define_gsubr("LLAMA-VOCAB-TYPE-WPM", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_TYPE_WPM);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-DEFAULT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_DEFAULT);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-LLAMA3", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_LLAMA3);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-DEEPSEEK-LLM", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-DEEPSEEK-CODER", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-FALCON", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_FALCON);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-MPT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_MPT);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-STARCODER", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_STARCODER);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-GPT2", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_GPT2);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-REFACT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_REFACT);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-COMMAND-R", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_COMMAND_R);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-QWEN2", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_QWEN2);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-OLMO", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_OLMO);
  scm_c_define_gsubr("LLAMA-VOCAB-PRE-TYPE-DBRX", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_VOCAB_PRE_TYPE_DBRX);
  scm_c_define_gsubr("LLAMA-ROPE-TYPE-NONE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_TYPE_NONE);
  scm_c_define_gsubr("LLAMA-ROPE-TYPE-NORM", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_TYPE_NORM);
  scm_c_define_gsubr("LLAMA-ROPE-TYPE-NEOX", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_TYPE_NEOX);
  scm_c_define_gsubr("LLAMA-ROPE-TYPE-GLM", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_TYPE_GLM);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-UNDEFINED", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_UNDEFINED);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-NORMAL", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_NORMAL);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-UNKNOWN", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_UNKNOWN);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-CONTROL", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_CONTROL);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-USER-DEFINED", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_USER_DEFINED);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-UNUSED", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_UNUSED);
  scm_c_define_gsubr("LLAMA-TOKEN-TYPE-BYTE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_TOKEN_TYPE_BYTE);
  scm_c_define_gsubr("LLAMA-FTYPE-ALL-F32", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_ALL_F32);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-F16", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_F16);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q4-0", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q4_0);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q4-1", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q4_1);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q4-1-SOME-F16", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q8-0", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q8_0);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q5-0", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q5_0);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q5-1", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q5_1);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q2-K", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q2_K);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q3-K-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q3_K_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q3-K-M", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q3_K_M);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q3-K-L", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q3_K_L);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q4-K-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q4_K_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q4-K-M", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q4_K_M);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q5-K-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q5_K_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q5-K-M", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q5_K_M);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q6-K", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q6_K);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ2-XXS", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ2_XXS);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ2-XS", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ2_XS);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-Q2-K-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_Q2_K_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ3-XS", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ3_XS);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ3-XXS", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ3_XXS);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ1-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ1_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ4-NL", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ4_NL);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ3-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ3_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ3-M", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ3_M);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ2-S", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ2_S);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ2-M", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ2_M);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ4-XS", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ4_XS);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-IQ1-M", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_IQ1_M);
  scm_c_define_gsubr("LLAMA-FTYPE-MOSTLY-BF16", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_MOSTLY_BF16);
  scm_c_define_gsubr("LLAMA-FTYPE-GUESSED", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_FTYPE_GUESSED);
  scm_c_define_gsubr("LLAMA-ROPE-SCALING-TYPE-UNSPECIFIED", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED);
  scm_c_define_gsubr("LLAMA-ROPE-SCALING-TYPE-NONE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_SCALING_TYPE_NONE);
  scm_c_define_gsubr("LLAMA-ROPE-SCALING-TYPE-LINEAR", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_SCALING_TYPE_LINEAR);
  scm_c_define_gsubr("LLAMA-ROPE-SCALING-TYPE-YARN", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_SCALING_TYPE_YARN);
  scm_c_define_gsubr("LLAMA-ROPE-SCALING-TYPE-MAX-VALUE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_ROPE_SCALING_TYPE_MAX_VALUE);
  scm_c_define_gsubr("LLAMA-POOLING-TYPE-UNSPECIFIED", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_POOLING_TYPE_UNSPECIFIED);
  scm_c_define_gsubr("LLAMA-POOLING-TYPE-NONE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_POOLING_TYPE_NONE);
  scm_c_define_gsubr("LLAMA-POOLING-TYPE-MEAN", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_POOLING_TYPE_MEAN);
  scm_c_define_gsubr("LLAMA-POOLING-TYPE-CLS", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_POOLING_TYPE_CLS);
  scm_c_define_gsubr("LLAMA-SPLIT-MODE-NONE", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_SPLIT_MODE_NONE);
  scm_c_define_gsubr("LLAMA-SPLIT-MODE-LAYER", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_SPLIT_MODE_LAYER);
  scm_c_define_gsubr("LLAMA-SPLIT-MODE-ROW", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_SPLIT_MODE_ROW);
  SWIG_TypeClientData(SWIGTYPE_p_llama_token_data, (void *) &_swig_guile_clientdatallama_token_data);
  scm_c_define_gsubr("llama-token-data-id-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_id_set);
  scm_c_define_gsubr("llama-token-data-id-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_id_get);
  scm_c_define_gsubr("llama-token-data-logit-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_logit_set);
  scm_c_define_gsubr("llama-token-data-logit-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_logit_get);
  scm_c_define_gsubr("llama-token-data-p-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_p_set);
  scm_c_define_gsubr("llama-token-data-p-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_p_get);
  scm_c_define_gsubr("new-llama-token-data", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_token_data);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_token_data->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_token_data;
  scm_c_define_gsubr("delete-llama-token-data", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_token_data);
  SWIG_TypeClientData(SWIGTYPE_p_llama_token_data_array, (void *) &_swig_guile_clientdatallama_token_data_array);
  scm_c_define_gsubr("llama-token-data-array-data-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_array_data_set);
  scm_c_define_gsubr("llama-token-data-array-data-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_array_data_get);
  scm_c_define_gsubr("llama-token-data-array-size-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_array_size_set);
  scm_c_define_gsubr("llama-token-data-array-size-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_array_size_get);
  scm_c_define_gsubr("llama-token-data-array-sorted-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_array_sorted_set);
  scm_c_define_gsubr("llama-token-data-array-sorted-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_array_sorted_get);
  scm_c_define_gsubr("new-llama-token-data-array", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_token_data_array);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_token_data_array->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_token_data_array;
  scm_c_define_gsubr("delete-llama-token-data-array", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_token_data_array);
  SWIG_TypeClientData(SWIGTYPE_p_llama_batch, (void *) &_swig_guile_clientdatallama_batch);
  scm_c_define_gsubr("llama-batch-n-tokens-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_n_tokens_set);
  scm_c_define_gsubr("llama-batch-n-tokens-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_n_tokens_get);
  scm_c_define_gsubr("llama-batch-token-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_token_set);
  scm_c_define_gsubr("llama-batch-token-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_token_get);
  scm_c_define_gsubr("llama-batch-embd-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_embd_set);
  scm_c_define_gsubr("llama-batch-embd-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_embd_get);
  scm_c_define_gsubr("llama-batch-pos-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_pos_set);
  scm_c_define_gsubr("llama-batch-pos-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_pos_get);
  scm_c_define_gsubr("llama-batch-n-seq-id-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_n_seq_id_set);
  scm_c_define_gsubr("llama-batch-n-seq-id-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_n_seq_id_get);
  scm_c_define_gsubr("llama-batch-seq-id-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_seq_id_set);
  scm_c_define_gsubr("llama-batch-seq-id-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_seq_id_get);
  scm_c_define_gsubr("llama-batch-logits-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_logits_set);
  scm_c_define_gsubr("llama-batch-logits-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_logits_get);
  scm_c_define_gsubr("llama-batch-all-pos-0-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_all_pos_0_set);
  scm_c_define_gsubr("llama-batch-all-pos-0-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_all_pos_0_get);
  scm_c_define_gsubr("llama-batch-all-pos-1-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_all_pos_1_set);
  scm_c_define_gsubr("llama-batch-all-pos-1-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_all_pos_1_get);
  scm_c_define_gsubr("llama-batch-all-seq-id-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_batch_all_seq_id_set);
  scm_c_define_gsubr("llama-batch-all-seq-id-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_all_seq_id_get);
  scm_c_define_gsubr("new-llama-batch", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_batch);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_batch->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_batch;
  scm_c_define_gsubr("delete-llama-batch", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_batch);
  scm_c_define_gsubr("LLAMA-KV-OVERRIDE-TYPE-INT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_KV_OVERRIDE_TYPE_INT);
  scm_c_define_gsubr("LLAMA-KV-OVERRIDE-TYPE-FLOAT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_KV_OVERRIDE_TYPE_FLOAT);
  scm_c_define_gsubr("LLAMA-KV-OVERRIDE-TYPE-BOOL", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_KV_OVERRIDE_TYPE_BOOL);
  scm_c_define_gsubr("LLAMA-KV-OVERRIDE-TYPE-STR", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_KV_OVERRIDE_TYPE_STR);
  SWIG_TypeClientData(SWIGTYPE_p_llama_model_kv_override, (void *) &_swig_guile_clientdatallama_model_kv_override);
  scm_c_define_gsubr("llama-model-kv-override-tag-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_kv_override_tag_set);
  scm_c_define_gsubr("llama-model-kv-override-tag-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_kv_override_tag_get);
  scm_c_define_gsubr("llama-model-kv-override-key-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_kv_override_key_set);
  scm_c_define_gsubr("llama-model-kv-override-key-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_kv_override_key_get);
  scm_c_define_gsubr("new-llama-model-kv-override", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_model_kv_override);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_model_kv_override->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_model_kv_override;
  scm_c_define_gsubr("delete-llama-model-kv-override", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_model_kv_override);
  SWIG_TypeClientData(SWIGTYPE_p_llama_model_params, (void *) &_swig_guile_clientdatallama_model_params);
  scm_c_define_gsubr("llama-model-params-n-gpu-layers-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_n_gpu_layers_set);
  scm_c_define_gsubr("llama-model-params-n-gpu-layers-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_n_gpu_layers_get);
  scm_c_define_gsubr("llama-model-params-split-mode-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_split_mode_set);
  scm_c_define_gsubr("llama-model-params-split-mode-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_split_mode_get);
  scm_c_define_gsubr("llama-model-params-main-gpu-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_main_gpu_set);
  scm_c_define_gsubr("llama-model-params-main-gpu-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_main_gpu_get);
  scm_c_define_gsubr("llama-model-params-tensor-split-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_tensor_split_set);
  scm_c_define_gsubr("llama-model-params-tensor-split-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_tensor_split_get);
  scm_c_define_gsubr("llama-model-params-progress-callback-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_progress_callback_set);
  scm_c_define_gsubr("llama-model-params-progress-callback-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_progress_callback_get);
  scm_c_define_gsubr("llama-model-params-progress-callback-user-data-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_progress_callback_user_data_set);
  scm_c_define_gsubr("llama-model-params-progress-callback-user-data-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_progress_callback_user_data_get);
  scm_c_define_gsubr("llama-model-params-kv-overrides-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_kv_overrides_set);
  scm_c_define_gsubr("llama-model-params-kv-overrides-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_kv_overrides_get);
  scm_c_define_gsubr("llama-model-params-vocab-only-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_vocab_only_set);
  scm_c_define_gsubr("llama-model-params-vocab-only-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_vocab_only_get);
  scm_c_define_gsubr("llama-model-params-use-mmap-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_use_mmap_set);
  scm_c_define_gsubr("llama-model-params-use-mmap-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_use_mmap_get);
  scm_c_define_gsubr("llama-model-params-use-mlock-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_use_mlock_set);
  scm_c_define_gsubr("llama-model-params-use-mlock-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_use_mlock_get);
  scm_c_define_gsubr("llama-model-params-check-tensors-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_params_check_tensors_set);
  scm_c_define_gsubr("llama-model-params-check-tensors-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_params_check_tensors_get);
  scm_c_define_gsubr("new-llama-model-params", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_model_params);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_model_params->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_model_params;
  scm_c_define_gsubr("delete-llama-model-params", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_model_params);
  SWIG_TypeClientData(SWIGTYPE_p_llama_context_params, (void *) &_swig_guile_clientdatallama_context_params);
  scm_c_define_gsubr("llama-context-params-seed-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_seed_set);
  scm_c_define_gsubr("llama-context-params-seed-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_seed_get);
  scm_c_define_gsubr("llama-context-params-n-ctx-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_ctx_set);
  scm_c_define_gsubr("llama-context-params-n-ctx-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_ctx_get);
  scm_c_define_gsubr("llama-context-params-n-batch-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_batch_set);
  scm_c_define_gsubr("llama-context-params-n-batch-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_batch_get);
  scm_c_define_gsubr("llama-context-params-n-ubatch-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_ubatch_set);
  scm_c_define_gsubr("llama-context-params-n-ubatch-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_ubatch_get);
  scm_c_define_gsubr("llama-context-params-n-seq-max-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_seq_max_set);
  scm_c_define_gsubr("llama-context-params-n-seq-max-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_seq_max_get);
  scm_c_define_gsubr("llama-context-params-n-threads-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_threads_set);
  scm_c_define_gsubr("llama-context-params-n-threads-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_threads_get);
  scm_c_define_gsubr("llama-context-params-n-threads-batch-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_threads_batch_set);
  scm_c_define_gsubr("llama-context-params-n-threads-batch-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_n_threads_batch_get);
  scm_c_define_gsubr("llama-context-params-rope-scaling-type-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_rope_scaling_type_set);
  scm_c_define_gsubr("llama-context-params-rope-scaling-type-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_rope_scaling_type_get);
  scm_c_define_gsubr("llama-context-params-pooling-type-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_pooling_type_set);
  scm_c_define_gsubr("llama-context-params-pooling-type-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_pooling_type_get);
  scm_c_define_gsubr("llama-context-params-rope-freq-base-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_rope_freq_base_set);
  scm_c_define_gsubr("llama-context-params-rope-freq-base-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_rope_freq_base_get);
  scm_c_define_gsubr("llama-context-params-rope-freq-scale-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_rope_freq_scale_set);
  scm_c_define_gsubr("llama-context-params-rope-freq-scale-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_rope_freq_scale_get);
  scm_c_define_gsubr("llama-context-params-yarn-ext-factor-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_ext_factor_set);
  scm_c_define_gsubr("llama-context-params-yarn-ext-factor-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_ext_factor_get);
  scm_c_define_gsubr("llama-context-params-yarn-attn-factor-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_attn_factor_set);
  scm_c_define_gsubr("llama-context-params-yarn-attn-factor-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_attn_factor_get);
  scm_c_define_gsubr("llama-context-params-yarn-beta-fast-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_beta_fast_set);
  scm_c_define_gsubr("llama-context-params-yarn-beta-fast-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_beta_fast_get);
  scm_c_define_gsubr("llama-context-params-yarn-beta-slow-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_beta_slow_set);
  scm_c_define_gsubr("llama-context-params-yarn-beta-slow-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_beta_slow_get);
  scm_c_define_gsubr("llama-context-params-yarn-orig-ctx-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_orig_ctx_set);
  scm_c_define_gsubr("llama-context-params-yarn-orig-ctx-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_yarn_orig_ctx_get);
  scm_c_define_gsubr("llama-context-params-defrag-thold-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_defrag_thold_set);
  scm_c_define_gsubr("llama-context-params-defrag-thold-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_defrag_thold_get);
  scm_c_define_gsubr("llama-context-params-cb-eval-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_cb_eval_set);
  scm_c_define_gsubr("llama-context-params-cb-eval-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_cb_eval_get);
  scm_c_define_gsubr("llama-context-params-cb-eval-user-data-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_cb_eval_user_data_set);
  scm_c_define_gsubr("llama-context-params-cb-eval-user-data-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_cb_eval_user_data_get);
  scm_c_define_gsubr("llama-context-params-type-k-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_type_k_set);
  scm_c_define_gsubr("llama-context-params-type-k-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_type_k_get);
  scm_c_define_gsubr("llama-context-params-type-v-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_type_v_set);
  scm_c_define_gsubr("llama-context-params-type-v-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_type_v_get);
  scm_c_define_gsubr("llama-context-params-logits-all-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_logits_all_set);
  scm_c_define_gsubr("llama-context-params-logits-all-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_logits_all_get);
  scm_c_define_gsubr("llama-context-params-embeddings-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_embeddings_set);
  scm_c_define_gsubr("llama-context-params-embeddings-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_embeddings_get);
  scm_c_define_gsubr("llama-context-params-offload-kqv-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_offload_kqv_set);
  scm_c_define_gsubr("llama-context-params-offload-kqv-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_offload_kqv_get);
  scm_c_define_gsubr("llama-context-params-flash-attn-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_flash_attn_set);
  scm_c_define_gsubr("llama-context-params-flash-attn-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_flash_attn_get);
  scm_c_define_gsubr("llama-context-params-abort-callback-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_abort_callback_set);
  scm_c_define_gsubr("llama-context-params-abort-callback-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_abort_callback_get);
  scm_c_define_gsubr("llama-context-params-abort-callback-data-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_context_params_abort_callback_data_set);
  scm_c_define_gsubr("llama-context-params-abort-callback-data-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_context_params_abort_callback_data_get);
  scm_c_define_gsubr("new-llama-context-params", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_context_params);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_context_params->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_context_params;
  scm_c_define_gsubr("delete-llama-context-params", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_context_params);
  SWIG_TypeClientData(SWIGTYPE_p_llama_model_quantize_params, (void *) &_swig_guile_clientdatallama_model_quantize_params);
  scm_c_define_gsubr("llama-model-quantize-params-nthread-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_nthread_set);
  scm_c_define_gsubr("llama-model-quantize-params-nthread-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_nthread_get);
  scm_c_define_gsubr("llama-model-quantize-params-ftype-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_ftype_set);
  scm_c_define_gsubr("llama-model-quantize-params-ftype-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_ftype_get);
  scm_c_define_gsubr("llama-model-quantize-params-output-tensor-type-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_output_tensor_type_set);
  scm_c_define_gsubr("llama-model-quantize-params-output-tensor-type-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_output_tensor_type_get);
  scm_c_define_gsubr("llama-model-quantize-params-token-embedding-type-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_token_embedding_type_set);
  scm_c_define_gsubr("llama-model-quantize-params-token-embedding-type-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_token_embedding_type_get);
  scm_c_define_gsubr("llama-model-quantize-params-allow-requantize-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_allow_requantize_set);
  scm_c_define_gsubr("llama-model-quantize-params-allow-requantize-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_allow_requantize_get);
  scm_c_define_gsubr("llama-model-quantize-params-quantize-output-tensor-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_quantize_output_tensor_set);
  scm_c_define_gsubr("llama-model-quantize-params-quantize-output-tensor-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_quantize_output_tensor_get);
  scm_c_define_gsubr("llama-model-quantize-params-only-copy-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_only_copy_set);
  scm_c_define_gsubr("llama-model-quantize-params-only-copy-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_only_copy_get);
  scm_c_define_gsubr("llama-model-quantize-params-pure-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_pure_set);
  scm_c_define_gsubr("llama-model-quantize-params-pure-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_pure_get);
  scm_c_define_gsubr("llama-model-quantize-params-keep-split-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_keep_split_set);
  scm_c_define_gsubr("llama-model-quantize-params-keep-split-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_keep_split_get);
  scm_c_define_gsubr("llama-model-quantize-params-imatrix-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_imatrix_set);
  scm_c_define_gsubr("llama-model-quantize-params-imatrix-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_imatrix_get);
  scm_c_define_gsubr("llama-model-quantize-params-kv-overrides-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_kv_overrides_set);
  scm_c_define_gsubr("llama-model-quantize-params-kv-overrides-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_params_kv_overrides_get);
  scm_c_define_gsubr("new-llama-model-quantize-params", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_model_quantize_params);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_model_quantize_params->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_model_quantize_params;
  scm_c_define_gsubr("delete-llama-model-quantize-params", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_model_quantize_params);
  scm_c_define_gsubr("LLAMA-GRETYPE-END", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_END);
  scm_c_define_gsubr("LLAMA-GRETYPE-ALT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_ALT);
  scm_c_define_gsubr("LLAMA-GRETYPE-RULE-REF", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_RULE_REF);
  scm_c_define_gsubr("LLAMA-GRETYPE-CHAR", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_CHAR);
  scm_c_define_gsubr("LLAMA-GRETYPE-CHAR-NOT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_CHAR_NOT);
  scm_c_define_gsubr("LLAMA-GRETYPE-CHAR-RNG-UPPER", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_CHAR_RNG_UPPER);
  scm_c_define_gsubr("LLAMA-GRETYPE-CHAR-ALT", 0, 0, 0, (swig_guile_proc) _wrap_LLAMA_GRETYPE_CHAR_ALT);
  SWIG_TypeClientData(SWIGTYPE_p_llama_grammar_element, (void *) &_swig_guile_clientdatallama_grammar_element);
  scm_c_define_gsubr("llama-grammar-element-type-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_grammar_element_type_set);
  scm_c_define_gsubr("llama-grammar-element-type-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_grammar_element_type_get);
  scm_c_define_gsubr("llama-grammar-element-value-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_grammar_element_value_set);
  scm_c_define_gsubr("llama-grammar-element-value-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_grammar_element_value_get);
  scm_c_define_gsubr("new-llama-grammar-element", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_grammar_element);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_grammar_element->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_grammar_element;
  scm_c_define_gsubr("delete-llama-grammar-element", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_grammar_element);
  SWIG_TypeClientData(SWIGTYPE_p_llama_timings, (void *) &_swig_guile_clientdatallama_timings);
  scm_c_define_gsubr("llama-timings-t-start-ms-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_start_ms_set);
  scm_c_define_gsubr("llama-timings-t-start-ms-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_start_ms_get);
  scm_c_define_gsubr("llama-timings-t-end-ms-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_end_ms_set);
  scm_c_define_gsubr("llama-timings-t-end-ms-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_end_ms_get);
  scm_c_define_gsubr("llama-timings-t-load-ms-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_load_ms_set);
  scm_c_define_gsubr("llama-timings-t-load-ms-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_load_ms_get);
  scm_c_define_gsubr("llama-timings-t-sample-ms-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_sample_ms_set);
  scm_c_define_gsubr("llama-timings-t-sample-ms-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_sample_ms_get);
  scm_c_define_gsubr("llama-timings-t-p-eval-ms-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_p_eval_ms_set);
  scm_c_define_gsubr("llama-timings-t-p-eval-ms-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_p_eval_ms_get);
  scm_c_define_gsubr("llama-timings-t-eval-ms-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_eval_ms_set);
  scm_c_define_gsubr("llama-timings-t-eval-ms-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_t_eval_ms_get);
  scm_c_define_gsubr("llama-timings-n-sample-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_n_sample_set);
  scm_c_define_gsubr("llama-timings-n-sample-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_n_sample_get);
  scm_c_define_gsubr("llama-timings-n-p-eval-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_n_p_eval_set);
  scm_c_define_gsubr("llama-timings-n-p-eval-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_n_p_eval_get);
  scm_c_define_gsubr("llama-timings-n-eval-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_timings_n_eval_set);
  scm_c_define_gsubr("llama-timings-n-eval-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_timings_n_eval_get);
  scm_c_define_gsubr("new-llama-timings", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_timings);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_timings->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_timings;
  scm_c_define_gsubr("delete-llama-timings", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_timings);
  SWIG_TypeClientData(SWIGTYPE_p_llama_chat_message, (void *) &_swig_guile_clientdatallama_chat_message);
  scm_c_define_gsubr("llama-chat-message-role-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_chat_message_role_set);
  scm_c_define_gsubr("llama-chat-message-role-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_chat_message_role_get);
  scm_c_define_gsubr("llama-chat-message-content-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_chat_message_content_set);
  scm_c_define_gsubr("llama-chat-message-content-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_chat_message_content_get);
  scm_c_define_gsubr("new-llama-chat-message", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_chat_message);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_chat_message->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_chat_message;
  scm_c_define_gsubr("delete-llama-chat-message", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_chat_message);
  scm_c_define_gsubr("llama-model-default-params", 0, 0, 0, (swig_guile_proc) _wrap_llama_model_default_params);
  scm_c_define_gsubr("llama-context-default-params", 0, 0, 0, (swig_guile_proc) _wrap_llama_context_default_params);
  scm_c_define_gsubr("llama-model-quantize-default-params", 0, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize_default_params);
  scm_c_define_gsubr("llama-backend-init", 0, 0, 0, (swig_guile_proc) _wrap_llama_backend_init);
  scm_c_define_gsubr("llama-numa-init", 1, 0, 0, (swig_guile_proc) _wrap_llama_numa_init);
  scm_c_define_gsubr("llama-backend-free", 0, 0, 0, (swig_guile_proc) _wrap_llama_backend_free);
  scm_c_define_gsubr("llama-load-model-from-file", 2, 0, 0, (swig_guile_proc) _wrap_llama_load_model_from_file);
  scm_c_define_gsubr("llama-free-model", 1, 0, 0, (swig_guile_proc) _wrap_llama_free_model);
  scm_c_define_gsubr("llama-new-context-with-model", 2, 0, 0, (swig_guile_proc) _wrap_llama_new_context_with_model);
  scm_c_define_gsubr("llama-free", 1, 0, 0, (swig_guile_proc) _wrap_llama_free);
  scm_c_define_gsubr("llama-time-us", 0, 0, 0, (swig_guile_proc) _wrap_llama_time_us);
  scm_c_define_gsubr("llama-max-devices", 0, 0, 0, (swig_guile_proc) _wrap_llama_max_devices);
  scm_c_define_gsubr("llama-supports-mmap", 0, 0, 0, (swig_guile_proc) _wrap_llama_supports_mmap);
  scm_c_define_gsubr("llama-supports-mlock", 0, 0, 0, (swig_guile_proc) _wrap_llama_supports_mlock);
  scm_c_define_gsubr("llama-supports-gpu-offload", 0, 0, 0, (swig_guile_proc) _wrap_llama_supports_gpu_offload);
  scm_c_define_gsubr("llama-get-model", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_model);
  scm_c_define_gsubr("llama-n-ctx", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_ctx);
  scm_c_define_gsubr("llama-n-batch", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_batch);
  scm_c_define_gsubr("llama-n-ubatch", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_ubatch);
  scm_c_define_gsubr("llama-n-seq-max", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_seq_max);
  scm_c_define_gsubr("llama-n-vocab", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_vocab);
  scm_c_define_gsubr("llama-n-ctx-train", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_ctx_train);
  scm_c_define_gsubr("llama-n-embd", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_embd);
  scm_c_define_gsubr("llama-n-layer", 1, 0, 0, (swig_guile_proc) _wrap_llama_n_layer);
  scm_c_define_gsubr("llama-rope-freq-scale-train", 1, 0, 0, (swig_guile_proc) _wrap_llama_rope_freq_scale_train);
  scm_c_define_gsubr("llama-model-meta-val-str", 4, 0, 0, (swig_guile_proc) _wrap_llama_model_meta_val_str);
  scm_c_define_gsubr("llama-model-meta-count", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_meta_count);
  scm_c_define_gsubr("llama-model-meta-key-by-index", 4, 0, 0, (swig_guile_proc) _wrap_llama_model_meta_key_by_index);
  scm_c_define_gsubr("llama-model-meta-val-str-by-index", 4, 0, 0, (swig_guile_proc) _wrap_llama_model_meta_val_str_by_index);
  scm_c_define_gsubr("llama-model-desc", 3, 0, 0, (swig_guile_proc) _wrap_llama_model_desc);
  scm_c_define_gsubr("llama-model-size", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_size);
  scm_c_define_gsubr("llama-model-n-params", 1, 0, 0, (swig_guile_proc) _wrap_llama_model_n_params);
  scm_c_define_gsubr("llama-get-model-tensor", 2, 0, 0, (swig_guile_proc) _wrap_llama_get_model_tensor);
  scm_c_define_gsubr("llama-model-quantize", 3, 0, 0, (swig_guile_proc) _wrap_llama_model_quantize);
  scm_c_define_gsubr("llama-model-apply-lora-from-file", 5, 0, 0, (swig_guile_proc) _wrap_llama_model_apply_lora_from_file);
  scm_c_define_gsubr("llama-control-vector-apply", 6, 0, 0, (swig_guile_proc) _wrap_llama_control_vector_apply);
  SWIG_TypeClientData(SWIGTYPE_p_llama_kv_cache_view_cell, (void *) &_swig_guile_clientdatallama_kv_cache_view_cell);
  scm_c_define_gsubr("llama-kv-cache-view-cell-pos-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_cell_pos_set);
  scm_c_define_gsubr("llama-kv-cache-view-cell-pos-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_cell_pos_get);
  scm_c_define_gsubr("new-llama-kv-cache-view-cell", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_kv_cache_view_cell);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_kv_cache_view_cell->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_kv_cache_view_cell;
  scm_c_define_gsubr("delete-llama-kv-cache-view-cell", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_kv_cache_view_cell);
  SWIG_TypeClientData(SWIGTYPE_p_llama_kv_cache_view, (void *) &_swig_guile_clientdatallama_kv_cache_view);
  scm_c_define_gsubr("llama-kv-cache-view-n-cells-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_n_cells_set);
  scm_c_define_gsubr("llama-kv-cache-view-n-cells-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_n_cells_get);
  scm_c_define_gsubr("llama-kv-cache-view-n-seq-max-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_n_seq_max_set);
  scm_c_define_gsubr("llama-kv-cache-view-n-seq-max-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_n_seq_max_get);
  scm_c_define_gsubr("llama-kv-cache-view-token-count-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_token_count_set);
  scm_c_define_gsubr("llama-kv-cache-view-token-count-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_token_count_get);
  scm_c_define_gsubr("llama-kv-cache-view-used-cells-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_used_cells_set);
  scm_c_define_gsubr("llama-kv-cache-view-used-cells-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_used_cells_get);
  scm_c_define_gsubr("llama-kv-cache-view-max-contiguous-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_max_contiguous_set);
  scm_c_define_gsubr("llama-kv-cache-view-max-contiguous-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_max_contiguous_get);
  scm_c_define_gsubr("llama-kv-cache-view-max-contiguous-idx-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_max_contiguous_idx_set);
  scm_c_define_gsubr("llama-kv-cache-view-max-contiguous-idx-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_max_contiguous_idx_get);
  scm_c_define_gsubr("llama-kv-cache-view-cells-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_cells_set);
  scm_c_define_gsubr("llama-kv-cache-view-cells-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_cells_get);
  scm_c_define_gsubr("llama-kv-cache-view-cells-sequences-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_cells_sequences_set);
  scm_c_define_gsubr("llama-kv-cache-view-cells-sequences-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_cells_sequences_get);
  scm_c_define_gsubr("new-llama-kv-cache-view", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_kv_cache_view);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_kv_cache_view->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_kv_cache_view;
  scm_c_define_gsubr("delete-llama-kv-cache-view", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_kv_cache_view);
  scm_c_define_gsubr("llama-kv-cache-view-init", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_init);
  scm_c_define_gsubr("llama-kv-cache-view-free", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_free);
  scm_c_define_gsubr("llama-kv-cache-view-update", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_view_update);
  scm_c_define_gsubr("llama-get-kv-cache-token-count", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_kv_cache_token_count);
  scm_c_define_gsubr("llama-get-kv-cache-used-cells", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_kv_cache_used_cells);
  scm_c_define_gsubr("llama-kv-cache-clear", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_clear);
  scm_c_define_gsubr("llama-kv-cache-seq-rm", 4, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_seq_rm);
  scm_c_define_gsubr("llama-kv-cache-seq-cp", 5, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_seq_cp);
  scm_c_define_gsubr("llama-kv-cache-seq-keep", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_seq_keep);
  scm_c_define_gsubr("llama-kv-cache-seq-add", 5, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_seq_add);
  scm_c_define_gsubr("llama-kv-cache-seq-div", 5, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_seq_div);
  scm_c_define_gsubr("llama-kv-cache-seq-pos-max", 2, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_seq_pos_max);
  scm_c_define_gsubr("llama-kv-cache-defrag", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_defrag);
  scm_c_define_gsubr("llama-kv-cache-update", 1, 0, 0, (swig_guile_proc) _wrap_llama_kv_cache_update);
  scm_c_define_gsubr("llama-state-get-size", 1, 0, 0, (swig_guile_proc) _wrap_llama_state_get_size);
  scm_c_define_gsubr("llama-get-state-size", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_state_size);
  scm_c_define_gsubr("llama-state-get-data", 2, 0, 0, (swig_guile_proc) _wrap_llama_state_get_data);
  scm_c_define_gsubr("llama-copy-state-data", 2, 0, 0, (swig_guile_proc) _wrap_llama_copy_state_data);
  scm_c_define_gsubr("llama-state-set-data", 2, 0, 0, (swig_guile_proc) _wrap_llama_state_set_data);
  scm_c_define_gsubr("llama-set-state-data", 2, 0, 0, (swig_guile_proc) _wrap_llama_set_state_data);
  scm_c_define_gsubr("llama-state-load-file", 5, 0, 0, (swig_guile_proc) _wrap_llama_state_load_file);
  scm_c_define_gsubr("llama-load-session-file", 5, 0, 0, (swig_guile_proc) _wrap_llama_load_session_file);
  scm_c_define_gsubr("llama-state-save-file", 4, 0, 0, (swig_guile_proc) _wrap_llama_state_save_file);
  scm_c_define_gsubr("llama-save-session-file", 4, 0, 0, (swig_guile_proc) _wrap_llama_save_session_file);
  scm_c_define_gsubr("llama-state-seq-get-size", 2, 0, 0, (swig_guile_proc) _wrap_llama_state_seq_get_size);
  scm_c_define_gsubr("llama-state-seq-get-data", 3, 0, 0, (swig_guile_proc) _wrap_llama_state_seq_get_data);
  scm_c_define_gsubr("llama-state-seq-set-data", 3, 0, 0, (swig_guile_proc) _wrap_llama_state_seq_set_data);
  scm_c_define_gsubr("llama-state-seq-save-file", 5, 0, 0, (swig_guile_proc) _wrap_llama_state_seq_save_file);
  scm_c_define_gsubr("llama-state-seq-load-file", 6, 0, 0, (swig_guile_proc) _wrap_llama_state_seq_load_file);
  scm_c_define_gsubr("llama-batch-get-one", 4, 0, 0, (swig_guile_proc) _wrap_llama_batch_get_one);
  scm_c_define_gsubr("llama-batch-init", 3, 0, 0, (swig_guile_proc) _wrap_llama_batch_init);
  scm_c_define_gsubr("llama-batch-free", 1, 0, 0, (swig_guile_proc) _wrap_llama_batch_free);
  scm_c_define_gsubr("llama-decode", 2, 0, 0, (swig_guile_proc) _wrap_llama_decode);
  scm_c_define_gsubr("llama-set-n-threads", 3, 0, 0, (swig_guile_proc) _wrap_llama_set_n_threads);
  scm_c_define_gsubr("llama-set-causal-attn", 2, 0, 0, (swig_guile_proc) _wrap_llama_set_causal_attn);
  scm_c_define_gsubr("llama-set-abort-callback", 3, 0, 0, (swig_guile_proc) _wrap_llama_set_abort_callback);
  scm_c_define_gsubr("llama-synchronize", 1, 0, 0, (swig_guile_proc) _wrap_llama_synchronize);
  scm_c_define_gsubr("llama-get-logits", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_logits);
  scm_c_define_gsubr("llama-get-logits-ith", 2, 0, 0, (swig_guile_proc) _wrap_llama_get_logits_ith);
  scm_c_define_gsubr("llama-get-embeddings", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_embeddings);
  scm_c_define_gsubr("llama-get-embeddings-ith", 2, 0, 0, (swig_guile_proc) _wrap_llama_get_embeddings_ith);
  scm_c_define_gsubr("llama-get-embeddings-seq", 2, 0, 0, (swig_guile_proc) _wrap_llama_get_embeddings_seq);
  scm_c_define_gsubr("llama-token-get-text", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_get_text);
  scm_c_define_gsubr("llama-token-get-score", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_get_score);
  scm_c_define_gsubr("llama-token-get-type", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_get_type);
  scm_c_define_gsubr("llama-token-is-eog", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_is_eog);
  scm_c_define_gsubr("llama-token-bos", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_bos);
  scm_c_define_gsubr("llama-token-eos", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_eos);
  scm_c_define_gsubr("llama-token-cls", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_cls);
  scm_c_define_gsubr("llama-token-sep", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_sep);
  scm_c_define_gsubr("llama-token-nl", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_nl);
  scm_c_define_gsubr("llama-add-bos-token", 1, 0, 0, (swig_guile_proc) _wrap_llama_add_bos_token);
  scm_c_define_gsubr("llama-add-eos-token", 1, 0, 0, (swig_guile_proc) _wrap_llama_add_eos_token);
  scm_c_define_gsubr("llama-token-prefix", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_prefix);
  scm_c_define_gsubr("llama-token-middle", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_middle);
  scm_c_define_gsubr("llama-token-suffix", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_suffix);
  scm_c_define_gsubr("llama-token-eot", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_eot);
  scm_c_define_gsubr("llama-tokenize", 6, 0, 0, (swig_guile_proc) _wrap_llama_tokenize);
  scm_c_define_gsubr("llama-token-to-piece", 4, 0, 0, (swig_guile_proc) _wrap_llama_token_to_piece);
  scm_c_define_gsubr("llama-chat-apply-template", 6, 0, 0, (swig_guile_proc) _wrap_llama_chat_apply_template);
  scm_c_define_gsubr("llama-grammar-init", 3, 0, 0, (swig_guile_proc) _wrap_llama_grammar_init);
  scm_c_define_gsubr("llama-grammar-free", 1, 0, 0, (swig_guile_proc) _wrap_llama_grammar_free);
  scm_c_define_gsubr("llama-grammar-copy", 1, 0, 0, (swig_guile_proc) _wrap_llama_grammar_copy);
  scm_c_define_gsubr("llama-set-rng-seed", 2, 0, 0, (swig_guile_proc) _wrap_llama_set_rng_seed);
  scm_c_define_gsubr("llama-sample-repetition-penalties", 7, 0, 0, (swig_guile_proc) _wrap_llama_sample_repetition_penalties);
  scm_c_define_gsubr("llama-sample-apply-guidance", 4, 0, 0, (swig_guile_proc) _wrap_llama_sample_apply_guidance);
  scm_c_define_gsubr("llama-sample-softmax", 2, 0, 0, (swig_guile_proc) _wrap_llama_sample_softmax);
  scm_c_define_gsubr("llama-sample-top-k", 4, 0, 0, (swig_guile_proc) _wrap_llama_sample_top_k);
  scm_c_define_gsubr("llama-sample-top-p", 4, 0, 0, (swig_guile_proc) _wrap_llama_sample_top_p);
  scm_c_define_gsubr("llama-sample-min-p", 4, 0, 0, (swig_guile_proc) _wrap_llama_sample_min_p);
  scm_c_define_gsubr("llama-sample-tail-free", 4, 0, 0, (swig_guile_proc) _wrap_llama_sample_tail_free);
  scm_c_define_gsubr("llama-sample-typical", 4, 0, 0, (swig_guile_proc) _wrap_llama_sample_typical);
  scm_c_define_gsubr("llama-sample-entropy", 5, 0, 0, (swig_guile_proc) _wrap_llama_sample_entropy);
  scm_c_define_gsubr("llama-sample-temp", 3, 0, 0, (swig_guile_proc) _wrap_llama_sample_temp);
  scm_c_define_gsubr("llama-sample-grammar", 3, 0, 0, (swig_guile_proc) _wrap_llama_sample_grammar);
  scm_c_define_gsubr("llama-sample-token-mirostat", 6, 0, 0, (swig_guile_proc) _wrap_llama_sample_token_mirostat);
  scm_c_define_gsubr("llama-sample-token-mirostat-v2", 5, 0, 0, (swig_guile_proc) _wrap_llama_sample_token_mirostat_v2);
  scm_c_define_gsubr("llama-sample-token-greedy", 2, 0, 0, (swig_guile_proc) _wrap_llama_sample_token_greedy);
  scm_c_define_gsubr("llama-sample-token", 2, 0, 0, (swig_guile_proc) _wrap_llama_sample_token);
  scm_c_define_gsubr("llama-grammar-accept-token", 3, 0, 0, (swig_guile_proc) _wrap_llama_grammar_accept_token);
  SWIG_TypeClientData(SWIGTYPE_p_llama_beam_view, (void *) &_swig_guile_clientdatallama_beam_view);
  scm_c_define_gsubr("llama-beam-view-tokens-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_tokens_set);
  scm_c_define_gsubr("llama-beam-view-tokens-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_tokens_get);
  scm_c_define_gsubr("llama-beam-view-n-tokens-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_n_tokens_set);
  scm_c_define_gsubr("llama-beam-view-n-tokens-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_n_tokens_get);
  scm_c_define_gsubr("llama-beam-view-p-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_p_set);
  scm_c_define_gsubr("llama-beam-view-p-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_p_get);
  scm_c_define_gsubr("llama-beam-view-eob-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_eob_set);
  scm_c_define_gsubr("llama-beam-view-eob-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beam_view_eob_get);
  scm_c_define_gsubr("new-llama-beam-view", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_beam_view);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_beam_view->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_beam_view;
  scm_c_define_gsubr("delete-llama-beam-view", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_beam_view);
  SWIG_TypeClientData(SWIGTYPE_p_llama_beams_state, (void *) &_swig_guile_clientdatallama_beams_state);
  scm_c_define_gsubr("llama-beams-state-beam-views-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_beam_views_set);
  scm_c_define_gsubr("llama-beams-state-beam-views-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_beam_views_get);
  scm_c_define_gsubr("llama-beams-state-n-beams-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_n_beams_set);
  scm_c_define_gsubr("llama-beams-state-n-beams-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_n_beams_get);
  scm_c_define_gsubr("llama-beams-state-common-prefix-length-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_common_prefix_length_set);
  scm_c_define_gsubr("llama-beams-state-common-prefix-length-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_common_prefix_length_get);
  scm_c_define_gsubr("llama-beams-state-last-call-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_last_call_set);
  scm_c_define_gsubr("llama-beams-state-last-call-get", 1, 0, 0, (swig_guile_proc) _wrap_llama_beams_state_last_call_get);
  scm_c_define_gsubr("new-llama-beams-state", 0, 0, 0, (swig_guile_proc) _wrap_new_llama_beams_state);
  ((swig_guile_clientdata *)(SWIGTYPE_p_llama_beams_state->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_beams_state;
  scm_c_define_gsubr("delete-llama-beams-state", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_beams_state);
  scm_c_define_gsubr("llama-beam-search", 6, 0, 0, (swig_guile_proc) _wrap_llama_beam_search);
  scm_c_define_gsubr("llama-split-path", 5, 0, 0, (swig_guile_proc) _wrap_llama_split_path);
  scm_c_define_gsubr("llama-split-prefix", 5, 0, 0, (swig_guile_proc) _wrap_llama_split_prefix);
  scm_c_define_gsubr("llama-get-timings", 1, 0, 0, (swig_guile_proc) _wrap_llama_get_timings);
  scm_c_define_gsubr("llama-print-timings", 1, 0, 0, (swig_guile_proc) _wrap_llama_print_timings);
  scm_c_define_gsubr("llama-reset-timings", 1, 0, 0, (swig_guile_proc) _wrap_llama_reset_timings);
  scm_c_define_gsubr("llama-print-system-info", 0, 0, 0, (swig_guile_proc) _wrap_llama_print_system_info);
  scm_c_define_gsubr("llama-log-set", 2, 0, 0, (swig_guile_proc) _wrap_llama_log_set);
  scm_c_define_gsubr("llama-dump-timing-info-yaml", 2, 0, 0, (swig_guile_proc) _wrap_llama_dump_timing_info_yaml);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_llama_seq_id_t, (void *) &_swig_guile_clientdatallama_seq_id_vector);
  scm_c_define_gsubr("new-llama-seq-id-vector", 0, 0, 1, (swig_guile_proc) _wrap_new_llama_seq_id_vector);
  scm_c_define_gsubr("llama-seq-id-vector-length", 1, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_length);
  scm_c_define_gsubr("llama-seq-id-vector-empty?", 1, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_emptyq___);
  scm_c_define_gsubr("llama-seq-id-vector-clear!", 1, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_clearN___);
  scm_c_define_gsubr("llama-seq-id-vector-push!", 2, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_pushN___);
  scm_c_define_gsubr("llama-seq-id-vector-pop!", 1, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_popN___);
  scm_c_define_gsubr("llama-seq-id-vector-ref", 2, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_ref);
  scm_c_define_gsubr("llama-seq-id-vector-set!", 3, 0, 0, (swig_guile_proc) _wrap_llama_seq_id_vector_setN___);
  ((swig_guile_clientdata *)(SWIGTYPE_p_std__vectorT_llama_seq_id_t->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_seq_id_vector;
  scm_c_define_gsubr("delete-llama-seq-id-vector", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_seq_id_vector);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_llama_token_data_t, (void *) &_swig_guile_clientdatallama_token_data_vector);
  scm_c_define_gsubr("new-llama-token-data-vector", 0, 0, 1, (swig_guile_proc) _wrap_new_llama_token_data_vector);
  scm_c_define_gsubr("llama-token-data-vector-length", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_length);
  scm_c_define_gsubr("llama-token-data-vector-empty?", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_emptyq___);
  scm_c_define_gsubr("llama-token-data-vector-clear!", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_clearN___);
  scm_c_define_gsubr("llama-token-data-vector-push!", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_pushN___);
  scm_c_define_gsubr("llama-token-data-vector-pop!", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_popN___);
  scm_c_define_gsubr("llama-token-data-vector-ref", 2, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_ref);
  scm_c_define_gsubr("llama-token-data-vector-set!", 3, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_setN___);
  ((swig_guile_clientdata *)(SWIGTYPE_p_std__vectorT_llama_token_data_t->clientdata))->destroy = (guile_destructor) _wrap_delete_llama_token_data_vector;
  scm_c_define_gsubr("delete-llama-token-data-vector", 1, 0, 0, (swig_guile_proc) _wrap_delete_llama_token_data_vector);
  scm_c_define_gsubr("llama-batch-add", 5, 0, 0, (swig_guile_proc) _wrap_llama_batch_add);
  scm_c_define_gsubr("llama-token-data-vector-data", 1, 0, 0, (swig_guile_proc) _wrap_llama_token_data_vector_data);
}

#ifdef __cplusplus
}
#endif
extern "C" {
/* Linkage: module */
static void SWIG_init_helper(void *data)
{
  SWIG_init();
  scm_c_export("new-int8-array", "delete-int8-array", "int8-array-getitem", "int8-array-setitem", "int8-array-cast", "int8-array-frompointer", "new-uint8-array", "delete-uint8-array", "uint8-array-getitem", "uint8-array-setitem", "uint8-array-cast", "uint8-array-frompointer", "new-int16-array", "delete-int16-array", "int16-array-getitem", "int16-array-setitem", "int16-array-cast", "int16-array-frompointer", "new-uint16-array", "delete-uint16-array", "uint16-array-getitem", "uint16-array-setitem", "uint16-array-cast", "uint16-array-frompointer", "new-int32-array", "delete-int32-array", "int32-array-getitem", "int32-array-setitem", "int32-array-cast", "int32-array-frompointer", "new-uint32-array", "delete-uint32-array", "uint32-array-getitem", "uint32-array-setitem", "uint32-array-cast", "uint32-array-frompointer", "new-int64-array", "delete-int64-array", "int64-array-getitem", "int64-array-setitem", "int64-array-cast", "int64-array-frompointer", "new-uint64-array", "delete-uint64-array", "uint64-array-getitem", "uint64-array-setitem", "uint64-array-cast", "uint64-array-frompointer", "new-size-t-array", "delete-size-t-array", "size-t-array-getitem", "size-t-array-setitem", "size-t-array-cast", "size-t-array-frompointer", "new-bool-array", "delete-bool-array", "bool-array-getitem", "bool-array-setitem", "bool-array-cast", "bool-array-frompointer", "new-float-array", "delete-float-array", "float-array-getitem", "float-array-setitem", "float-array-cast", "float-array-frompointer", "new-double-t-array", "delete-double-t-array", "double-t-array-getitem", "double-t-array-setitem", "double-t-array-cast", "double-t-array-frompointer", "new-IntVector", "new-IntVector", "new-IntVector", "new-IntVector", "IntVector-length", "IntVector-empty?", "IntVector-clear!", "IntVector-push!", "IntVector-pop!", "IntVector-ref", "IntVector-set!", "delete-IntVector", "new-DoubleVector", "new-DoubleVector", "new-DoubleVector", "new-DoubleVector", "DoubleVector-length", "DoubleVector-empty?", "DoubleVector-clear!", "DoubleVector-push!", "DoubleVector-pop!", "DoubleVector-ref", "DoubleVector-set!", "delete-DoubleVector", "new-llama-token-array", "delete-llama-token-array", "llama-token-array-getitem", "llama-token-array-setitem", "llama-token-array-cast", "llama-token-array-frompointer", "new-llama-token-data-carray", "delete-llama-token-data-carray", "llama-token-data-carray-getitem", "llama-token-data-carray-setitem", "llama-token-data-carray-cast", "llama-token-data-carray-frompointer", "LLAMA-VOCAB-TYPE-NONE", "LLAMA-VOCAB-TYPE-SPM", "LLAMA-VOCAB-TYPE-BPE", "LLAMA-VOCAB-TYPE-WPM", "LLAMA-VOCAB-PRE-TYPE-DEFAULT", "LLAMA-VOCAB-PRE-TYPE-LLAMA3", "LLAMA-VOCAB-PRE-TYPE-DEEPSEEK-LLM", "LLAMA-VOCAB-PRE-TYPE-DEEPSEEK-CODER", "LLAMA-VOCAB-PRE-TYPE-FALCON", "LLAMA-VOCAB-PRE-TYPE-MPT", "LLAMA-VOCAB-PRE-TYPE-STARCODER", "LLAMA-VOCAB-PRE-TYPE-GPT2", "LLAMA-VOCAB-PRE-TYPE-REFACT", "LLAMA-VOCAB-PRE-TYPE-COMMAND-R", "LLAMA-VOCAB-PRE-TYPE-QWEN2", "LLAMA-VOCAB-PRE-TYPE-OLMO", "LLAMA-VOCAB-PRE-TYPE-DBRX", "LLAMA-ROPE-TYPE-NONE", "LLAMA-ROPE-TYPE-NORM", "LLAMA-ROPE-TYPE-NEOX", "LLAMA-ROPE-TYPE-GLM", "LLAMA-TOKEN-TYPE-UNDEFINED", "LLAMA-TOKEN-TYPE-NORMAL", "LLAMA-TOKEN-TYPE-UNKNOWN", "LLAMA-TOKEN-TYPE-CONTROL", "LLAMA-TOKEN-TYPE-USER-DEFINED", "LLAMA-TOKEN-TYPE-UNUSED", "LLAMA-TOKEN-TYPE-BYTE", "LLAMA-FTYPE-ALL-F32", "LLAMA-FTYPE-MOSTLY-F16", "LLAMA-FTYPE-MOSTLY-Q4-0", "LLAMA-FTYPE-MOSTLY-Q4-1", "LLAMA-FTYPE-MOSTLY-Q4-1-SOME-F16", "LLAMA-FTYPE-MOSTLY-Q8-0", "LLAMA-FTYPE-MOSTLY-Q5-0", "LLAMA-FTYPE-MOSTLY-Q5-1", "LLAMA-FTYPE-MOSTLY-Q2-K", "LLAMA-FTYPE-MOSTLY-Q3-K-S", "LLAMA-FTYPE-MOSTLY-Q3-K-M", "LLAMA-FTYPE-MOSTLY-Q3-K-L", "LLAMA-FTYPE-MOSTLY-Q4-K-S", "LLAMA-FTYPE-MOSTLY-Q4-K-M", "LLAMA-FTYPE-MOSTLY-Q5-K-S", "LLAMA-FTYPE-MOSTLY-Q5-K-M", "LLAMA-FTYPE-MOSTLY-Q6-K", "LLAMA-FTYPE-MOSTLY-IQ2-XXS", "LLAMA-FTYPE-MOSTLY-IQ2-XS", "LLAMA-FTYPE-MOSTLY-Q2-K-S", "LLAMA-FTYPE-MOSTLY-IQ3-XS", "LLAMA-FTYPE-MOSTLY-IQ3-XXS", "LLAMA-FTYPE-MOSTLY-IQ1-S", "LLAMA-FTYPE-MOSTLY-IQ4-NL", "LLAMA-FTYPE-MOSTLY-IQ3-S", "LLAMA-FTYPE-MOSTLY-IQ3-M", "LLAMA-FTYPE-MOSTLY-IQ2-S", "LLAMA-FTYPE-MOSTLY-IQ2-M", "LLAMA-FTYPE-MOSTLY-IQ4-XS", "LLAMA-FTYPE-MOSTLY-IQ1-M", "LLAMA-FTYPE-MOSTLY-BF16", "LLAMA-FTYPE-GUESSED", "LLAMA-ROPE-SCALING-TYPE-UNSPECIFIED", "LLAMA-ROPE-SCALING-TYPE-NONE", "LLAMA-ROPE-SCALING-TYPE-LINEAR", "LLAMA-ROPE-SCALING-TYPE-YARN", "LLAMA-ROPE-SCALING-TYPE-MAX-VALUE", "LLAMA-POOLING-TYPE-UNSPECIFIED", "LLAMA-POOLING-TYPE-NONE", "LLAMA-POOLING-TYPE-MEAN", "LLAMA-POOLING-TYPE-CLS", "LLAMA-SPLIT-MODE-NONE", "LLAMA-SPLIT-MODE-LAYER", "LLAMA-SPLIT-MODE-ROW", "llama-token-data-id-set", "llama-token-data-id-get", "llama-token-data-logit-set", "llama-token-data-logit-get", "llama-token-data-p-set", "llama-token-data-p-get", "new-llama-token-data", "delete-llama-token-data", "llama-token-data-array-data-set", "llama-token-data-array-data-get", "llama-token-data-array-size-set", "llama-token-data-array-size-get", "llama-token-data-array-sorted-set", "llama-token-data-array-sorted-get", "new-llama-token-data-array", "delete-llama-token-data-array", "llama-batch-n-tokens-set", "llama-batch-n-tokens-get", "llama-batch-token-set", "llama-batch-token-get", "llama-batch-embd-set", "llama-batch-embd-get", "llama-batch-pos-set", "llama-batch-pos-get", "llama-batch-n-seq-id-set", "llama-batch-n-seq-id-get", "llama-batch-seq-id-set", "llama-batch-seq-id-get", "llama-batch-logits-set", "llama-batch-logits-get", "llama-batch-all-pos-0-set", "llama-batch-all-pos-0-get", "llama-batch-all-pos-1-set", "llama-batch-all-pos-1-get", "llama-batch-all-seq-id-set", "llama-batch-all-seq-id-get", "new-llama-batch", "delete-llama-batch", "LLAMA-KV-OVERRIDE-TYPE-INT", "LLAMA-KV-OVERRIDE-TYPE-FLOAT", "LLAMA-KV-OVERRIDE-TYPE-BOOL", "LLAMA-KV-OVERRIDE-TYPE-STR", "llama-model-kv-override-tag-set", "llama-model-kv-override-tag-get", "llama-model-kv-override-key-set", "llama-model-kv-override-key-get", "new-llama-model-kv-override", "delete-llama-model-kv-override", "llama-model-params-n-gpu-layers-set", "llama-model-params-n-gpu-layers-get", "llama-model-params-split-mode-set", "llama-model-params-split-mode-get", "llama-model-params-main-gpu-set", "llama-model-params-main-gpu-get", "llama-model-params-tensor-split-set", "llama-model-params-tensor-split-get", "llama-model-params-progress-callback-set", "llama-model-params-progress-callback-get", "llama-model-params-progress-callback-user-data-set", "llama-model-params-progress-callback-user-data-get", "llama-model-params-kv-overrides-set", "llama-model-params-kv-overrides-get", "llama-model-params-vocab-only-set", "llama-model-params-vocab-only-get", "llama-model-params-use-mmap-set", "llama-model-params-use-mmap-get", "llama-model-params-use-mlock-set", "llama-model-params-use-mlock-get", "llama-model-params-check-tensors-set", "llama-model-params-check-tensors-get", "new-llama-model-params", "delete-llama-model-params", "llama-context-params-seed-set", "llama-context-params-seed-get", "llama-context-params-n-ctx-set", "llama-context-params-n-ctx-get", "llama-context-params-n-batch-set", "llama-context-params-n-batch-get", "llama-context-params-n-ubatch-set", "llama-context-params-n-ubatch-get", "llama-context-params-n-seq-max-set", "llama-context-params-n-seq-max-get", "llama-context-params-n-threads-set", "llama-context-params-n-threads-get", "llama-context-params-n-threads-batch-set", "llama-context-params-n-threads-batch-get", "llama-context-params-rope-scaling-type-set", "llama-context-params-rope-scaling-type-get", "llama-context-params-pooling-type-set", "llama-context-params-pooling-type-get", "llama-context-params-rope-freq-base-set", "llama-context-params-rope-freq-base-get", "llama-context-params-rope-freq-scale-set", "llama-context-params-rope-freq-scale-get", "llama-context-params-yarn-ext-factor-set", "llama-context-params-yarn-ext-factor-get", "llama-context-params-yarn-attn-factor-set", "llama-context-params-yarn-attn-factor-get", "llama-context-params-yarn-beta-fast-set", "llama-context-params-yarn-beta-fast-get", "llama-context-params-yarn-beta-slow-set", "llama-context-params-yarn-beta-slow-get", "llama-context-params-yarn-orig-ctx-set", "llama-context-params-yarn-orig-ctx-get", "llama-context-params-defrag-thold-set", "llama-context-params-defrag-thold-get", "llama-context-params-cb-eval-set", "llama-context-params-cb-eval-get", "llama-context-params-cb-eval-user-data-set", "llama-context-params-cb-eval-user-data-get", "llama-context-params-type-k-set", "llama-context-params-type-k-get", "llama-context-params-type-v-set", "llama-context-params-type-v-get", "llama-context-params-logits-all-set", "llama-context-params-logits-all-get", "llama-context-params-embeddings-set", "llama-context-params-embeddings-get", "llama-context-params-offload-kqv-set", "llama-context-params-offload-kqv-get", "llama-context-params-flash-attn-set", "llama-context-params-flash-attn-get", "llama-context-params-abort-callback-set", "llama-context-params-abort-callback-get", "llama-context-params-abort-callback-data-set", "llama-context-params-abort-callback-data-get", "new-llama-context-params", "delete-llama-context-params", "llama-model-quantize-params-nthread-set", "llama-model-quantize-params-nthread-get", "llama-model-quantize-params-ftype-set", "llama-model-quantize-params-ftype-get", "llama-model-quantize-params-output-tensor-type-set", "llama-model-quantize-params-output-tensor-type-get", "llama-model-quantize-params-token-embedding-type-set", "llama-model-quantize-params-token-embedding-type-get", "llama-model-quantize-params-allow-requantize-set", "llama-model-quantize-params-allow-requantize-get", "llama-model-quantize-params-quantize-output-tensor-set", "llama-model-quantize-params-quantize-output-tensor-get", "llama-model-quantize-params-only-copy-set", "llama-model-quantize-params-only-copy-get", "llama-model-quantize-params-pure-set", "llama-model-quantize-params-pure-get", "llama-model-quantize-params-keep-split-set", "llama-model-quantize-params-keep-split-get", "llama-model-quantize-params-imatrix-set", "llama-model-quantize-params-imatrix-get", "llama-model-quantize-params-kv-overrides-set", "llama-model-quantize-params-kv-overrides-get", "new-llama-model-quantize-params", "delete-llama-model-quantize-params", "LLAMA-GRETYPE-END", "LLAMA-GRETYPE-ALT", "LLAMA-GRETYPE-RULE-REF", "LLAMA-GRETYPE-CHAR", "LLAMA-GRETYPE-CHAR-NOT", "LLAMA-GRETYPE-CHAR-RNG-UPPER", "LLAMA-GRETYPE-CHAR-ALT", "llama-grammar-element-type-set", "llama-grammar-element-type-get", "llama-grammar-element-value-set", "llama-grammar-element-value-get", "new-llama-grammar-element", "delete-llama-grammar-element", "llama-timings-t-start-ms-set", "llama-timings-t-start-ms-get", "llama-timings-t-end-ms-set", "llama-timings-t-end-ms-get", "llama-timings-t-load-ms-set", "llama-timings-t-load-ms-get", "llama-timings-t-sample-ms-set", "llama-timings-t-sample-ms-get", "llama-timings-t-p-eval-ms-set", "llama-timings-t-p-eval-ms-get", "llama-timings-t-eval-ms-set", "llama-timings-t-eval-ms-get", "llama-timings-n-sample-set", "llama-timings-n-sample-get", "llama-timings-n-p-eval-set", "llama-timings-n-p-eval-get", "llama-timings-n-eval-set", "llama-timings-n-eval-get", "new-llama-timings", "delete-llama-timings", "llama-chat-message-role-set", "llama-chat-message-role-get", "llama-chat-message-content-set", "llama-chat-message-content-get", "new-llama-chat-message", "delete-llama-chat-message", "llama-model-default-params", "llama-context-default-params", "llama-model-quantize-default-params", "llama-backend-init", "llama-numa-init", "llama-backend-free", "llama-load-model-from-file", "llama-free-model", "llama-new-context-with-model", "llama-free", "llama-time-us", "llama-max-devices", "llama-supports-mmap", "llama-supports-mlock", "llama-supports-gpu-offload", "llama-get-model", "llama-n-ctx", "llama-n-batch", "llama-n-ubatch", "llama-n-seq-max", "llama-n-vocab", "llama-n-ctx-train", "llama-n-embd", "llama-n-layer", "llama-rope-freq-scale-train", "llama-model-meta-val-str", "llama-model-meta-count", "llama-model-meta-key-by-index", "llama-model-meta-val-str-by-index", "llama-model-desc", "llama-model-size", "llama-model-n-params", "llama-get-model-tensor", "llama-model-quantize", "llama-model-apply-lora-from-file", "llama-control-vector-apply", "llama-kv-cache-view-cell-pos-set", "llama-kv-cache-view-cell-pos-get", "new-llama-kv-cache-view-cell", "delete-llama-kv-cache-view-cell", "llama-kv-cache-view-n-cells-set", "llama-kv-cache-view-n-cells-get", "llama-kv-cache-view-n-seq-max-set", "llama-kv-cache-view-n-seq-max-get", "llama-kv-cache-view-token-count-set", "llama-kv-cache-view-token-count-get", "llama-kv-cache-view-used-cells-set", "llama-kv-cache-view-used-cells-get", "llama-kv-cache-view-max-contiguous-set", "llama-kv-cache-view-max-contiguous-get", "llama-kv-cache-view-max-contiguous-idx-set", "llama-kv-cache-view-max-contiguous-idx-get", "llama-kv-cache-view-cells-set", "llama-kv-cache-view-cells-get", "llama-kv-cache-view-cells-sequences-set", "llama-kv-cache-view-cells-sequences-get", "new-llama-kv-cache-view", "delete-llama-kv-cache-view", "llama-kv-cache-view-init", "llama-kv-cache-view-free", "llama-kv-cache-view-update", "llama-get-kv-cache-token-count", "llama-get-kv-cache-used-cells", "llama-kv-cache-clear", "llama-kv-cache-seq-rm", "llama-kv-cache-seq-cp", "llama-kv-cache-seq-keep", "llama-kv-cache-seq-add", "llama-kv-cache-seq-div", "llama-kv-cache-seq-pos-max", "llama-kv-cache-defrag", "llama-kv-cache-update", "llama-state-get-size", "llama-get-state-size", "llama-state-get-data", "llama-copy-state-data", "llama-state-set-data", "llama-set-state-data", "llama-state-load-file", "llama-load-session-file", "llama-state-save-file", "llama-save-session-file", "llama-state-seq-get-size", "llama-state-seq-get-data", "llama-state-seq-set-data", "llama-state-seq-save-file", "llama-state-seq-load-file", "llama-batch-get-one", "llama-batch-init", "llama-batch-free", "llama-decode", "llama-set-n-threads", "llama-set-causal-attn", "llama-set-abort-callback", "llama-synchronize", "llama-get-logits", "llama-get-logits-ith", "llama-get-embeddings", "llama-get-embeddings-ith", "llama-get-embeddings-seq", "llama-token-get-text", "llama-token-get-score", "llama-token-get-type", "llama-token-is-eog", "llama-token-bos", "llama-token-eos", "llama-token-cls", "llama-token-sep", "llama-token-nl", "llama-add-bos-token", "llama-add-eos-token", "llama-token-prefix", "llama-token-middle", "llama-token-suffix", "llama-token-eot", "llama-tokenize", "llama-token-to-piece", "llama-chat-apply-template", "llama-grammar-init", "llama-grammar-free", "llama-grammar-copy", "llama-set-rng-seed", "llama-sample-repetition-penalties", "llama-sample-apply-guidance", "llama-sample-softmax", "llama-sample-top-k", "llama-sample-top-p", "llama-sample-min-p", "llama-sample-tail-free", "llama-sample-typical", "llama-sample-entropy", "llama-sample-temp", "llama-sample-grammar", "llama-sample-token-mirostat", "llama-sample-token-mirostat-v2", "llama-sample-token-greedy", "llama-sample-token", "llama-grammar-accept-token", "llama-beam-view-tokens-set", "llama-beam-view-tokens-get", "llama-beam-view-n-tokens-set", "llama-beam-view-n-tokens-get", "llama-beam-view-p-set", "llama-beam-view-p-get", "llama-beam-view-eob-set", "llama-beam-view-eob-get", "new-llama-beam-view", "delete-llama-beam-view", "llama-beams-state-beam-views-set", "llama-beams-state-beam-views-get", "llama-beams-state-n-beams-set", "llama-beams-state-n-beams-get", "llama-beams-state-common-prefix-length-set", "llama-beams-state-common-prefix-length-get", "llama-beams-state-last-call-set", "llama-beams-state-last-call-get", "new-llama-beams-state", "delete-llama-beams-state", "llama-beam-search", "llama-split-path", "llama-split-prefix", "llama-get-timings", "llama-print-timings", "llama-reset-timings", "llama-print-system-info", "llama-log-set", "llama-dump-timing-info-yaml", "new-llama-seq-id-vector", "new-llama-seq-id-vector", "new-llama-seq-id-vector", "new-llama-seq-id-vector", "llama-seq-id-vector-length", "llama-seq-id-vector-empty?", "llama-seq-id-vector-clear!", "llama-seq-id-vector-push!", "llama-seq-id-vector-pop!", "llama-seq-id-vector-ref", "llama-seq-id-vector-set!", "delete-llama-seq-id-vector", "new-llama-token-data-vector", "new-llama-token-data-vector", "new-llama-token-data-vector", "new-llama-token-data-vector", "llama-token-data-vector-length", "llama-token-data-vector-empty?", "llama-token-data-vector-clear!", "llama-token-data-vector-push!", "llama-token-data-vector-pop!", "llama-token-data-vector-ref", "llama-token-data-vector-set!", "delete-llama-token-data-vector", "llama-batch-add", "llama-token-data-vector-data", NULL);
}

SCM
scm_init_guile_llama_cpp_module (void)
{
  scm_c_define_module("guile-llama-cpp",
    SWIG_init_helper, NULL);
  return SCM_UNSPECIFIED;
}

}

